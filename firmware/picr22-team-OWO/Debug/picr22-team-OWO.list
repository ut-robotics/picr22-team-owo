
picr22-team-OWO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a844  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800aa1c  0800aa1c  0001aa1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa74  0800aa74  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  0800aa74  0800aa74  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800aa74  0800aa74  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa74  0800aa74  0001aa74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa78  0800aa78  0001aa78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  0800aa7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001440  20000184  0800ac00  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015c4  0800ac00  000215c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   000165f0  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000358f  00000000  00000000  000367a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001358  00000000  00000000  00039d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011e0  00000000  00000000  0003b090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020c57  00000000  00000000  0003c270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001659c  00000000  00000000  0005cec7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6524  00000000  00000000  00073463  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00139987  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005134  00000000  00000000  001399d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800aa04 	.word	0x0800aa04

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	0800aa04 	.word	0x0800aa04

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	; 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	; 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__aeabi_d2uiz>:
 80007e4:	004a      	lsls	r2, r1, #1
 80007e6:	d211      	bcs.n	800080c <__aeabi_d2uiz+0x28>
 80007e8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007ec:	d211      	bcs.n	8000812 <__aeabi_d2uiz+0x2e>
 80007ee:	d50d      	bpl.n	800080c <__aeabi_d2uiz+0x28>
 80007f0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007f8:	d40e      	bmi.n	8000818 <__aeabi_d2uiz+0x34>
 80007fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000802:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000806:	fa23 f002 	lsr.w	r0, r3, r2
 800080a:	4770      	bx	lr
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	4770      	bx	lr
 8000812:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000816:	d102      	bne.n	800081e <__aeabi_d2uiz+0x3a>
 8000818:	f04f 30ff 	mov.w	r0, #4294967295
 800081c:	4770      	bx	lr
 800081e:	f04f 0000 	mov.w	r0, #0
 8000822:	4770      	bx	lr

08000824 <CDC_On_Receive>:
// Prefilled command struct
Command command = {.speed[0] = 0, .speed[1] = 0, .speed[2] = 0, .thrower_speed = 0, .delimiter = 0};
volatile uint8_t isCommandReceived = 0;

// Copies the recieved command into the command struct
void CDC_On_Receive(uint8_t* buffer, uint32_t* length) { // command recieve callback, copies data to command struct
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	6039      	str	r1, [r7, #0]
  if (*length == sizeof(Command)) {
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	2b0a      	cmp	r3, #10
 8000834:	d10d      	bne.n	8000852 <CDC_On_Receive+0x2e>
    memcpy(&command, buffer, sizeof(Command));
 8000836:	220a      	movs	r2, #10
 8000838:	6879      	ldr	r1, [r7, #4]
 800083a:	4808      	ldr	r0, [pc, #32]	; (800085c <CDC_On_Receive+0x38>)
 800083c:	f00a f8cc 	bl	800a9d8 <memcpy>
    if (command.delimiter == 0xAAAA) {
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <CDC_On_Receive+0x38>)
 8000842:	891b      	ldrh	r3, [r3, #8]
 8000844:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000848:	4293      	cmp	r3, r2
 800084a:	d102      	bne.n	8000852 <CDC_On_Receive+0x2e>
      isCommandReceived = 1;
 800084c:	4b04      	ldr	r3, [pc, #16]	; (8000860 <CDC_On_Receive+0x3c>)
 800084e:	2201      	movs	r2, #1
 8000850:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	200003fc 	.word	0x200003fc
 8000860:	20000406 	.word	0x20000406

08000864 <enc_init>:

// Initialises the encoders
void enc_init() {
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Motor 1 ?
 8000868:	2104      	movs	r1, #4
 800086a:	4806      	ldr	r0, [pc, #24]	; (8000884 <enc_init+0x20>)
 800086c:	f004 fb32 	bl	8004ed4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Motor 2
 8000870:	2104      	movs	r1, #4
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <enc_init+0x24>)
 8000874:	f004 fb2e 	bl	8004ed4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Motor 3 ?
 8000878:	2104      	movs	r1, #4
 800087a:	4804      	ldr	r0, [pc, #16]	; (800088c <enc_init+0x28>)
 800087c:	f004 fb2a 	bl	8004ed4 <HAL_TIM_Encoder_Start>
}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000284 	.word	0x20000284
 8000888:	200001a0 	.word	0x200001a0
 800088c:	20000238 	.word	0x20000238

08000890 <pwm_init>:

// Initialises the PWMs
void pwm_init() {
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
	TIM8->CCR2 = 0;
 8000894:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <pwm_init+0x34>)
 8000896:	2200      	movs	r2, #0
 8000898:	639a      	str	r2, [r3, #56]	; 0x38
	TIM8->CCR1 = 0;
 800089a:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <pwm_init+0x34>)
 800089c:	2200      	movs	r2, #0
 800089e:	635a      	str	r2, [r3, #52]	; 0x34
	TIM8->CCR3 = 0;
 80008a0:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <pwm_init+0x34>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80008a6:	2100      	movs	r1, #0
 80008a8:	4807      	ldr	r0, [pc, #28]	; (80008c8 <pwm_init+0x38>)
 80008aa:	f004 f96d 	bl	8004b88 <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_2);
 80008ae:	2104      	movs	r1, #4
 80008b0:	4805      	ldr	r0, [pc, #20]	; (80008c8 <pwm_init+0x38>)
 80008b2:	f005 fa05 	bl	8005cc0 <HAL_TIMEx_PWMN_Start>
    HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_3);
 80008b6:	2108      	movs	r1, #8
 80008b8:	4803      	ldr	r0, [pc, #12]	; (80008c8 <pwm_init+0x38>)
 80008ba:	f005 fa01 	bl	8005cc0 <HAL_TIMEx_PWMN_Start>

}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40013400 	.word	0x40013400
 80008c8:	2000031c 	.word	0x2000031c

080008cc <motor_status_update>:

// Updates the motor's speed and direction from the command struct
void motor_status_update() {
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i<3; i++) {
 80008d2:	2300      	movs	r3, #0
 80008d4:	71fb      	strb	r3, [r7, #7]
 80008d6:	e053      	b.n	8000980 <motor_status_update+0xb4>
		if (command.speed[i] >= 0) {
 80008d8:	79fb      	ldrb	r3, [r7, #7]
 80008da:	4a2e      	ldr	r2, [pc, #184]	; (8000994 <motor_status_update+0xc8>)
 80008dc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	db23      	blt.n	800092c <motor_status_update+0x60>
			motor_status[i].direction = 1;
 80008e4:	79fa      	ldrb	r2, [r7, #7]
 80008e6:	492c      	ldr	r1, [pc, #176]	; (8000998 <motor_status_update+0xcc>)
 80008e8:	4613      	mov	r3, r2
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	4413      	add	r3, r2
 80008ee:	00db      	lsls	r3, r3, #3
 80008f0:	440b      	add	r3, r1
 80008f2:	3302      	adds	r3, #2
 80008f4:	2201      	movs	r2, #1
 80008f6:	701a      	strb	r2, [r3, #0]
			if (command.speed[i] == 1) {command.speed[i] = 2;} // Everybody gangsta till the input speed is 1
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	4a26      	ldr	r2, [pc, #152]	; (8000994 <motor_status_update+0xc8>)
 80008fc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000900:	2b01      	cmp	r3, #1
 8000902:	d104      	bne.n	800090e <motor_status_update+0x42>
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	4a23      	ldr	r2, [pc, #140]	; (8000994 <motor_status_update+0xc8>)
 8000908:	2102      	movs	r1, #2
 800090a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			motor_status[i].target_speed = command.speed[i];
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	4a20      	ldr	r2, [pc, #128]	; (8000994 <motor_status_update+0xc8>)
 8000912:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000916:	79fa      	ldrb	r2, [r7, #7]
 8000918:	b298      	uxth	r0, r3
 800091a:	491f      	ldr	r1, [pc, #124]	; (8000998 <motor_status_update+0xcc>)
 800091c:	4613      	mov	r3, r2
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	4413      	add	r3, r2
 8000922:	00db      	lsls	r3, r3, #3
 8000924:	440b      	add	r3, r1
 8000926:	4602      	mov	r2, r0
 8000928:	801a      	strh	r2, [r3, #0]
 800092a:	e026      	b.n	800097a <motor_status_update+0xae>
		} else {
			motor_status[i].direction = 0;
 800092c:	79fa      	ldrb	r2, [r7, #7]
 800092e:	491a      	ldr	r1, [pc, #104]	; (8000998 <motor_status_update+0xcc>)
 8000930:	4613      	mov	r3, r2
 8000932:	005b      	lsls	r3, r3, #1
 8000934:	4413      	add	r3, r2
 8000936:	00db      	lsls	r3, r3, #3
 8000938:	440b      	add	r3, r1
 800093a:	3302      	adds	r3, #2
 800093c:	2200      	movs	r2, #0
 800093e:	701a      	strb	r2, [r3, #0]
			if (command.speed[i] == -1) {command.speed[i] = -2;} // Everybody gangsta till the input speed is -1
 8000940:	79fb      	ldrb	r3, [r7, #7]
 8000942:	4a14      	ldr	r2, [pc, #80]	; (8000994 <motor_status_update+0xc8>)
 8000944:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800094c:	d105      	bne.n	800095a <motor_status_update+0x8e>
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	4a10      	ldr	r2, [pc, #64]	; (8000994 <motor_status_update+0xc8>)
 8000952:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8000956:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			motor_status[i].target_speed = -(command.speed[i]);
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	4a0d      	ldr	r2, [pc, #52]	; (8000994 <motor_status_update+0xc8>)
 800095e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000962:	b29b      	uxth	r3, r3
 8000964:	79fa      	ldrb	r2, [r7, #7]
 8000966:	425b      	negs	r3, r3
 8000968:	b298      	uxth	r0, r3
 800096a:	490b      	ldr	r1, [pc, #44]	; (8000998 <motor_status_update+0xcc>)
 800096c:	4613      	mov	r3, r2
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	4413      	add	r3, r2
 8000972:	00db      	lsls	r3, r3, #3
 8000974:	440b      	add	r3, r1
 8000976:	4602      	mov	r2, r0
 8000978:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i<3; i++) {
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	3301      	adds	r3, #1
 800097e:	71fb      	strb	r3, [r7, #7]
 8000980:	79fb      	ldrb	r3, [r7, #7]
 8000982:	2b02      	cmp	r3, #2
 8000984:	d9a8      	bls.n	80008d8 <motor_status_update+0xc>
		}
	}
}
 8000986:	bf00      	nop
 8000988:	bf00      	nop
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr
 8000994:	200003fc 	.word	0x200003fc
 8000998:	200003b4 	.word	0x200003b4
 800099c:	00000000 	.word	0x00000000

080009a0 <motor_pwm>:

// Converts internal encoder speed to a PWM value
uint16_t motor_pwm(uint8_t mot_id) {
 80009a0:	b590      	push	{r4, r7, lr}
 80009a2:	b087      	sub	sp, #28
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	71fb      	strb	r3, [r7, #7]
	uint16_t speed = motor_status[mot_id].target_speed;
 80009aa:	79fa      	ldrb	r2, [r7, #7]
 80009ac:	495c      	ldr	r1, [pc, #368]	; (8000b20 <motor_pwm+0x180>)
 80009ae:	4613      	mov	r3, r2
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	4413      	add	r3, r2
 80009b4:	00db      	lsls	r3, r3, #3
 80009b6:	440b      	add	r3, r1
 80009b8:	881b      	ldrh	r3, [r3, #0]
 80009ba:	827b      	strh	r3, [r7, #18]
	uint16_t pwm = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	82fb      	strh	r3, [r7, #22]
	uint16_t new_pos = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	82bb      	strh	r3, [r7, #20]

	// for some reason case 0 and 2 are inverted
	switch (mot_id) {
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	2b02      	cmp	r3, #2
 80009c8:	d00e      	beq.n	80009e8 <motor_pwm+0x48>
 80009ca:	2b02      	cmp	r3, #2
 80009cc:	dc10      	bgt.n	80009f0 <motor_pwm+0x50>
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d002      	beq.n	80009d8 <motor_pwm+0x38>
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d004      	beq.n	80009e0 <motor_pwm+0x40>
 80009d6:	e00b      	b.n	80009f0 <motor_pwm+0x50>
		case 0:
			new_pos = TIM3->CNT;
 80009d8:	4b52      	ldr	r3, [pc, #328]	; (8000b24 <motor_pwm+0x184>)
 80009da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009dc:	82bb      	strh	r3, [r7, #20]
			break;
 80009de:	e007      	b.n	80009f0 <motor_pwm+0x50>
		case 1:
			new_pos = TIM1->CNT;
 80009e0:	4b51      	ldr	r3, [pc, #324]	; (8000b28 <motor_pwm+0x188>)
 80009e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009e4:	82bb      	strh	r3, [r7, #20]
			break;
 80009e6:	e003      	b.n	80009f0 <motor_pwm+0x50>
		case 2:
			new_pos = TIM4->CNT;
 80009e8:	4b50      	ldr	r3, [pc, #320]	; (8000b2c <motor_pwm+0x18c>)
 80009ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ec:	82bb      	strh	r3, [r7, #20]
			break;
 80009ee:	bf00      	nop
	}
	int16_t pos_change = abs((int16_t)new_pos - motor_status[mot_id].enc_pos);
 80009f0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80009f4:	4618      	mov	r0, r3
 80009f6:	79fa      	ldrb	r2, [r7, #7]
 80009f8:	4949      	ldr	r1, [pc, #292]	; (8000b20 <motor_pwm+0x180>)
 80009fa:	4613      	mov	r3, r2
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	4413      	add	r3, r2
 8000a00:	00db      	lsls	r3, r3, #3
 8000a02:	440b      	add	r3, r1
 8000a04:	3304      	adds	r3, #4
 8000a06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a0a:	1ac3      	subs	r3, r0, r3
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	bfb8      	it	lt
 8000a10:	425b      	neglt	r3, r3
 8000a12:	823b      	strh	r3, [r7, #16]

	motor_status[mot_id].enc_pos = new_pos;
 8000a14:	79fa      	ldrb	r2, [r7, #7]
 8000a16:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8000a1a:	4941      	ldr	r1, [pc, #260]	; (8000b20 <motor_pwm+0x180>)
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	4413      	add	r3, r2
 8000a22:	00db      	lsls	r3, r3, #3
 8000a24:	440b      	add	r3, r1
 8000a26:	3304      	adds	r3, #4
 8000a28:	4602      	mov	r2, r0
 8000a2a:	801a      	strh	r2, [r3, #0]
	motor_status[mot_id].enc_change = pos_change;
 8000a2c:	79fa      	ldrb	r2, [r7, #7]
 8000a2e:	493c      	ldr	r1, [pc, #240]	; (8000b20 <motor_pwm+0x180>)
 8000a30:	4613      	mov	r3, r2
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	4413      	add	r3, r2
 8000a36:	00db      	lsls	r3, r3, #3
 8000a38:	440b      	add	r3, r1
 8000a3a:	3306      	adds	r3, #6
 8000a3c:	8a3a      	ldrh	r2, [r7, #16]
 8000a3e:	801a      	strh	r2, [r3, #0]

	uint16_t error = motor_status[mot_id].target_speed - pos_change;
 8000a40:	79fa      	ldrb	r2, [r7, #7]
 8000a42:	4937      	ldr	r1, [pc, #220]	; (8000b20 <motor_pwm+0x180>)
 8000a44:	4613      	mov	r3, r2
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	4413      	add	r3, r2
 8000a4a:	00db      	lsls	r3, r3, #3
 8000a4c:	440b      	add	r3, r1
 8000a4e:	881a      	ldrh	r2, [r3, #0]
 8000a50:	8a3b      	ldrh	r3, [r7, #16]
 8000a52:	1ad3      	subs	r3, r2, r3
 8000a54:	81fb      	strh	r3, [r7, #14]
	motor_status[mot_id].integral += error;
 8000a56:	79fa      	ldrb	r2, [r7, #7]
 8000a58:	4931      	ldr	r1, [pc, #196]	; (8000b20 <motor_pwm+0x180>)
 8000a5a:	4613      	mov	r3, r2
 8000a5c:	005b      	lsls	r3, r3, #1
 8000a5e:	4413      	add	r3, r2
 8000a60:	00db      	lsls	r3, r3, #3
 8000a62:	440b      	add	r3, r1
 8000a64:	3308      	adds	r3, #8
 8000a66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a6a:	b29a      	uxth	r2, r3
 8000a6c:	89fb      	ldrh	r3, [r7, #14]
 8000a6e:	4413      	add	r3, r2
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	79fa      	ldrb	r2, [r7, #7]
 8000a74:	b218      	sxth	r0, r3
 8000a76:	492a      	ldr	r1, [pc, #168]	; (8000b20 <motor_pwm+0x180>)
 8000a78:	4613      	mov	r3, r2
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	4413      	add	r3, r2
 8000a7e:	00db      	lsls	r3, r3, #3
 8000a80:	440b      	add	r3, r1
 8000a82:	3308      	adds	r3, #8
 8000a84:	4602      	mov	r2, r0
 8000a86:	801a      	strh	r2, [r3, #0]
	uint16_t pid_speed = error * 5 + (uint16_t)(motor_status[mot_id].integral * 0.1);
 8000a88:	89fb      	ldrh	r3, [r7, #14]
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	0092      	lsls	r2, r2, #2
 8000a8e:	4413      	add	r3, r2
 8000a90:	b29c      	uxth	r4, r3
 8000a92:	79fa      	ldrb	r2, [r7, #7]
 8000a94:	4922      	ldr	r1, [pc, #136]	; (8000b20 <motor_pwm+0x180>)
 8000a96:	4613      	mov	r3, r2
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	4413      	add	r3, r2
 8000a9c:	00db      	lsls	r3, r3, #3
 8000a9e:	440b      	add	r3, r1
 8000aa0:	3308      	adds	r3, #8
 8000aa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff fe32 	bl	8000710 <__aeabi_i2d>
 8000aac:	a31a      	add	r3, pc, #104	; (adr r3, 8000b18 <motor_pwm+0x178>)
 8000aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ab2:	f7ff fbb1 	bl	8000218 <__aeabi_dmul>
 8000ab6:	4602      	mov	r2, r0
 8000ab8:	460b      	mov	r3, r1
 8000aba:	4610      	mov	r0, r2
 8000abc:	4619      	mov	r1, r3
 8000abe:	f7ff fe91 	bl	80007e4 <__aeabi_d2uiz>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	b29b      	uxth	r3, r3
 8000ac6:	4423      	add	r3, r4
 8000ac8:	81bb      	strh	r3, [r7, #12]
	if (mot_id = 1) {
 8000aca:	2301      	movs	r3, #1
 8000acc:	71fb      	strb	r3, [r7, #7]
		motor_status[0].enc_change = pid_speed;
 8000ace:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000ad2:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <motor_pwm+0x180>)
 8000ad4:	80da      	strh	r2, [r3, #6]
	}

	if (speed > 0) {
 8000ad6:	8a7b      	ldrh	r3, [r7, #18]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d011      	beq.n	8000b00 <motor_pwm+0x160>
		pwm = 4500 + pid_speed * 700; // Effectively linear
 8000adc:	89bb      	ldrh	r3, [r7, #12]
 8000ade:	461a      	mov	r2, r3
 8000ae0:	0092      	lsls	r2, r2, #2
 8000ae2:	4413      	add	r3, r2
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	0091      	lsls	r1, r2, #2
 8000ae8:	461a      	mov	r2, r3
 8000aea:	460b      	mov	r3, r1
 8000aec:	4413      	add	r3, r2
 8000aee:	461a      	mov	r2, r3
 8000af0:	00d2      	lsls	r2, r2, #3
 8000af2:	1ad3      	subs	r3, r2, r3
 8000af4:	009b      	lsls	r3, r3, #2
 8000af6:	b29b      	uxth	r3, r3
 8000af8:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 8000afc:	3314      	adds	r3, #20
 8000afe:	82fb      	strh	r3, [r7, #22]
	}

	if (pwm > 49151) { // emergency limiter, set to 75% currently (49151)
 8000b00:	8afb      	ldrh	r3, [r7, #22]
 8000b02:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8000b06:	d302      	bcc.n	8000b0e <motor_pwm+0x16e>
		pwm = 49151;
 8000b08:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8000b0c:	82fb      	strh	r3, [r7, #22]
	}

	return pwm;
 8000b0e:	8afb      	ldrh	r3, [r7, #22]
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	371c      	adds	r7, #28
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd90      	pop	{r4, r7, pc}
 8000b18:	9999999a 	.word	0x9999999a
 8000b1c:	3fb99999 	.word	0x3fb99999
 8000b20:	200003b4 	.word	0x200003b4
 8000b24:	40000400 	.word	0x40000400
 8000b28:	40012c00 	.word	0x40012c00
 8000b2c:	40000800 	.word	0x40000800

08000b30 <motor_direction>:

// Toggles the direction pin
void motor_direction(uint8_t mot_id) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	71fb      	strb	r3, [r7, #7]
	switch(mot_id) {
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	2b02      	cmp	r3, #2
 8000b3e:	d018      	beq.n	8000b72 <motor_direction+0x42>
 8000b40:	2b02      	cmp	r3, #2
 8000b42:	dc1f      	bgt.n	8000b84 <motor_direction+0x54>
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d002      	beq.n	8000b4e <motor_direction+0x1e>
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d009      	beq.n	8000b60 <motor_direction+0x30>
			break;
		case 2:
			HAL_GPIO_WritePin(GPIOB, M3D_Pin, motor_status[2].direction);
			break;
	}
}
 8000b4c:	e01a      	b.n	8000b84 <motor_direction+0x54>
			HAL_GPIO_WritePin(GPIOA, M1D_Pin, motor_status[0].direction);
 8000b4e:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <motor_direction+0x5c>)
 8000b50:	789b      	ldrb	r3, [r3, #2]
 8000b52:	461a      	mov	r2, r3
 8000b54:	2180      	movs	r1, #128	; 0x80
 8000b56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b5a:	f001 fa05 	bl	8001f68 <HAL_GPIO_WritePin>
			break;
 8000b5e:	e011      	b.n	8000b84 <motor_direction+0x54>
			HAL_GPIO_WritePin(GPIOA, M2D_Pin, motor_status[1].direction);
 8000b60:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <motor_direction+0x5c>)
 8000b62:	7e9b      	ldrb	r3, [r3, #26]
 8000b64:	461a      	mov	r2, r3
 8000b66:	2120      	movs	r1, #32
 8000b68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b6c:	f001 f9fc 	bl	8001f68 <HAL_GPIO_WritePin>
			break;
 8000b70:	e008      	b.n	8000b84 <motor_direction+0x54>
			HAL_GPIO_WritePin(GPIOB, M3D_Pin, motor_status[2].direction);
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <motor_direction+0x5c>)
 8000b74:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000b78:	461a      	mov	r2, r3
 8000b7a:	2110      	movs	r1, #16
 8000b7c:	4804      	ldr	r0, [pc, #16]	; (8000b90 <motor_direction+0x60>)
 8000b7e:	f001 f9f3 	bl	8001f68 <HAL_GPIO_WritePin>
			break;
 8000b82:	bf00      	nop
}
 8000b84:	bf00      	nop
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	200003b4 	.word	0x200003b4
 8000b90:	48000400 	.word	0x48000400

08000b94 <wake_drivers_up>:

// Sends a very short ground pulse to the sleep pin of the motor controllers
void wake_drivers_up() {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, MSLEEP_Pin, GPIO_PIN_SET);
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	2108      	movs	r1, #8
 8000b9e:	4813      	ldr	r0, [pc, #76]	; (8000bec <wake_drivers_up+0x58>)
 8000ba0:	f001 f9e2 	bl	8001f68 <HAL_GPIO_WritePin>
	for(uint16_t i = 0; i < 350; i++) __asm("nop");
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	80fb      	strh	r3, [r7, #6]
 8000ba8:	e003      	b.n	8000bb2 <wake_drivers_up+0x1e>
 8000baa:	bf00      	nop
 8000bac:	88fb      	ldrh	r3, [r7, #6]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	80fb      	strh	r3, [r7, #6]
 8000bb2:	88fb      	ldrh	r3, [r7, #6]
 8000bb4:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8000bb8:	d3f7      	bcc.n	8000baa <wake_drivers_up+0x16>
	HAL_GPIO_WritePin(GPIOB, MSLEEP_Pin, GPIO_PIN_RESET);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2108      	movs	r1, #8
 8000bbe:	480b      	ldr	r0, [pc, #44]	; (8000bec <wake_drivers_up+0x58>)
 8000bc0:	f001 f9d2 	bl	8001f68 <HAL_GPIO_WritePin>
	for(uint16_t i = 0; i < 350; i++) __asm("nop");
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	80bb      	strh	r3, [r7, #4]
 8000bc8:	e003      	b.n	8000bd2 <wake_drivers_up+0x3e>
 8000bca:	bf00      	nop
 8000bcc:	88bb      	ldrh	r3, [r7, #4]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	80bb      	strh	r3, [r7, #4]
 8000bd2:	88bb      	ldrh	r3, [r7, #4]
 8000bd4:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8000bd8:	d3f7      	bcc.n	8000bca <wake_drivers_up+0x36>
	HAL_GPIO_WritePin(GPIOB, MSLEEP_Pin, GPIO_PIN_SET);
 8000bda:	2201      	movs	r2, #1
 8000bdc:	2108      	movs	r1, #8
 8000bde:	4803      	ldr	r0, [pc, #12]	; (8000bec <wake_drivers_up+0x58>)
 8000be0:	f001 f9c2 	bl	8001f68 <HAL_GPIO_WritePin>
}
 8000be4:	bf00      	nop
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	48000400 	.word	0x48000400

08000bf0 <HAL_TIM_PeriodElapsedCallback>:

// 100 Hz callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin); // lights!!!
 8000bf8:	2101      	movs	r1, #1
 8000bfa:	4812      	ldr	r0, [pc, #72]	; (8000c44 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000bfc:	f001 f9cc 	bl	8001f98 <HAL_GPIO_TogglePin>

	TIM8->CCR2 = motor_pwm(0); // Motor 1
 8000c00:	2000      	movs	r0, #0
 8000c02:	f7ff fecd 	bl	80009a0 <motor_pwm>
 8000c06:	4603      	mov	r3, r0
 8000c08:	461a      	mov	r2, r3
 8000c0a:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000c0c:	639a      	str	r2, [r3, #56]	; 0x38
	TIM8->CCR1 = motor_pwm(1); // Motor 2
 8000c0e:	2001      	movs	r0, #1
 8000c10:	f7ff fec6 	bl	80009a0 <motor_pwm>
 8000c14:	4603      	mov	r3, r0
 8000c16:	461a      	mov	r2, r3
 8000c18:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000c1a:	635a      	str	r2, [r3, #52]	; 0x34
	TIM8->CCR3 = motor_pwm(2); // Motor 3
 8000c1c:	2002      	movs	r0, #2
 8000c1e:	f7ff febf 	bl	80009a0 <motor_pwm>
 8000c22:	4603      	mov	r3, r0
 8000c24:	461a      	mov	r2, r3
 8000c26:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000c28:	63da      	str	r2, [r3, #60]	; 0x3c

	motor_direction(0); // Motor 1
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	f7ff ff80 	bl	8000b30 <motor_direction>
	motor_direction(1); // Motor 2
 8000c30:	2001      	movs	r0, #1
 8000c32:	f7ff ff7d 	bl	8000b30 <motor_direction>
	motor_direction(2); // Motor 3
 8000c36:	2002      	movs	r0, #2
 8000c38:	f7ff ff7a 	bl	8000b30 <motor_direction>
}
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	48001400 	.word	0x48001400
 8000c48:	40013400 	.word	0x40013400

08000c4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c52:	f000 fe64 	bl	800191e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c56:	f000 f85d 	bl	8000d14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c5a:	f000 fb7d 	bl	8001358 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000c5e:	f000 f901 	bl	8000e64 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c62:	f000 f959 	bl	8000f18 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000c66:	f000 f8a3 	bl	8000db0 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000c6a:	f000 f9ab 	bl	8000fc4 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000c6e:	f000 fa35 	bl	80010dc <MX_TIM8_Init>
  MX_TIM15_Init();
 8000c72:	f000 fadf 	bl	8001234 <MX_TIM15_Init>
  MX_TIM6_Init();
 8000c76:	f000 f9fb 	bl	8001070 <MX_TIM6_Init>
  MX_USB_Device_Init();
 8000c7a:	f009 f979 	bl	8009f70 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  Feedback feedback = {
 8000c7e:	2300      	movs	r3, #0
 8000c80:	803b      	strh	r3, [r7, #0]
 8000c82:	2300      	movs	r3, #0
 8000c84:	807b      	strh	r3, [r7, #2]
 8000c86:	2300      	movs	r3, #0
 8000c88:	80bb      	strh	r3, [r7, #4]
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	80fb      	strh	r3, [r7, #6]
 8000c8e:	2300      	movs	r3, #0
 8000c90:	813b      	strh	r3, [r7, #8]
 8000c92:	2300      	movs	r3, #0
 8000c94:	817b      	strh	r3, [r7, #10]
 8000c96:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 8000c9a:	81bb      	strh	r3, [r7, #12]
		.change[0] = 0,
		.change[1] = 0,
		.change[2] = 0,
        .delimiter = 0xAAAA
  };
  HAL_TIM_Base_Start_IT(&htim6);
 8000c9c:	481a      	ldr	r0, [pc, #104]	; (8000d08 <main+0xbc>)
 8000c9e:	f003 feb1 	bl	8004a04 <HAL_TIM_Base_Start_IT>
  HAL_Delay(100);
 8000ca2:	2064      	movs	r0, #100	; 0x64
 8000ca4:	f000 feac 	bl	8001a00 <HAL_Delay>
  enc_init();
 8000ca8:	f7ff fddc 	bl	8000864 <enc_init>
  pwm_init();
 8000cac:	f7ff fdf0 	bl	8000890 <pwm_init>
  wake_drivers_up();
 8000cb0:	f7ff ff70 	bl	8000b94 <wake_drivers_up>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (isCommandReceived) {
 8000cb4:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <main+0xc0>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d0fa      	beq.n	8000cb4 <main+0x68>
    	isCommandReceived = 0;
 8000cbe:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <main+0xc0>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	701a      	strb	r2, [r3, #0]

    	wake_drivers_up();
 8000cc4:	f7ff ff66 	bl	8000b94 <wake_drivers_up>
    	motor_status_update();
 8000cc8:	f7ff fe00 	bl	80008cc <motor_status_update>

		feedback.speed[0] = motor_status[0].target_speed; // In the current state it retuns the uint8 version without direction, whoops!
 8000ccc:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <main+0xc4>)
 8000cce:	881b      	ldrh	r3, [r3, #0]
 8000cd0:	b21b      	sxth	r3, r3
 8000cd2:	803b      	strh	r3, [r7, #0]
		feedback.speed[1] = motor_status[1].target_speed;
 8000cd4:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <main+0xc4>)
 8000cd6:	8b1b      	ldrh	r3, [r3, #24]
 8000cd8:	b21b      	sxth	r3, r3
 8000cda:	807b      	strh	r3, [r7, #2]
		feedback.speed[2] = motor_status[2].target_speed;
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <main+0xc4>)
 8000cde:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000ce0:	b21b      	sxth	r3, r3
 8000ce2:	80bb      	strh	r3, [r7, #4]

		feedback.change[0] = motor_status[0].enc_change;
 8000ce4:	4b0a      	ldr	r3, [pc, #40]	; (8000d10 <main+0xc4>)
 8000ce6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000cea:	80fb      	strh	r3, [r7, #6]
		feedback.change[1] = motor_status[1].enc_change;
 8000cec:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <main+0xc4>)
 8000cee:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8000cf2:	813b      	strh	r3, [r7, #8]
		feedback.change[2] = motor_status[2].enc_change;
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <main+0xc4>)
 8000cf6:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8000cfa:	817b      	strh	r3, [r7, #10]

		CDC_Transmit_FS(&feedback, sizeof(feedback));
 8000cfc:	463b      	mov	r3, r7
 8000cfe:	210e      	movs	r1, #14
 8000d00:	4618      	mov	r0, r3
 8000d02:	f009 f9f7 	bl	800a0f4 <CDC_Transmit_FS>
    if (isCommandReceived) {
 8000d06:	e7d5      	b.n	8000cb4 <main+0x68>
 8000d08:	200002d0 	.word	0x200002d0
 8000d0c:	20000406 	.word	0x20000406
 8000d10:	200003b4 	.word	0x200003b4

08000d14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b094      	sub	sp, #80	; 0x50
 8000d18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d1a:	f107 0318 	add.w	r3, r7, #24
 8000d1e:	2238      	movs	r2, #56	; 0x38
 8000d20:	2100      	movs	r1, #0
 8000d22:	4618      	mov	r0, r3
 8000d24:	f009 fe66 	bl	800a9f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d28:	1d3b      	adds	r3, r7, #4
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]
 8000d30:	609a      	str	r2, [r3, #8]
 8000d32:	60da      	str	r2, [r3, #12]
 8000d34:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000d36:	2000      	movs	r0, #0
 8000d38:	f002 fe7c 	bl	8003a34 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000d3c:	2322      	movs	r3, #34	; 0x22
 8000d3e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d46:	2340      	movs	r3, #64	; 0x40
 8000d48:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d52:	2302      	movs	r3, #2
 8000d54:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000d56:	2301      	movs	r3, #1
 8000d58:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000d5a:	2314      	movs	r3, #20
 8000d5c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d62:	2302      	movs	r3, #2
 8000d64:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d66:	2302      	movs	r3, #2
 8000d68:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d6a:	f107 0318 	add.w	r3, r7, #24
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f002 ff04 	bl	8003b7c <HAL_RCC_OscConfig>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000d7a:	f000 fb6d 	bl	8001458 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d7e:	230f      	movs	r3, #15
 8000d80:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d82:	2303      	movs	r3, #3
 8000d84:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d86:	2300      	movs	r3, #0
 8000d88:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d92:	1d3b      	adds	r3, r7, #4
 8000d94:	2104      	movs	r1, #4
 8000d96:	4618      	mov	r0, r3
 8000d98:	f003 fa08 	bl	80041ac <HAL_RCC_ClockConfig>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000da2:	f000 fb59 	bl	8001458 <Error_Handler>
  }
}
 8000da6:	bf00      	nop
 8000da8:	3750      	adds	r7, #80	; 0x50
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
	...

08000db0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08c      	sub	sp, #48	; 0x30
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000db6:	f107 030c 	add.w	r3, r7, #12
 8000dba:	2224      	movs	r2, #36	; 0x24
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f009 fe18 	bl	800a9f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dc4:	463b      	mov	r3, r7
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	605a      	str	r2, [r3, #4]
 8000dcc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000dce:	4b23      	ldr	r3, [pc, #140]	; (8000e5c <MX_TIM1_Init+0xac>)
 8000dd0:	4a23      	ldr	r2, [pc, #140]	; (8000e60 <MX_TIM1_Init+0xb0>)
 8000dd2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000dd4:	4b21      	ldr	r3, [pc, #132]	; (8000e5c <MX_TIM1_Init+0xac>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dda:	4b20      	ldr	r3, [pc, #128]	; (8000e5c <MX_TIM1_Init+0xac>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000de0:	4b1e      	ldr	r3, [pc, #120]	; (8000e5c <MX_TIM1_Init+0xac>)
 8000de2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000de6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000de8:	4b1c      	ldr	r3, [pc, #112]	; (8000e5c <MX_TIM1_Init+0xac>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000dee:	4b1b      	ldr	r3, [pc, #108]	; (8000e5c <MX_TIM1_Init+0xac>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df4:	4b19      	ldr	r3, [pc, #100]	; (8000e5c <MX_TIM1_Init+0xac>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e02:	2301      	movs	r3, #1
 8000e04:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e12:	2301      	movs	r3, #1
 8000e14:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e16:	2300      	movs	r3, #0
 8000e18:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000e1e:	f107 030c 	add.w	r3, r7, #12
 8000e22:	4619      	mov	r1, r3
 8000e24:	480d      	ldr	r0, [pc, #52]	; (8000e5c <MX_TIM1_Init+0xac>)
 8000e26:	f003 ffaf 	bl	8004d88 <HAL_TIM_Encoder_Init>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000e30:	f000 fb12 	bl	8001458 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e34:	2300      	movs	r3, #0
 8000e36:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e40:	463b      	mov	r3, r7
 8000e42:	4619      	mov	r1, r3
 8000e44:	4805      	ldr	r0, [pc, #20]	; (8000e5c <MX_TIM1_Init+0xac>)
 8000e46:	f004 ffef 	bl	8005e28 <HAL_TIMEx_MasterConfigSynchronization>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000e50:	f000 fb02 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e54:	bf00      	nop
 8000e56:	3730      	adds	r7, #48	; 0x30
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	200001a0 	.word	0x200001a0
 8000e60:	40012c00 	.word	0x40012c00

08000e64 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08a      	sub	sp, #40	; 0x28
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e6a:	f107 031c 	add.w	r3, r7, #28
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e76:	463b      	mov	r3, r7
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
 8000e84:	615a      	str	r2, [r3, #20]
 8000e86:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e88:	4b22      	ldr	r3, [pc, #136]	; (8000f14 <MX_TIM2_Init+0xb0>)
 8000e8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e8e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e90:	4b20      	ldr	r3, [pc, #128]	; (8000f14 <MX_TIM2_Init+0xb0>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e96:	4b1f      	ldr	r3, [pc, #124]	; (8000f14 <MX_TIM2_Init+0xb0>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8000e9c:	4b1d      	ldr	r3, [pc, #116]	; (8000f14 <MX_TIM2_Init+0xb0>)
 8000e9e:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea4:	4b1b      	ldr	r3, [pc, #108]	; (8000f14 <MX_TIM2_Init+0xb0>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eaa:	4b1a      	ldr	r3, [pc, #104]	; (8000f14 <MX_TIM2_Init+0xb0>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000eb0:	4818      	ldr	r0, [pc, #96]	; (8000f14 <MX_TIM2_Init+0xb0>)
 8000eb2:	f003 fe11 	bl	8004ad8 <HAL_TIM_PWM_Init>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000ebc:	f000 facc 	bl	8001458 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ec8:	f107 031c 	add.w	r3, r7, #28
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4811      	ldr	r0, [pc, #68]	; (8000f14 <MX_TIM2_Init+0xb0>)
 8000ed0:	f004 ffaa 	bl	8005e28 <HAL_TIMEx_MasterConfigSynchronization>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000eda:	f000 fabd 	bl	8001458 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ede:	2360      	movs	r3, #96	; 0x60
 8000ee0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eea:	2300      	movs	r3, #0
 8000eec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eee:	463b      	mov	r3, r7
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4807      	ldr	r0, [pc, #28]	; (8000f14 <MX_TIM2_Init+0xb0>)
 8000ef6:	f004 f9fb 	bl	80052f0 <HAL_TIM_PWM_ConfigChannel>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000f00:	f000 faaa 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f04:	4803      	ldr	r0, [pc, #12]	; (8000f14 <MX_TIM2_Init+0xb0>)
 8000f06:	f000 fbe3 	bl	80016d0 <HAL_TIM_MspPostInit>

}
 8000f0a:	bf00      	nop
 8000f0c:	3728      	adds	r7, #40	; 0x28
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	200001ec 	.word	0x200001ec

08000f18 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08c      	sub	sp, #48	; 0x30
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f1e:	f107 030c 	add.w	r3, r7, #12
 8000f22:	2224      	movs	r2, #36	; 0x24
 8000f24:	2100      	movs	r1, #0
 8000f26:	4618      	mov	r0, r3
 8000f28:	f009 fd64 	bl	800a9f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f2c:	463b      	mov	r3, r7
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f36:	4b21      	ldr	r3, [pc, #132]	; (8000fbc <MX_TIM3_Init+0xa4>)
 8000f38:	4a21      	ldr	r2, [pc, #132]	; (8000fc0 <MX_TIM3_Init+0xa8>)
 8000f3a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f3c:	4b1f      	ldr	r3, [pc, #124]	; (8000fbc <MX_TIM3_Init+0xa4>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f42:	4b1e      	ldr	r3, [pc, #120]	; (8000fbc <MX_TIM3_Init+0xa4>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000f48:	4b1c      	ldr	r3, [pc, #112]	; (8000fbc <MX_TIM3_Init+0xa4>)
 8000f4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f4e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f50:	4b1a      	ldr	r3, [pc, #104]	; (8000fbc <MX_TIM3_Init+0xa4>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f56:	4b19      	ldr	r3, [pc, #100]	; (8000fbc <MX_TIM3_Init+0xa4>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f60:	2300      	movs	r3, #0
 8000f62:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f64:	2301      	movs	r3, #1
 8000f66:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f70:	2300      	movs	r3, #0
 8000f72:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f74:	2301      	movs	r3, #1
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000f80:	f107 030c 	add.w	r3, r7, #12
 8000f84:	4619      	mov	r1, r3
 8000f86:	480d      	ldr	r0, [pc, #52]	; (8000fbc <MX_TIM3_Init+0xa4>)
 8000f88:	f003 fefe 	bl	8004d88 <HAL_TIM_Encoder_Init>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000f92:	f000 fa61 	bl	8001458 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f96:	2300      	movs	r3, #0
 8000f98:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f9e:	463b      	mov	r3, r7
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4806      	ldr	r0, [pc, #24]	; (8000fbc <MX_TIM3_Init+0xa4>)
 8000fa4:	f004 ff40 	bl	8005e28 <HAL_TIMEx_MasterConfigSynchronization>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000fae:	f000 fa53 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000fb2:	bf00      	nop
 8000fb4:	3730      	adds	r7, #48	; 0x30
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000238 	.word	0x20000238
 8000fc0:	40000400 	.word	0x40000400

08000fc4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08c      	sub	sp, #48	; 0x30
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000fca:	f107 030c 	add.w	r3, r7, #12
 8000fce:	2224      	movs	r2, #36	; 0x24
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f009 fd0e 	bl	800a9f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd8:	463b      	mov	r3, r7
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000fe2:	4b21      	ldr	r3, [pc, #132]	; (8001068 <MX_TIM4_Init+0xa4>)
 8000fe4:	4a21      	ldr	r2, [pc, #132]	; (800106c <MX_TIM4_Init+0xa8>)
 8000fe6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000fe8:	4b1f      	ldr	r3, [pc, #124]	; (8001068 <MX_TIM4_Init+0xa4>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fee:	4b1e      	ldr	r3, [pc, #120]	; (8001068 <MX_TIM4_Init+0xa4>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000ff4:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <MX_TIM4_Init+0xa4>)
 8000ff6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ffa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ffc:	4b1a      	ldr	r3, [pc, #104]	; (8001068 <MX_TIM4_Init+0xa4>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001002:	4b19      	ldr	r3, [pc, #100]	; (8001068 <MX_TIM4_Init+0xa4>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001008:	2301      	movs	r3, #1
 800100a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800100c:	2300      	movs	r3, #0
 800100e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001010:	2301      	movs	r3, #1
 8001012:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001014:	2300      	movs	r3, #0
 8001016:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800101c:	2300      	movs	r3, #0
 800101e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001020:	2301      	movs	r3, #1
 8001022:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001024:	2300      	movs	r3, #0
 8001026:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800102c:	f107 030c 	add.w	r3, r7, #12
 8001030:	4619      	mov	r1, r3
 8001032:	480d      	ldr	r0, [pc, #52]	; (8001068 <MX_TIM4_Init+0xa4>)
 8001034:	f003 fea8 	bl	8004d88 <HAL_TIM_Encoder_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800103e:	f000 fa0b 	bl	8001458 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001042:	2300      	movs	r3, #0
 8001044:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001046:	2300      	movs	r3, #0
 8001048:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800104a:	463b      	mov	r3, r7
 800104c:	4619      	mov	r1, r3
 800104e:	4806      	ldr	r0, [pc, #24]	; (8001068 <MX_TIM4_Init+0xa4>)
 8001050:	f004 feea 	bl	8005e28 <HAL_TIMEx_MasterConfigSynchronization>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800105a:	f000 f9fd 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800105e:	bf00      	nop
 8001060:	3730      	adds	r7, #48	; 0x30
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000284 	.word	0x20000284
 800106c:	40000800 	.word	0x40000800

08001070 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001076:	1d3b      	adds	r3, r7, #4
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001080:	4b14      	ldr	r3, [pc, #80]	; (80010d4 <MX_TIM6_Init+0x64>)
 8001082:	4a15      	ldr	r2, [pc, #84]	; (80010d8 <MX_TIM6_Init+0x68>)
 8001084:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 23;
 8001086:	4b13      	ldr	r3, [pc, #76]	; (80010d4 <MX_TIM6_Init+0x64>)
 8001088:	2217      	movs	r2, #23
 800108a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800108c:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <MX_TIM6_Init+0x64>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001092:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <MX_TIM6_Init+0x64>)
 8001094:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001098:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800109a:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <MX_TIM6_Init+0x64>)
 800109c:	2200      	movs	r2, #0
 800109e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80010a0:	480c      	ldr	r0, [pc, #48]	; (80010d4 <MX_TIM6_Init+0x64>)
 80010a2:	f003 fc57 	bl	8004954 <HAL_TIM_Base_Init>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80010ac:	f000 f9d4 	bl	8001458 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010b0:	2300      	movs	r3, #0
 80010b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010b4:	2300      	movs	r3, #0
 80010b6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80010b8:	1d3b      	adds	r3, r7, #4
 80010ba:	4619      	mov	r1, r3
 80010bc:	4805      	ldr	r0, [pc, #20]	; (80010d4 <MX_TIM6_Init+0x64>)
 80010be:	f004 feb3 	bl	8005e28 <HAL_TIMEx_MasterConfigSynchronization>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80010c8:	f000 f9c6 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80010cc:	bf00      	nop
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	200002d0 	.word	0x200002d0
 80010d8:	40001000 	.word	0x40001000

080010dc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b098      	sub	sp, #96	; 0x60
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010e2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
 80010fa:	60da      	str	r2, [r3, #12]
 80010fc:	611a      	str	r2, [r3, #16]
 80010fe:	615a      	str	r2, [r3, #20]
 8001100:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	2234      	movs	r2, #52	; 0x34
 8001106:	2100      	movs	r1, #0
 8001108:	4618      	mov	r0, r3
 800110a:	f009 fc73 	bl	800a9f4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800110e:	4b47      	ldr	r3, [pc, #284]	; (800122c <MX_TIM8_Init+0x150>)
 8001110:	4a47      	ldr	r2, [pc, #284]	; (8001230 <MX_TIM8_Init+0x154>)
 8001112:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001114:	4b45      	ldr	r3, [pc, #276]	; (800122c <MX_TIM8_Init+0x150>)
 8001116:	2200      	movs	r2, #0
 8001118:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800111a:	4b44      	ldr	r3, [pc, #272]	; (800122c <MX_TIM8_Init+0x150>)
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001120:	4b42      	ldr	r3, [pc, #264]	; (800122c <MX_TIM8_Init+0x150>)
 8001122:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001126:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001128:	4b40      	ldr	r3, [pc, #256]	; (800122c <MX_TIM8_Init+0x150>)
 800112a:	2200      	movs	r2, #0
 800112c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800112e:	4b3f      	ldr	r3, [pc, #252]	; (800122c <MX_TIM8_Init+0x150>)
 8001130:	2200      	movs	r2, #0
 8001132:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001134:	4b3d      	ldr	r3, [pc, #244]	; (800122c <MX_TIM8_Init+0x150>)
 8001136:	2200      	movs	r2, #0
 8001138:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800113a:	483c      	ldr	r0, [pc, #240]	; (800122c <MX_TIM8_Init+0x150>)
 800113c:	f003 fccc 	bl	8004ad8 <HAL_TIM_PWM_Init>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8001146:	f000 f987 	bl	8001458 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800114a:	2300      	movs	r3, #0
 800114c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800114e:	2300      	movs	r3, #0
 8001150:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001152:	2300      	movs	r3, #0
 8001154:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001156:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800115a:	4619      	mov	r1, r3
 800115c:	4833      	ldr	r0, [pc, #204]	; (800122c <MX_TIM8_Init+0x150>)
 800115e:	f004 fe63 	bl	8005e28 <HAL_TIMEx_MasterConfigSynchronization>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001168:	f000 f976 	bl	8001458 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800116c:	2360      	movs	r3, #96	; 0x60
 800116e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001170:	2300      	movs	r3, #0
 8001172:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001174:	2300      	movs	r3, #0
 8001176:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001178:	2300      	movs	r3, #0
 800117a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800117c:	2300      	movs	r3, #0
 800117e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001180:	2300      	movs	r3, #0
 8001182:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001184:	2300      	movs	r3, #0
 8001186:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001188:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800118c:	2200      	movs	r2, #0
 800118e:	4619      	mov	r1, r3
 8001190:	4826      	ldr	r0, [pc, #152]	; (800122c <MX_TIM8_Init+0x150>)
 8001192:	f004 f8ad 	bl	80052f0 <HAL_TIM_PWM_ConfigChannel>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 800119c:	f000 f95c 	bl	8001458 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011a0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011a4:	2204      	movs	r2, #4
 80011a6:	4619      	mov	r1, r3
 80011a8:	4820      	ldr	r0, [pc, #128]	; (800122c <MX_TIM8_Init+0x150>)
 80011aa:	f004 f8a1 	bl	80052f0 <HAL_TIM_PWM_ConfigChannel>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 80011b4:	f000 f950 	bl	8001458 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011b8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011bc:	2208      	movs	r2, #8
 80011be:	4619      	mov	r1, r3
 80011c0:	481a      	ldr	r0, [pc, #104]	; (800122c <MX_TIM8_Init+0x150>)
 80011c2:	f004 f895 	bl	80052f0 <HAL_TIM_PWM_ConfigChannel>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_TIM8_Init+0xf4>
  {
    Error_Handler();
 80011cc:	f000 f944 	bl	8001458 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011d0:	2300      	movs	r3, #0
 80011d2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011d8:	2300      	movs	r3, #0
 80011da:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011e8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80011ee:	2300      	movs	r3, #0
 80011f0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80011f2:	2300      	movs	r3, #0
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80011f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011fa:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001200:	2300      	movs	r3, #0
 8001202:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001204:	2300      	movs	r3, #0
 8001206:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001208:	1d3b      	adds	r3, r7, #4
 800120a:	4619      	mov	r1, r3
 800120c:	4807      	ldr	r0, [pc, #28]	; (800122c <MX_TIM8_Init+0x150>)
 800120e:	f004 fe8d 	bl	8005f2c <HAL_TIMEx_ConfigBreakDeadTime>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8001218:	f000 f91e 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800121c:	4803      	ldr	r0, [pc, #12]	; (800122c <MX_TIM8_Init+0x150>)
 800121e:	f000 fa57 	bl	80016d0 <HAL_TIM_MspPostInit>

}
 8001222:	bf00      	nop
 8001224:	3760      	adds	r7, #96	; 0x60
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	2000031c 	.word	0x2000031c
 8001230:	40013400 	.word	0x40013400

08001234 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b098      	sub	sp, #96	; 0x60
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800123a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]
 8001244:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001246:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	60da      	str	r2, [r3, #12]
 8001254:	611a      	str	r2, [r3, #16]
 8001256:	615a      	str	r2, [r3, #20]
 8001258:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	2234      	movs	r2, #52	; 0x34
 800125e:	2100      	movs	r1, #0
 8001260:	4618      	mov	r0, r3
 8001262:	f009 fbc7 	bl	800a9f4 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001266:	4b3a      	ldr	r3, [pc, #232]	; (8001350 <MX_TIM15_Init+0x11c>)
 8001268:	4a3a      	ldr	r2, [pc, #232]	; (8001354 <MX_TIM15_Init+0x120>)
 800126a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800126c:	4b38      	ldr	r3, [pc, #224]	; (8001350 <MX_TIM15_Init+0x11c>)
 800126e:	2200      	movs	r2, #0
 8001270:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001272:	4b37      	ldr	r3, [pc, #220]	; (8001350 <MX_TIM15_Init+0x11c>)
 8001274:	2200      	movs	r2, #0
 8001276:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001278:	4b35      	ldr	r3, [pc, #212]	; (8001350 <MX_TIM15_Init+0x11c>)
 800127a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800127e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001280:	4b33      	ldr	r3, [pc, #204]	; (8001350 <MX_TIM15_Init+0x11c>)
 8001282:	2200      	movs	r2, #0
 8001284:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001286:	4b32      	ldr	r3, [pc, #200]	; (8001350 <MX_TIM15_Init+0x11c>)
 8001288:	2200      	movs	r2, #0
 800128a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800128c:	4b30      	ldr	r3, [pc, #192]	; (8001350 <MX_TIM15_Init+0x11c>)
 800128e:	2200      	movs	r2, #0
 8001290:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001292:	482f      	ldr	r0, [pc, #188]	; (8001350 <MX_TIM15_Init+0x11c>)
 8001294:	f003 fc20 	bl	8004ad8 <HAL_TIM_PWM_Init>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 800129e:	f000 f8db 	bl	8001458 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a2:	2300      	movs	r3, #0
 80012a4:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a6:	2300      	movs	r3, #0
 80012a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80012aa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012ae:	4619      	mov	r1, r3
 80012b0:	4827      	ldr	r0, [pc, #156]	; (8001350 <MX_TIM15_Init+0x11c>)
 80012b2:	f004 fdb9 	bl	8005e28 <HAL_TIMEx_MasterConfigSynchronization>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 80012bc:	f000 f8cc 	bl	8001458 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012c0:	2360      	movs	r3, #96	; 0x60
 80012c2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012c8:	2300      	movs	r3, #0
 80012ca:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012cc:	2300      	movs	r3, #0
 80012ce:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012d0:	2300      	movs	r3, #0
 80012d2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012d4:	2300      	movs	r3, #0
 80012d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012d8:	2300      	movs	r3, #0
 80012da:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012e0:	2200      	movs	r2, #0
 80012e2:	4619      	mov	r1, r3
 80012e4:	481a      	ldr	r0, [pc, #104]	; (8001350 <MX_TIM15_Init+0x11c>)
 80012e6:	f004 f803 	bl	80052f0 <HAL_TIM_PWM_ConfigChannel>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 80012f0:	f000 f8b2 	bl	8001458 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012f4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012f8:	2204      	movs	r2, #4
 80012fa:	4619      	mov	r1, r3
 80012fc:	4814      	ldr	r0, [pc, #80]	; (8001350 <MX_TIM15_Init+0x11c>)
 80012fe:	f003 fff7 	bl	80052f0 <HAL_TIM_PWM_ConfigChannel>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8001308:	f000 f8a6 	bl	8001458 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800130c:	2300      	movs	r3, #0
 800130e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001310:	2300      	movs	r3, #0
 8001312:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001314:	2300      	movs	r3, #0
 8001316:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001320:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001324:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800132a:	2300      	movs	r3, #0
 800132c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	4619      	mov	r1, r3
 8001332:	4807      	ldr	r0, [pc, #28]	; (8001350 <MX_TIM15_Init+0x11c>)
 8001334:	f004 fdfa 	bl	8005f2c <HAL_TIMEx_ConfigBreakDeadTime>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 800133e:	f000 f88b 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001342:	4803      	ldr	r0, [pc, #12]	; (8001350 <MX_TIM15_Init+0x11c>)
 8001344:	f000 f9c4 	bl	80016d0 <HAL_TIM_MspPostInit>

}
 8001348:	bf00      	nop
 800134a:	3760      	adds	r7, #96	; 0x60
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000368 	.word	0x20000368
 8001354:	40014000 	.word	0x40014000

08001358 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b088      	sub	sp, #32
 800135c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135e:	f107 030c 	add.w	r3, r7, #12
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]
 800136c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800136e:	4b37      	ldr	r3, [pc, #220]	; (800144c <MX_GPIO_Init+0xf4>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001372:	4a36      	ldr	r2, [pc, #216]	; (800144c <MX_GPIO_Init+0xf4>)
 8001374:	f043 0320 	orr.w	r3, r3, #32
 8001378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800137a:	4b34      	ldr	r3, [pc, #208]	; (800144c <MX_GPIO_Init+0xf4>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137e:	f003 0320 	and.w	r3, r3, #32
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001386:	4b31      	ldr	r3, [pc, #196]	; (800144c <MX_GPIO_Init+0xf4>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138a:	4a30      	ldr	r2, [pc, #192]	; (800144c <MX_GPIO_Init+0xf4>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001392:	4b2e      	ldr	r3, [pc, #184]	; (800144c <MX_GPIO_Init+0xf4>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800139e:	4b2b      	ldr	r3, [pc, #172]	; (800144c <MX_GPIO_Init+0xf4>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a2:	4a2a      	ldr	r2, [pc, #168]	; (800144c <MX_GPIO_Init+0xf4>)
 80013a4:	f043 0302 	orr.w	r3, r3, #2
 80013a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013aa:	4b28      	ldr	r3, [pc, #160]	; (800144c <MX_GPIO_Init+0xf4>)
 80013ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	603b      	str	r3, [r7, #0]
 80013b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80013b6:	2200      	movs	r2, #0
 80013b8:	2101      	movs	r1, #1
 80013ba:	4825      	ldr	r0, [pc, #148]	; (8001450 <MX_GPIO_Init+0xf8>)
 80013bc:	f000 fdd4 	bl	8001f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED2_Pin|M2D_Pin|M1D_Pin, GPIO_PIN_RESET);
 80013c0:	2200      	movs	r2, #0
 80013c2:	21a2      	movs	r1, #162	; 0xa2
 80013c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c8:	f000 fdce 	bl	8001f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MSLEEP_Pin|M3D_Pin, GPIO_PIN_RESET);
 80013cc:	2200      	movs	r2, #0
 80013ce:	2118      	movs	r1, #24
 80013d0:	4820      	ldr	r0, [pc, #128]	; (8001454 <MX_GPIO_Init+0xfc>)
 80013d2:	f000 fdc9 	bl	8001f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80013d6:	2301      	movs	r3, #1
 80013d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013da:	2301      	movs	r3, #1
 80013dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80013e6:	f107 030c 	add.w	r3, r7, #12
 80013ea:	4619      	mov	r1, r3
 80013ec:	4818      	ldr	r0, [pc, #96]	; (8001450 <MX_GPIO_Init+0xf8>)
 80013ee:	f000 fc39 	bl	8001c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : INFR_Pin */
  GPIO_InitStruct.Pin = INFR_Pin;
 80013f2:	2302      	movs	r3, #2
 80013f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f6:	2300      	movs	r3, #0
 80013f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INFR_GPIO_Port, &GPIO_InitStruct);
 80013fe:	f107 030c 	add.w	r3, r7, #12
 8001402:	4619      	mov	r1, r3
 8001404:	4812      	ldr	r0, [pc, #72]	; (8001450 <MX_GPIO_Init+0xf8>)
 8001406:	f000 fc2d 	bl	8001c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin M2D_Pin M1D_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|M2D_Pin|M1D_Pin;
 800140a:	23a2      	movs	r3, #162	; 0xa2
 800140c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140e:	2301      	movs	r3, #1
 8001410:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001416:	2300      	movs	r3, #0
 8001418:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141a:	f107 030c 	add.w	r3, r7, #12
 800141e:	4619      	mov	r1, r3
 8001420:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001424:	f000 fc1e 	bl	8001c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : MSLEEP_Pin M3D_Pin */
  GPIO_InitStruct.Pin = MSLEEP_Pin|M3D_Pin;
 8001428:	2318      	movs	r3, #24
 800142a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142c:	2301      	movs	r3, #1
 800142e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001434:	2300      	movs	r3, #0
 8001436:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001438:	f107 030c 	add.w	r3, r7, #12
 800143c:	4619      	mov	r1, r3
 800143e:	4805      	ldr	r0, [pc, #20]	; (8001454 <MX_GPIO_Init+0xfc>)
 8001440:	f000 fc10 	bl	8001c64 <HAL_GPIO_Init>

}
 8001444:	bf00      	nop
 8001446:	3720      	adds	r7, #32
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40021000 	.word	0x40021000
 8001450:	48001400 	.word	0x48001400
 8001454:	48000400 	.word	0x48000400

08001458 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800145c:	b672      	cpsid	i
}
 800145e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001460:	e7fe      	b.n	8001460 <Error_Handler+0x8>
	...

08001464 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146a:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <HAL_MspInit+0x44>)
 800146c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800146e:	4a0e      	ldr	r2, [pc, #56]	; (80014a8 <HAL_MspInit+0x44>)
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	6613      	str	r3, [r2, #96]	; 0x60
 8001476:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <HAL_MspInit+0x44>)
 8001478:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	607b      	str	r3, [r7, #4]
 8001480:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001482:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <HAL_MspInit+0x44>)
 8001484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001486:	4a08      	ldr	r2, [pc, #32]	; (80014a8 <HAL_MspInit+0x44>)
 8001488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800148c:	6593      	str	r3, [r2, #88]	; 0x58
 800148e:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <HAL_MspInit+0x44>)
 8001490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001496:	603b      	str	r3, [r7, #0]
 8001498:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	40021000 	.word	0x40021000

080014ac <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08e      	sub	sp, #56	; 0x38
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a46      	ldr	r2, [pc, #280]	; (80015e4 <HAL_TIM_Encoder_MspInit+0x138>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d12a      	bne.n	8001524 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014ce:	4b46      	ldr	r3, [pc, #280]	; (80015e8 <HAL_TIM_Encoder_MspInit+0x13c>)
 80014d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014d2:	4a45      	ldr	r2, [pc, #276]	; (80015e8 <HAL_TIM_Encoder_MspInit+0x13c>)
 80014d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014d8:	6613      	str	r3, [r2, #96]	; 0x60
 80014da:	4b43      	ldr	r3, [pc, #268]	; (80015e8 <HAL_TIM_Encoder_MspInit+0x13c>)
 80014dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014e2:	623b      	str	r3, [r7, #32]
 80014e4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e6:	4b40      	ldr	r3, [pc, #256]	; (80015e8 <HAL_TIM_Encoder_MspInit+0x13c>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ea:	4a3f      	ldr	r2, [pc, #252]	; (80015e8 <HAL_TIM_Encoder_MspInit+0x13c>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014f2:	4b3d      	ldr	r3, [pc, #244]	; (80015e8 <HAL_TIM_Encoder_MspInit+0x13c>)
 80014f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	61fb      	str	r3, [r7, #28]
 80014fc:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC21_Pin|ENC22_Pin;
 80014fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001502:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001504:	2302      	movs	r3, #2
 8001506:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150c:	2300      	movs	r3, #0
 800150e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001510:	2306      	movs	r3, #6
 8001512:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001518:	4619      	mov	r1, r3
 800151a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800151e:	f000 fba1 	bl	8001c64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001522:	e05b      	b.n	80015dc <HAL_TIM_Encoder_MspInit+0x130>
  else if(htim_encoder->Instance==TIM3)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a30      	ldr	r2, [pc, #192]	; (80015ec <HAL_TIM_Encoder_MspInit+0x140>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d129      	bne.n	8001582 <HAL_TIM_Encoder_MspInit+0xd6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800152e:	4b2e      	ldr	r3, [pc, #184]	; (80015e8 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001532:	4a2d      	ldr	r2, [pc, #180]	; (80015e8 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001534:	f043 0302 	orr.w	r3, r3, #2
 8001538:	6593      	str	r3, [r2, #88]	; 0x58
 800153a:	4b2b      	ldr	r3, [pc, #172]	; (80015e8 <HAL_TIM_Encoder_MspInit+0x13c>)
 800153c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	61bb      	str	r3, [r7, #24]
 8001544:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001546:	4b28      	ldr	r3, [pc, #160]	; (80015e8 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154a:	4a27      	ldr	r2, [pc, #156]	; (80015e8 <HAL_TIM_Encoder_MspInit+0x13c>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001552:	4b25      	ldr	r3, [pc, #148]	; (80015e8 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	617b      	str	r3, [r7, #20]
 800155c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ENC31_Pin|ENC32_Pin;
 800155e:	2350      	movs	r3, #80	; 0x50
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001562:	2302      	movs	r3, #2
 8001564:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156a:	2300      	movs	r3, #0
 800156c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800156e:	2302      	movs	r3, #2
 8001570:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001572:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001576:	4619      	mov	r1, r3
 8001578:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800157c:	f000 fb72 	bl	8001c64 <HAL_GPIO_Init>
}
 8001580:	e02c      	b.n	80015dc <HAL_TIM_Encoder_MspInit+0x130>
  else if(htim_encoder->Instance==TIM4)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a1a      	ldr	r2, [pc, #104]	; (80015f0 <HAL_TIM_Encoder_MspInit+0x144>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d127      	bne.n	80015dc <HAL_TIM_Encoder_MspInit+0x130>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800158c:	4b16      	ldr	r3, [pc, #88]	; (80015e8 <HAL_TIM_Encoder_MspInit+0x13c>)
 800158e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001590:	4a15      	ldr	r2, [pc, #84]	; (80015e8 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001592:	f043 0304 	orr.w	r3, r3, #4
 8001596:	6593      	str	r3, [r2, #88]	; 0x58
 8001598:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <HAL_TIM_Encoder_MspInit+0x13c>)
 800159a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800159c:	f003 0304 	and.w	r3, r3, #4
 80015a0:	613b      	str	r3, [r7, #16]
 80015a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a4:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <HAL_TIM_Encoder_MspInit+0x13c>)
 80015a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a8:	4a0f      	ldr	r2, [pc, #60]	; (80015e8 <HAL_TIM_Encoder_MspInit+0x13c>)
 80015aa:	f043 0302 	orr.w	r3, r3, #2
 80015ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015b0:	4b0d      	ldr	r3, [pc, #52]	; (80015e8 <HAL_TIM_Encoder_MspInit+0x13c>)
 80015b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC11_Pin|ENC12_Pin;
 80015bc:	23c0      	movs	r3, #192	; 0xc0
 80015be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c0:	2302      	movs	r3, #2
 80015c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c8:	2300      	movs	r3, #0
 80015ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80015cc:	2302      	movs	r3, #2
 80015ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d4:	4619      	mov	r1, r3
 80015d6:	4807      	ldr	r0, [pc, #28]	; (80015f4 <HAL_TIM_Encoder_MspInit+0x148>)
 80015d8:	f000 fb44 	bl	8001c64 <HAL_GPIO_Init>
}
 80015dc:	bf00      	nop
 80015de:	3738      	adds	r7, #56	; 0x38
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	40012c00 	.word	0x40012c00
 80015e8:	40021000 	.word	0x40021000
 80015ec:	40000400 	.word	0x40000400
 80015f0:	40000800 	.word	0x40000800
 80015f4:	48000400 	.word	0x48000400

080015f8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b087      	sub	sp, #28
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001608:	d10c      	bne.n	8001624 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800160a:	4b1b      	ldr	r3, [pc, #108]	; (8001678 <HAL_TIM_PWM_MspInit+0x80>)
 800160c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800160e:	4a1a      	ldr	r2, [pc, #104]	; (8001678 <HAL_TIM_PWM_MspInit+0x80>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	6593      	str	r3, [r2, #88]	; 0x58
 8001616:	4b18      	ldr	r3, [pc, #96]	; (8001678 <HAL_TIM_PWM_MspInit+0x80>)
 8001618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	617b      	str	r3, [r7, #20]
 8001620:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001622:	e022      	b.n	800166a <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM8)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a14      	ldr	r2, [pc, #80]	; (800167c <HAL_TIM_PWM_MspInit+0x84>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d10c      	bne.n	8001648 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800162e:	4b12      	ldr	r3, [pc, #72]	; (8001678 <HAL_TIM_PWM_MspInit+0x80>)
 8001630:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001632:	4a11      	ldr	r2, [pc, #68]	; (8001678 <HAL_TIM_PWM_MspInit+0x80>)
 8001634:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001638:	6613      	str	r3, [r2, #96]	; 0x60
 800163a:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <HAL_TIM_PWM_MspInit+0x80>)
 800163c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800163e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001642:	613b      	str	r3, [r7, #16]
 8001644:	693b      	ldr	r3, [r7, #16]
}
 8001646:	e010      	b.n	800166a <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM15)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a0c      	ldr	r2, [pc, #48]	; (8001680 <HAL_TIM_PWM_MspInit+0x88>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d10b      	bne.n	800166a <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001652:	4b09      	ldr	r3, [pc, #36]	; (8001678 <HAL_TIM_PWM_MspInit+0x80>)
 8001654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001656:	4a08      	ldr	r2, [pc, #32]	; (8001678 <HAL_TIM_PWM_MspInit+0x80>)
 8001658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800165c:	6613      	str	r3, [r2, #96]	; 0x60
 800165e:	4b06      	ldr	r3, [pc, #24]	; (8001678 <HAL_TIM_PWM_MspInit+0x80>)
 8001660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001662:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
}
 800166a:	bf00      	nop
 800166c:	371c      	adds	r7, #28
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	40021000 	.word	0x40021000
 800167c:	40013400 	.word	0x40013400
 8001680:	40014000 	.word	0x40014000

08001684 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a0d      	ldr	r2, [pc, #52]	; (80016c8 <HAL_TIM_Base_MspInit+0x44>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d113      	bne.n	80016be <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001696:	4b0d      	ldr	r3, [pc, #52]	; (80016cc <HAL_TIM_Base_MspInit+0x48>)
 8001698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800169a:	4a0c      	ldr	r2, [pc, #48]	; (80016cc <HAL_TIM_Base_MspInit+0x48>)
 800169c:	f043 0310 	orr.w	r3, r3, #16
 80016a0:	6593      	str	r3, [r2, #88]	; 0x58
 80016a2:	4b0a      	ldr	r3, [pc, #40]	; (80016cc <HAL_TIM_Base_MspInit+0x48>)
 80016a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a6:	f003 0310 	and.w	r3, r3, #16
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2100      	movs	r1, #0
 80016b2:	2036      	movs	r0, #54	; 0x36
 80016b4:	f000 faa1 	bl	8001bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80016b8:	2036      	movs	r0, #54	; 0x36
 80016ba:	f000 fab8 	bl	8001c2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80016be:	bf00      	nop
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40001000 	.word	0x40001000
 80016cc:	40021000 	.word	0x40021000

080016d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08c      	sub	sp, #48	; 0x30
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	f107 031c 	add.w	r3, r7, #28
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016f0:	d11d      	bne.n	800172e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f2:	4b4a      	ldr	r3, [pc, #296]	; (800181c <HAL_TIM_MspPostInit+0x14c>)
 80016f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f6:	4a49      	ldr	r2, [pc, #292]	; (800181c <HAL_TIM_MspPostInit+0x14c>)
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016fe:	4b47      	ldr	r3, [pc, #284]	; (800181c <HAL_TIM_MspPostInit+0x14c>)
 8001700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	61bb      	str	r3, [r7, #24]
 8001708:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TMPWM_Pin;
 800170a:	2301      	movs	r3, #1
 800170c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170e:	2302      	movs	r3, #2
 8001710:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001716:	2300      	movs	r3, #0
 8001718:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800171a:	2301      	movs	r3, #1
 800171c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TMPWM_GPIO_Port, &GPIO_InitStruct);
 800171e:	f107 031c 	add.w	r3, r7, #28
 8001722:	4619      	mov	r1, r3
 8001724:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001728:	f000 fa9c 	bl	8001c64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800172c:	e071      	b.n	8001812 <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM8)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a3b      	ldr	r2, [pc, #236]	; (8001820 <HAL_TIM_MspPostInit+0x150>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d14a      	bne.n	80017ce <HAL_TIM_MspPostInit+0xfe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001738:	4b38      	ldr	r3, [pc, #224]	; (800181c <HAL_TIM_MspPostInit+0x14c>)
 800173a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173c:	4a37      	ldr	r2, [pc, #220]	; (800181c <HAL_TIM_MspPostInit+0x14c>)
 800173e:	f043 0302 	orr.w	r3, r3, #2
 8001742:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001744:	4b35      	ldr	r3, [pc, #212]	; (800181c <HAL_TIM_MspPostInit+0x14c>)
 8001746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	617b      	str	r3, [r7, #20]
 800174e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001750:	4b32      	ldr	r3, [pc, #200]	; (800181c <HAL_TIM_MspPostInit+0x14c>)
 8001752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001754:	4a31      	ldr	r2, [pc, #196]	; (800181c <HAL_TIM_MspPostInit+0x14c>)
 8001756:	f043 0301 	orr.w	r3, r3, #1
 800175a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800175c:	4b2f      	ldr	r3, [pc, #188]	; (800181c <HAL_TIM_MspPostInit+0x14c>)
 800175e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	613b      	str	r3, [r7, #16]
 8001766:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = M1PWM_Pin;
 8001768:	2301      	movs	r3, #1
 800176a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176c:	2302      	movs	r3, #2
 800176e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001774:	2300      	movs	r3, #0
 8001776:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001778:	2304      	movs	r3, #4
 800177a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M1PWM_GPIO_Port, &GPIO_InitStruct);
 800177c:	f107 031c 	add.w	r3, r7, #28
 8001780:	4619      	mov	r1, r3
 8001782:	4828      	ldr	r0, [pc, #160]	; (8001824 <HAL_TIM_MspPostInit+0x154>)
 8001784:	f000 fa6e 	bl	8001c64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M2PWM_Pin;
 8001788:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800178c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178e:	2302      	movs	r3, #2
 8001790:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001792:	2300      	movs	r3, #0
 8001794:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001796:	2300      	movs	r3, #0
 8001798:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 800179a:	2302      	movs	r3, #2
 800179c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M2PWM_GPIO_Port, &GPIO_InitStruct);
 800179e:	f107 031c 	add.w	r3, r7, #28
 80017a2:	4619      	mov	r1, r3
 80017a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a8:	f000 fa5c 	bl	8001c64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M3PWM_Pin;
 80017ac:	2320      	movs	r3, #32
 80017ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b0:	2302      	movs	r3, #2
 80017b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b8:	2300      	movs	r3, #0
 80017ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80017bc:	2303      	movs	r3, #3
 80017be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M3PWM_GPIO_Port, &GPIO_InitStruct);
 80017c0:	f107 031c 	add.w	r3, r7, #28
 80017c4:	4619      	mov	r1, r3
 80017c6:	4817      	ldr	r0, [pc, #92]	; (8001824 <HAL_TIM_MspPostInit+0x154>)
 80017c8:	f000 fa4c 	bl	8001c64 <HAL_GPIO_Init>
}
 80017cc:	e021      	b.n	8001812 <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM15)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a15      	ldr	r2, [pc, #84]	; (8001828 <HAL_TIM_MspPostInit+0x158>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d11c      	bne.n	8001812 <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d8:	4b10      	ldr	r3, [pc, #64]	; (800181c <HAL_TIM_MspPostInit+0x14c>)
 80017da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017dc:	4a0f      	ldr	r2, [pc, #60]	; (800181c <HAL_TIM_MspPostInit+0x14c>)
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017e4:	4b0d      	ldr	r3, [pc, #52]	; (800181c <HAL_TIM_MspPostInit+0x14c>)
 80017e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = S1PWM_Pin|S2PWM_Pin;
 80017f0:	230c      	movs	r3, #12
 80017f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f4:	2302      	movs	r3, #2
 80017f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fc:	2300      	movs	r3, #0
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8001800:	2309      	movs	r3, #9
 8001802:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001804:	f107 031c 	add.w	r3, r7, #28
 8001808:	4619      	mov	r1, r3
 800180a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800180e:	f000 fa29 	bl	8001c64 <HAL_GPIO_Init>
}
 8001812:	bf00      	nop
 8001814:	3730      	adds	r7, #48	; 0x30
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40021000 	.word	0x40021000
 8001820:	40013400 	.word	0x40013400
 8001824:	48000400 	.word	0x48000400
 8001828:	40014000 	.word	0x40014000

0800182c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001830:	e7fe      	b.n	8001830 <NMI_Handler+0x4>

08001832 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001832:	b480      	push	{r7}
 8001834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001836:	e7fe      	b.n	8001836 <HardFault_Handler+0x4>

08001838 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800183c:	e7fe      	b.n	800183c <MemManage_Handler+0x4>

0800183e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001842:	e7fe      	b.n	8001842 <BusFault_Handler+0x4>

08001844 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001848:	e7fe      	b.n	8001848 <UsageFault_Handler+0x4>

0800184a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001866:	b480      	push	{r7}
 8001868:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001878:	f000 f8a4 	bl	80019c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800187c:	bf00      	nop
 800187e:	bd80      	pop	{r7, pc}

08001880 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001884:	4802      	ldr	r0, [pc, #8]	; (8001890 <USB_LP_IRQHandler+0x10>)
 8001886:	f000 fca8 	bl	80021da <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	200010b0 	.word	0x200010b0

08001894 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001898:	4802      	ldr	r0, [pc, #8]	; (80018a4 <TIM6_DAC_IRQHandler+0x10>)
 800189a:	f003 fba9 	bl	8004ff0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	200002d0 	.word	0x200002d0

080018a8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80018ac:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <SystemInit+0x20>)
 80018ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018b2:	4a05      	ldr	r2, [pc, #20]	; (80018c8 <SystemInit+0x20>)
 80018b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <Reset_Handler>:
 80018cc:	480d      	ldr	r0, [pc, #52]	; (8001904 <LoopForever+0x2>)
 80018ce:	4685      	mov	sp, r0
 80018d0:	480d      	ldr	r0, [pc, #52]	; (8001908 <LoopForever+0x6>)
 80018d2:	490e      	ldr	r1, [pc, #56]	; (800190c <LoopForever+0xa>)
 80018d4:	4a0e      	ldr	r2, [pc, #56]	; (8001910 <LoopForever+0xe>)
 80018d6:	2300      	movs	r3, #0
 80018d8:	e002      	b.n	80018e0 <LoopCopyDataInit>

080018da <CopyDataInit>:
 80018da:	58d4      	ldr	r4, [r2, r3]
 80018dc:	50c4      	str	r4, [r0, r3]
 80018de:	3304      	adds	r3, #4

080018e0 <LoopCopyDataInit>:
 80018e0:	18c4      	adds	r4, r0, r3
 80018e2:	428c      	cmp	r4, r1
 80018e4:	d3f9      	bcc.n	80018da <CopyDataInit>
 80018e6:	4a0b      	ldr	r2, [pc, #44]	; (8001914 <LoopForever+0x12>)
 80018e8:	4c0b      	ldr	r4, [pc, #44]	; (8001918 <LoopForever+0x16>)
 80018ea:	2300      	movs	r3, #0
 80018ec:	e001      	b.n	80018f2 <LoopFillZerobss>

080018ee <FillZerobss>:
 80018ee:	6013      	str	r3, [r2, #0]
 80018f0:	3204      	adds	r2, #4

080018f2 <LoopFillZerobss>:
 80018f2:	42a2      	cmp	r2, r4
 80018f4:	d3fb      	bcc.n	80018ee <FillZerobss>
 80018f6:	f7ff ffd7 	bl	80018a8 <SystemInit>
 80018fa:	f009 f849 	bl	800a990 <__libc_init_array>
 80018fe:	f7ff f9a5 	bl	8000c4c <main>

08001902 <LoopForever>:
 8001902:	e7fe      	b.n	8001902 <LoopForever>
 8001904:	20008000 	.word	0x20008000
 8001908:	20000000 	.word	0x20000000
 800190c:	20000184 	.word	0x20000184
 8001910:	0800aa7c 	.word	0x0800aa7c
 8001914:	20000184 	.word	0x20000184
 8001918:	200015c4 	.word	0x200015c4

0800191c <ADC1_2_IRQHandler>:
 800191c:	e7fe      	b.n	800191c <ADC1_2_IRQHandler>

0800191e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b082      	sub	sp, #8
 8001922:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001924:	2300      	movs	r3, #0
 8001926:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001928:	2003      	movs	r0, #3
 800192a:	f000 f95b 	bl	8001be4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800192e:	200f      	movs	r0, #15
 8001930:	f000 f80e 	bl	8001950 <HAL_InitTick>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d002      	beq.n	8001940 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	71fb      	strb	r3, [r7, #7]
 800193e:	e001      	b.n	8001944 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001940:	f7ff fd90 	bl	8001464 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001944:	79fb      	ldrb	r3, [r7, #7]

}
 8001946:	4618      	mov	r0, r3
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
	...

08001950 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001958:	2300      	movs	r3, #0
 800195a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800195c:	4b16      	ldr	r3, [pc, #88]	; (80019b8 <HAL_InitTick+0x68>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d022      	beq.n	80019aa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001964:	4b15      	ldr	r3, [pc, #84]	; (80019bc <HAL_InitTick+0x6c>)
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	4b13      	ldr	r3, [pc, #76]	; (80019b8 <HAL_InitTick+0x68>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001970:	fbb1 f3f3 	udiv	r3, r1, r3
 8001974:	fbb2 f3f3 	udiv	r3, r2, r3
 8001978:	4618      	mov	r0, r3
 800197a:	f000 f966 	bl	8001c4a <HAL_SYSTICK_Config>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d10f      	bne.n	80019a4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2b0f      	cmp	r3, #15
 8001988:	d809      	bhi.n	800199e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800198a:	2200      	movs	r2, #0
 800198c:	6879      	ldr	r1, [r7, #4]
 800198e:	f04f 30ff 	mov.w	r0, #4294967295
 8001992:	f000 f932 	bl	8001bfa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001996:	4a0a      	ldr	r2, [pc, #40]	; (80019c0 <HAL_InitTick+0x70>)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6013      	str	r3, [r2, #0]
 800199c:	e007      	b.n	80019ae <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	73fb      	strb	r3, [r7, #15]
 80019a2:	e004      	b.n	80019ae <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	73fb      	strb	r3, [r7, #15]
 80019a8:	e001      	b.n	80019ae <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3710      	adds	r7, #16
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	20000008 	.word	0x20000008
 80019bc:	20000000 	.word	0x20000000
 80019c0:	20000004 	.word	0x20000004

080019c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019c8:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <HAL_IncTick+0x1c>)
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <HAL_IncTick+0x20>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4413      	add	r3, r2
 80019d2:	4a03      	ldr	r2, [pc, #12]	; (80019e0 <HAL_IncTick+0x1c>)
 80019d4:	6013      	str	r3, [r2, #0]
}
 80019d6:	bf00      	nop
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	20000408 	.word	0x20000408
 80019e4:	20000008 	.word	0x20000008

080019e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  return uwTick;
 80019ec:	4b03      	ldr	r3, [pc, #12]	; (80019fc <HAL_GetTick+0x14>)
 80019ee:	681b      	ldr	r3, [r3, #0]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	20000408 	.word	0x20000408

08001a00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a08:	f7ff ffee 	bl	80019e8 <HAL_GetTick>
 8001a0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a18:	d004      	beq.n	8001a24 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a1a:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <HAL_Delay+0x40>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	4413      	add	r3, r2
 8001a22:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a24:	bf00      	nop
 8001a26:	f7ff ffdf 	bl	80019e8 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d8f7      	bhi.n	8001a26 <HAL_Delay+0x26>
  {
  }
}
 8001a36:	bf00      	nop
 8001a38:	bf00      	nop
 8001a3a:	3710      	adds	r7, #16
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20000008 	.word	0x20000008

08001a44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a54:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <__NVIC_SetPriorityGrouping+0x44>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a5a:	68ba      	ldr	r2, [r7, #8]
 8001a5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a60:	4013      	ands	r3, r2
 8001a62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a76:	4a04      	ldr	r2, [pc, #16]	; (8001a88 <__NVIC_SetPriorityGrouping+0x44>)
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	60d3      	str	r3, [r2, #12]
}
 8001a7c:	bf00      	nop
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a90:	4b04      	ldr	r3, [pc, #16]	; (8001aa4 <__NVIC_GetPriorityGrouping+0x18>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	0a1b      	lsrs	r3, r3, #8
 8001a96:	f003 0307 	and.w	r3, r3, #7
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	e000ed00 	.word	0xe000ed00

08001aa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	db0b      	blt.n	8001ad2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	f003 021f 	and.w	r2, r3, #31
 8001ac0:	4907      	ldr	r1, [pc, #28]	; (8001ae0 <__NVIC_EnableIRQ+0x38>)
 8001ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac6:	095b      	lsrs	r3, r3, #5
 8001ac8:	2001      	movs	r0, #1
 8001aca:	fa00 f202 	lsl.w	r2, r0, r2
 8001ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ad2:	bf00      	nop
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	e000e100 	.word	0xe000e100

08001ae4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	6039      	str	r1, [r7, #0]
 8001aee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	db0a      	blt.n	8001b0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	b2da      	uxtb	r2, r3
 8001afc:	490c      	ldr	r1, [pc, #48]	; (8001b30 <__NVIC_SetPriority+0x4c>)
 8001afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b02:	0112      	lsls	r2, r2, #4
 8001b04:	b2d2      	uxtb	r2, r2
 8001b06:	440b      	add	r3, r1
 8001b08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b0c:	e00a      	b.n	8001b24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	b2da      	uxtb	r2, r3
 8001b12:	4908      	ldr	r1, [pc, #32]	; (8001b34 <__NVIC_SetPriority+0x50>)
 8001b14:	79fb      	ldrb	r3, [r7, #7]
 8001b16:	f003 030f 	and.w	r3, r3, #15
 8001b1a:	3b04      	subs	r3, #4
 8001b1c:	0112      	lsls	r2, r2, #4
 8001b1e:	b2d2      	uxtb	r2, r2
 8001b20:	440b      	add	r3, r1
 8001b22:	761a      	strb	r2, [r3, #24]
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	e000e100 	.word	0xe000e100
 8001b34:	e000ed00 	.word	0xe000ed00

08001b38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b089      	sub	sp, #36	; 0x24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	f1c3 0307 	rsb	r3, r3, #7
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	bf28      	it	cs
 8001b56:	2304      	movcs	r3, #4
 8001b58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	3304      	adds	r3, #4
 8001b5e:	2b06      	cmp	r3, #6
 8001b60:	d902      	bls.n	8001b68 <NVIC_EncodePriority+0x30>
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	3b03      	subs	r3, #3
 8001b66:	e000      	b.n	8001b6a <NVIC_EncodePriority+0x32>
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	43da      	mvns	r2, r3
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	401a      	ands	r2, r3
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b80:	f04f 31ff 	mov.w	r1, #4294967295
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8a:	43d9      	mvns	r1, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b90:	4313      	orrs	r3, r2
         );
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3724      	adds	r7, #36	; 0x24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
	...

08001ba0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	3b01      	subs	r3, #1
 8001bac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bb0:	d301      	bcc.n	8001bb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e00f      	b.n	8001bd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bb6:	4a0a      	ldr	r2, [pc, #40]	; (8001be0 <SysTick_Config+0x40>)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bbe:	210f      	movs	r1, #15
 8001bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc4:	f7ff ff8e 	bl	8001ae4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bc8:	4b05      	ldr	r3, [pc, #20]	; (8001be0 <SysTick_Config+0x40>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bce:	4b04      	ldr	r3, [pc, #16]	; (8001be0 <SysTick_Config+0x40>)
 8001bd0:	2207      	movs	r2, #7
 8001bd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	e000e010 	.word	0xe000e010

08001be4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f7ff ff29 	bl	8001a44 <__NVIC_SetPriorityGrouping>
}
 8001bf2:	bf00      	nop
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b086      	sub	sp, #24
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	4603      	mov	r3, r0
 8001c02:	60b9      	str	r1, [r7, #8]
 8001c04:	607a      	str	r2, [r7, #4]
 8001c06:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c08:	f7ff ff40 	bl	8001a8c <__NVIC_GetPriorityGrouping>
 8001c0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	68b9      	ldr	r1, [r7, #8]
 8001c12:	6978      	ldr	r0, [r7, #20]
 8001c14:	f7ff ff90 	bl	8001b38 <NVIC_EncodePriority>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c1e:	4611      	mov	r1, r2
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff ff5f 	bl	8001ae4 <__NVIC_SetPriority>
}
 8001c26:	bf00      	nop
 8001c28:	3718      	adds	r7, #24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b082      	sub	sp, #8
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	4603      	mov	r3, r0
 8001c36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff ff33 	bl	8001aa8 <__NVIC_EnableIRQ>
}
 8001c42:	bf00      	nop
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b082      	sub	sp, #8
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7ff ffa4 	bl	8001ba0 <SysTick_Config>
 8001c58:	4603      	mov	r3, r0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
	...

08001c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b087      	sub	sp, #28
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001c72:	e15a      	b.n	8001f2a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	2101      	movs	r1, #1
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c80:	4013      	ands	r3, r2
 8001c82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f000 814c 	beq.w	8001f24 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f003 0303 	and.w	r3, r3, #3
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d005      	beq.n	8001ca4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d130      	bne.n	8001d06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	2203      	movs	r2, #3
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	68da      	ldr	r2, [r3, #12]
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cda:	2201      	movs	r2, #1
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	091b      	lsrs	r3, r3, #4
 8001cf0:	f003 0201 	and.w	r2, r3, #1
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f003 0303 	and.w	r3, r3, #3
 8001d0e:	2b03      	cmp	r3, #3
 8001d10:	d017      	beq.n	8001d42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	2203      	movs	r2, #3
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	43db      	mvns	r3, r3
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	4013      	ands	r3, r2
 8001d28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	689a      	ldr	r2, [r3, #8]
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f003 0303 	and.w	r3, r3, #3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d123      	bne.n	8001d96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	08da      	lsrs	r2, r3, #3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	3208      	adds	r2, #8
 8001d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	220f      	movs	r2, #15
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	691a      	ldr	r2, [r3, #16]
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	f003 0307 	and.w	r3, r3, #7
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	08da      	lsrs	r2, r3, #3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3208      	adds	r2, #8
 8001d90:	6939      	ldr	r1, [r7, #16]
 8001d92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	2203      	movs	r2, #3
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	43db      	mvns	r3, r3
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	4013      	ands	r3, r2
 8001dac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f003 0203 	and.w	r2, r3, #3
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	f000 80a6 	beq.w	8001f24 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dd8:	4b5b      	ldr	r3, [pc, #364]	; (8001f48 <HAL_GPIO_Init+0x2e4>)
 8001dda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ddc:	4a5a      	ldr	r2, [pc, #360]	; (8001f48 <HAL_GPIO_Init+0x2e4>)
 8001dde:	f043 0301 	orr.w	r3, r3, #1
 8001de2:	6613      	str	r3, [r2, #96]	; 0x60
 8001de4:	4b58      	ldr	r3, [pc, #352]	; (8001f48 <HAL_GPIO_Init+0x2e4>)
 8001de6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	60bb      	str	r3, [r7, #8]
 8001dee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001df0:	4a56      	ldr	r2, [pc, #344]	; (8001f4c <HAL_GPIO_Init+0x2e8>)
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	089b      	lsrs	r3, r3, #2
 8001df6:	3302      	adds	r3, #2
 8001df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	f003 0303 	and.w	r3, r3, #3
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	220f      	movs	r2, #15
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	4013      	ands	r3, r2
 8001e12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e1a:	d01f      	beq.n	8001e5c <HAL_GPIO_Init+0x1f8>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a4c      	ldr	r2, [pc, #304]	; (8001f50 <HAL_GPIO_Init+0x2ec>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d019      	beq.n	8001e58 <HAL_GPIO_Init+0x1f4>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a4b      	ldr	r2, [pc, #300]	; (8001f54 <HAL_GPIO_Init+0x2f0>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d013      	beq.n	8001e54 <HAL_GPIO_Init+0x1f0>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a4a      	ldr	r2, [pc, #296]	; (8001f58 <HAL_GPIO_Init+0x2f4>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d00d      	beq.n	8001e50 <HAL_GPIO_Init+0x1ec>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a49      	ldr	r2, [pc, #292]	; (8001f5c <HAL_GPIO_Init+0x2f8>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d007      	beq.n	8001e4c <HAL_GPIO_Init+0x1e8>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a48      	ldr	r2, [pc, #288]	; (8001f60 <HAL_GPIO_Init+0x2fc>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d101      	bne.n	8001e48 <HAL_GPIO_Init+0x1e4>
 8001e44:	2305      	movs	r3, #5
 8001e46:	e00a      	b.n	8001e5e <HAL_GPIO_Init+0x1fa>
 8001e48:	2306      	movs	r3, #6
 8001e4a:	e008      	b.n	8001e5e <HAL_GPIO_Init+0x1fa>
 8001e4c:	2304      	movs	r3, #4
 8001e4e:	e006      	b.n	8001e5e <HAL_GPIO_Init+0x1fa>
 8001e50:	2303      	movs	r3, #3
 8001e52:	e004      	b.n	8001e5e <HAL_GPIO_Init+0x1fa>
 8001e54:	2302      	movs	r3, #2
 8001e56:	e002      	b.n	8001e5e <HAL_GPIO_Init+0x1fa>
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e000      	b.n	8001e5e <HAL_GPIO_Init+0x1fa>
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	697a      	ldr	r2, [r7, #20]
 8001e60:	f002 0203 	and.w	r2, r2, #3
 8001e64:	0092      	lsls	r2, r2, #2
 8001e66:	4093      	lsls	r3, r2
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e6e:	4937      	ldr	r1, [pc, #220]	; (8001f4c <HAL_GPIO_Init+0x2e8>)
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	089b      	lsrs	r3, r3, #2
 8001e74:	3302      	adds	r3, #2
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e7c:	4b39      	ldr	r3, [pc, #228]	; (8001f64 <HAL_GPIO_Init+0x300>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	43db      	mvns	r3, r3
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d003      	beq.n	8001ea0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ea0:	4a30      	ldr	r2, [pc, #192]	; (8001f64 <HAL_GPIO_Init+0x300>)
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ea6:	4b2f      	ldr	r3, [pc, #188]	; (8001f64 <HAL_GPIO_Init+0x300>)
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d003      	beq.n	8001eca <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001eca:	4a26      	ldr	r2, [pc, #152]	; (8001f64 <HAL_GPIO_Init+0x300>)
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001ed0:	4b24      	ldr	r3, [pc, #144]	; (8001f64 <HAL_GPIO_Init+0x300>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	4013      	ands	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d003      	beq.n	8001ef4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ef4:	4a1b      	ldr	r2, [pc, #108]	; (8001f64 <HAL_GPIO_Init+0x300>)
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001efa:	4b1a      	ldr	r3, [pc, #104]	; (8001f64 <HAL_GPIO_Init+0x300>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	43db      	mvns	r3, r3
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	4013      	ands	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f1e:	4a11      	ldr	r2, [pc, #68]	; (8001f64 <HAL_GPIO_Init+0x300>)
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	3301      	adds	r3, #1
 8001f28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	fa22 f303 	lsr.w	r3, r2, r3
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	f47f ae9d 	bne.w	8001c74 <HAL_GPIO_Init+0x10>
  }
}
 8001f3a:	bf00      	nop
 8001f3c:	bf00      	nop
 8001f3e:	371c      	adds	r7, #28
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	40010000 	.word	0x40010000
 8001f50:	48000400 	.word	0x48000400
 8001f54:	48000800 	.word	0x48000800
 8001f58:	48000c00 	.word	0x48000c00
 8001f5c:	48001000 	.word	0x48001000
 8001f60:	48001400 	.word	0x48001400
 8001f64:	40010400 	.word	0x40010400

08001f68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	460b      	mov	r3, r1
 8001f72:	807b      	strh	r3, [r7, #2]
 8001f74:	4613      	mov	r3, r2
 8001f76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f78:	787b      	ldrb	r3, [r7, #1]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f7e:	887a      	ldrh	r2, [r7, #2]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f84:	e002      	b.n	8001f8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f86:	887a      	ldrh	r2, [r7, #2]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	695b      	ldr	r3, [r3, #20]
 8001fa8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001faa:	887a      	ldrh	r2, [r7, #2]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	041a      	lsls	r2, r3, #16
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	43d9      	mvns	r1, r3
 8001fb6:	887b      	ldrh	r3, [r7, #2]
 8001fb8:	400b      	ands	r3, r1
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	619a      	str	r2, [r3, #24]
}
 8001fc0:	bf00      	nop
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fce:	b08b      	sub	sp, #44	; 0x2c
 8001fd0:	af06      	add	r7, sp, #24
 8001fd2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e0d7      	b.n	800218e <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d106      	bne.n	8001ff8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f008 f9c6 	bl	800a384 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2203      	movs	r2, #3
 8001ffc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f004 f8b3 	bl	8006170 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800200a:	2300      	movs	r3, #0
 800200c:	73fb      	strb	r3, [r7, #15]
 800200e:	e04c      	b.n	80020aa <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002010:	7bfb      	ldrb	r3, [r7, #15]
 8002012:	6879      	ldr	r1, [r7, #4]
 8002014:	1c5a      	adds	r2, r3, #1
 8002016:	4613      	mov	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4413      	add	r3, r2
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	440b      	add	r3, r1
 8002020:	3301      	adds	r3, #1
 8002022:	2201      	movs	r2, #1
 8002024:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002026:	7bfb      	ldrb	r3, [r7, #15]
 8002028:	6879      	ldr	r1, [r7, #4]
 800202a:	1c5a      	adds	r2, r3, #1
 800202c:	4613      	mov	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	440b      	add	r3, r1
 8002036:	7bfa      	ldrb	r2, [r7, #15]
 8002038:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800203a:	7bfa      	ldrb	r2, [r7, #15]
 800203c:	7bfb      	ldrb	r3, [r7, #15]
 800203e:	b298      	uxth	r0, r3
 8002040:	6879      	ldr	r1, [r7, #4]
 8002042:	4613      	mov	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	4413      	add	r3, r2
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	440b      	add	r3, r1
 800204c:	3336      	adds	r3, #54	; 0x36
 800204e:	4602      	mov	r2, r0
 8002050:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002052:	7bfb      	ldrb	r3, [r7, #15]
 8002054:	6879      	ldr	r1, [r7, #4]
 8002056:	1c5a      	adds	r2, r3, #1
 8002058:	4613      	mov	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	4413      	add	r3, r2
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	440b      	add	r3, r1
 8002062:	3303      	adds	r3, #3
 8002064:	2200      	movs	r2, #0
 8002066:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002068:	7bfa      	ldrb	r2, [r7, #15]
 800206a:	6879      	ldr	r1, [r7, #4]
 800206c:	4613      	mov	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4413      	add	r3, r2
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	440b      	add	r3, r1
 8002076:	3338      	adds	r3, #56	; 0x38
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800207c:	7bfa      	ldrb	r2, [r7, #15]
 800207e:	6879      	ldr	r1, [r7, #4]
 8002080:	4613      	mov	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	4413      	add	r3, r2
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	440b      	add	r3, r1
 800208a:	333c      	adds	r3, #60	; 0x3c
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002090:	7bfa      	ldrb	r2, [r7, #15]
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	4613      	mov	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	440b      	add	r3, r1
 800209e:	3340      	adds	r3, #64	; 0x40
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020a4:	7bfb      	ldrb	r3, [r7, #15]
 80020a6:	3301      	adds	r3, #1
 80020a8:	73fb      	strb	r3, [r7, #15]
 80020aa:	7bfa      	ldrb	r2, [r7, #15]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d3ad      	bcc.n	8002010 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020b4:	2300      	movs	r3, #0
 80020b6:	73fb      	strb	r3, [r7, #15]
 80020b8:	e044      	b.n	8002144 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80020ba:	7bfa      	ldrb	r2, [r7, #15]
 80020bc:	6879      	ldr	r1, [r7, #4]
 80020be:	4613      	mov	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	4413      	add	r3, r2
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	440b      	add	r3, r1
 80020c8:	f203 1369 	addw	r3, r3, #361	; 0x169
 80020cc:	2200      	movs	r2, #0
 80020ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80020d0:	7bfa      	ldrb	r2, [r7, #15]
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	4613      	mov	r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	4413      	add	r3, r2
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	440b      	add	r3, r1
 80020de:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020e2:	7bfa      	ldrb	r2, [r7, #15]
 80020e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020e6:	7bfa      	ldrb	r2, [r7, #15]
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	4613      	mov	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	4413      	add	r3, r2
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	440b      	add	r3, r1
 80020f4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80020f8:	2200      	movs	r2, #0
 80020fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020fc:	7bfa      	ldrb	r2, [r7, #15]
 80020fe:	6879      	ldr	r1, [r7, #4]
 8002100:	4613      	mov	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4413      	add	r3, r2
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	440b      	add	r3, r1
 800210a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002112:	7bfa      	ldrb	r2, [r7, #15]
 8002114:	6879      	ldr	r1, [r7, #4]
 8002116:	4613      	mov	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4413      	add	r3, r2
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	440b      	add	r3, r1
 8002120:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002128:	7bfa      	ldrb	r2, [r7, #15]
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	4613      	mov	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	440b      	add	r3, r1
 8002136:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800213e:	7bfb      	ldrb	r3, [r7, #15]
 8002140:	3301      	adds	r3, #1
 8002142:	73fb      	strb	r3, [r7, #15]
 8002144:	7bfa      	ldrb	r2, [r7, #15]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	429a      	cmp	r2, r3
 800214c:	d3b5      	bcc.n	80020ba <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	603b      	str	r3, [r7, #0]
 8002154:	687e      	ldr	r6, [r7, #4]
 8002156:	466d      	mov	r5, sp
 8002158:	f106 0410 	add.w	r4, r6, #16
 800215c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800215e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002160:	6823      	ldr	r3, [r4, #0]
 8002162:	602b      	str	r3, [r5, #0]
 8002164:	1d33      	adds	r3, r6, #4
 8002166:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002168:	6838      	ldr	r0, [r7, #0]
 800216a:	f004 f81c 	bl	80061a6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d102      	bne.n	800218c <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f001 fc29 	bl	80039de <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3714      	adds	r7, #20
 8002192:	46bd      	mov	sp, r7
 8002194:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002196 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b082      	sub	sp, #8
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d101      	bne.n	80021ac <HAL_PCD_Start+0x16>
 80021a8:	2302      	movs	r3, #2
 80021aa:	e012      	b.n	80021d2 <HAL_PCD_Start+0x3c>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f003 ffc2 	bl	8006142 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f006 f9da 	bl	800857c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b084      	sub	sp, #16
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f006 f9df 	bl	80085aa <USB_ReadInterrupts>
 80021ec:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d003      	beq.n	8002200 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 fb26 	bl	800284a <PCD_EP_ISR_Handler>

    return;
 80021fe:	e110      	b.n	8002422 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002206:	2b00      	cmp	r3, #0
 8002208:	d013      	beq.n	8002232 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002212:	b29a      	uxth	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800221c:	b292      	uxth	r2, r2
 800221e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f008 f93f 	bl	800a4a6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002228:	2100      	movs	r1, #0
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 f8fc 	bl	8002428 <HAL_PCD_SetAddress>

    return;
 8002230:	e0f7      	b.n	8002422 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d00c      	beq.n	8002256 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002244:	b29a      	uxth	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800224e:	b292      	uxth	r2, r2
 8002250:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002254:	e0e5      	b.n	8002422 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00c      	beq.n	800227a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002268:	b29a      	uxth	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002272:	b292      	uxth	r2, r2
 8002274:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002278:	e0d3      	b.n	8002422 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d034      	beq.n	80022ee <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800228c:	b29a      	uxth	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f022 0204 	bic.w	r2, r2, #4
 8002296:	b292      	uxth	r2, r2
 8002298:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80022a4:	b29a      	uxth	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f022 0208 	bic.w	r2, r2, #8
 80022ae:	b292      	uxth	r2, r2
 80022b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d107      	bne.n	80022ce <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80022c6:	2100      	movs	r1, #0
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f008 fae1 	bl	800a890 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f008 f922 	bl	800a518 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022dc:	b29a      	uxth	r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80022e6:	b292      	uxth	r2, r2
 80022e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80022ec:	e099      	b.n	8002422 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d027      	beq.n	8002348 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002300:	b29a      	uxth	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f042 0208 	orr.w	r2, r2, #8
 800230a:	b292      	uxth	r2, r2
 800230c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002318:	b29a      	uxth	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002322:	b292      	uxth	r2, r2
 8002324:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002330:	b29a      	uxth	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f042 0204 	orr.w	r2, r2, #4
 800233a:	b292      	uxth	r2, r2
 800233c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f008 f8cf 	bl	800a4e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002346:	e06c      	b.n	8002422 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800234e:	2b00      	cmp	r3, #0
 8002350:	d040      	beq.n	80023d4 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800235a:	b29a      	uxth	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002364:	b292      	uxth	r2, r2
 8002366:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d12b      	bne.n	80023cc <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800237c:	b29a      	uxth	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f042 0204 	orr.w	r2, r2, #4
 8002386:	b292      	uxth	r2, r2
 8002388:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002394:	b29a      	uxth	r2, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f042 0208 	orr.w	r2, r2, #8
 800239e:	b292      	uxth	r2, r2
 80023a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	089b      	lsrs	r3, r3, #2
 80023b8:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80023c2:	2101      	movs	r1, #1
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f008 fa63 	bl	800a890 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80023ca:	e02a      	b.n	8002422 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f008 f889 	bl	800a4e4 <HAL_PCD_SuspendCallback>
    return;
 80023d2:	e026      	b.n	8002422 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00f      	beq.n	80023fe <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023e6:	b29a      	uxth	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80023f0:	b292      	uxth	r2, r2
 80023f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f008 f847 	bl	800a48a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80023fc:	e011      	b.n	8002422 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002404:	2b00      	cmp	r3, #0
 8002406:	d00c      	beq.n	8002422 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002410:	b29a      	uxth	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800241a:	b292      	uxth	r2, r2
 800241c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002420:	bf00      	nop
  }
}
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	460b      	mov	r3, r1
 8002432:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800243a:	2b01      	cmp	r3, #1
 800243c:	d101      	bne.n	8002442 <HAL_PCD_SetAddress+0x1a>
 800243e:	2302      	movs	r3, #2
 8002440:	e013      	b.n	800246a <HAL_PCD_SetAddress+0x42>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	78fa      	ldrb	r2, [r7, #3]
 800244e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	78fa      	ldrb	r2, [r7, #3]
 8002458:	4611      	mov	r1, r2
 800245a:	4618      	mov	r0, r3
 800245c:	f006 f87a 	bl	8008554 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b084      	sub	sp, #16
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
 800247a:	4608      	mov	r0, r1
 800247c:	4611      	mov	r1, r2
 800247e:	461a      	mov	r2, r3
 8002480:	4603      	mov	r3, r0
 8002482:	70fb      	strb	r3, [r7, #3]
 8002484:	460b      	mov	r3, r1
 8002486:	803b      	strh	r3, [r7, #0]
 8002488:	4613      	mov	r3, r2
 800248a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800248c:	2300      	movs	r3, #0
 800248e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002490:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002494:	2b00      	cmp	r3, #0
 8002496:	da0e      	bge.n	80024b6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002498:	78fb      	ldrb	r3, [r7, #3]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	1c5a      	adds	r2, r3, #1
 80024a0:	4613      	mov	r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	4413      	add	r3, r2
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	4413      	add	r3, r2
 80024ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2201      	movs	r2, #1
 80024b2:	705a      	strb	r2, [r3, #1]
 80024b4:	e00e      	b.n	80024d4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024b6:	78fb      	ldrb	r3, [r7, #3]
 80024b8:	f003 0207 	and.w	r2, r3, #7
 80024bc:	4613      	mov	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	4413      	add	r3, r2
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	4413      	add	r3, r2
 80024cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2200      	movs	r2, #0
 80024d2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80024d4:	78fb      	ldrb	r3, [r7, #3]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	b2da      	uxtb	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80024e0:	883a      	ldrh	r2, [r7, #0]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	78ba      	ldrb	r2, [r7, #2]
 80024ea:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	785b      	ldrb	r3, [r3, #1]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d004      	beq.n	80024fe <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80024fe:	78bb      	ldrb	r3, [r7, #2]
 8002500:	2b02      	cmp	r3, #2
 8002502:	d102      	bne.n	800250a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002510:	2b01      	cmp	r3, #1
 8002512:	d101      	bne.n	8002518 <HAL_PCD_EP_Open+0xa6>
 8002514:	2302      	movs	r3, #2
 8002516:	e00e      	b.n	8002536 <HAL_PCD_EP_Open+0xc4>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68f9      	ldr	r1, [r7, #12]
 8002526:	4618      	mov	r0, r3
 8002528:	f003 fe5e 	bl	80061e8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002534:	7afb      	ldrb	r3, [r7, #11]
}
 8002536:	4618      	mov	r0, r3
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b084      	sub	sp, #16
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
 8002546:	460b      	mov	r3, r1
 8002548:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800254a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800254e:	2b00      	cmp	r3, #0
 8002550:	da0e      	bge.n	8002570 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002552:	78fb      	ldrb	r3, [r7, #3]
 8002554:	f003 0307 	and.w	r3, r3, #7
 8002558:	1c5a      	adds	r2, r3, #1
 800255a:	4613      	mov	r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	4413      	add	r3, r2
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	4413      	add	r3, r2
 8002566:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2201      	movs	r2, #1
 800256c:	705a      	strb	r2, [r3, #1]
 800256e:	e00e      	b.n	800258e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002570:	78fb      	ldrb	r3, [r7, #3]
 8002572:	f003 0207 	and.w	r2, r3, #7
 8002576:	4613      	mov	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	4413      	add	r3, r2
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	4413      	add	r3, r2
 8002586:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2200      	movs	r2, #0
 800258c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800258e:	78fb      	ldrb	r3, [r7, #3]
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	b2da      	uxtb	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d101      	bne.n	80025a8 <HAL_PCD_EP_Close+0x6a>
 80025a4:	2302      	movs	r3, #2
 80025a6:	e00e      	b.n	80025c6 <HAL_PCD_EP_Close+0x88>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68f9      	ldr	r1, [r7, #12]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f004 f9aa 	bl	8006910 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b086      	sub	sp, #24
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	60f8      	str	r0, [r7, #12]
 80025d6:	607a      	str	r2, [r7, #4]
 80025d8:	603b      	str	r3, [r7, #0]
 80025da:	460b      	mov	r3, r1
 80025dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025de:	7afb      	ldrb	r3, [r7, #11]
 80025e0:	f003 0207 	and.w	r2, r3, #7
 80025e4:	4613      	mov	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4413      	add	r3, r2
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	4413      	add	r3, r2
 80025f4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	2200      	movs	r2, #0
 8002606:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	2200      	movs	r2, #0
 800260c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800260e:	7afb      	ldrb	r3, [r7, #11]
 8002610:	f003 0307 	and.w	r3, r3, #7
 8002614:	b2da      	uxtb	r2, r3
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800261a:	7afb      	ldrb	r3, [r7, #11]
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	2b00      	cmp	r3, #0
 8002622:	d106      	bne.n	8002632 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6979      	ldr	r1, [r7, #20]
 800262a:	4618      	mov	r0, r3
 800262c:	f004 fb5d 	bl	8006cea <USB_EPStartXfer>
 8002630:	e005      	b.n	800263e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6979      	ldr	r1, [r7, #20]
 8002638:	4618      	mov	r0, r3
 800263a:	f004 fb56 	bl	8006cea <USB_EPStartXfer>
  }

  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3718      	adds	r7, #24
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	460b      	mov	r3, r1
 8002652:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002654:	78fb      	ldrb	r3, [r7, #3]
 8002656:	f003 0207 	and.w	r2, r3, #7
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	4613      	mov	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	440b      	add	r3, r1
 8002666:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800266a:	681b      	ldr	r3, [r3, #0]
}
 800266c:	4618      	mov	r0, r3
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	607a      	str	r2, [r7, #4]
 8002682:	603b      	str	r3, [r7, #0]
 8002684:	460b      	mov	r3, r1
 8002686:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002688:	7afb      	ldrb	r3, [r7, #11]
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	1c5a      	adds	r2, r3, #1
 8002690:	4613      	mov	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4413      	add	r3, r2
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	4413      	add	r3, r2
 800269c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	2201      	movs	r2, #1
 80026ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	683a      	ldr	r2, [r7, #0]
 80026b6:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	2200      	movs	r2, #0
 80026bc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	2201      	movs	r2, #1
 80026c2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026c4:	7afb      	ldrb	r3, [r7, #11]
 80026c6:	f003 0307 	and.w	r3, r3, #7
 80026ca:	b2da      	uxtb	r2, r3
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80026d0:	7afb      	ldrb	r3, [r7, #11]
 80026d2:	f003 0307 	and.w	r3, r3, #7
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d106      	bne.n	80026e8 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	6979      	ldr	r1, [r7, #20]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f004 fb02 	bl	8006cea <USB_EPStartXfer>
 80026e6:	e005      	b.n	80026f4 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6979      	ldr	r1, [r7, #20]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f004 fafb 	bl	8006cea <USB_EPStartXfer>
  }

  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3718      	adds	r7, #24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b084      	sub	sp, #16
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
 8002706:	460b      	mov	r3, r1
 8002708:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800270a:	78fb      	ldrb	r3, [r7, #3]
 800270c:	f003 0207 	and.w	r2, r3, #7
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	429a      	cmp	r2, r3
 8002716:	d901      	bls.n	800271c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e03e      	b.n	800279a <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800271c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002720:	2b00      	cmp	r3, #0
 8002722:	da0e      	bge.n	8002742 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002724:	78fb      	ldrb	r3, [r7, #3]
 8002726:	f003 0307 	and.w	r3, r3, #7
 800272a:	1c5a      	adds	r2, r3, #1
 800272c:	4613      	mov	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4413      	add	r3, r2
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	4413      	add	r3, r2
 8002738:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2201      	movs	r2, #1
 800273e:	705a      	strb	r2, [r3, #1]
 8002740:	e00c      	b.n	800275c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002742:	78fa      	ldrb	r2, [r7, #3]
 8002744:	4613      	mov	r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	4413      	add	r3, r2
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	4413      	add	r3, r2
 8002754:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2200      	movs	r2, #0
 800275a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2201      	movs	r2, #1
 8002760:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002762:	78fb      	ldrb	r3, [r7, #3]
 8002764:	f003 0307 	and.w	r3, r3, #7
 8002768:	b2da      	uxtb	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002774:	2b01      	cmp	r3, #1
 8002776:	d101      	bne.n	800277c <HAL_PCD_EP_SetStall+0x7e>
 8002778:	2302      	movs	r3, #2
 800277a:	e00e      	b.n	800279a <HAL_PCD_EP_SetStall+0x9c>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68f9      	ldr	r1, [r7, #12]
 800278a:	4618      	mov	r0, r3
 800278c:	f005 fde3 	bl	8008356 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b084      	sub	sp, #16
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
 80027aa:	460b      	mov	r3, r1
 80027ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80027ae:	78fb      	ldrb	r3, [r7, #3]
 80027b0:	f003 020f 	and.w	r2, r3, #15
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d901      	bls.n	80027c0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e040      	b.n	8002842 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80027c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	da0e      	bge.n	80027e6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027c8:	78fb      	ldrb	r3, [r7, #3]
 80027ca:	f003 0307 	and.w	r3, r3, #7
 80027ce:	1c5a      	adds	r2, r3, #1
 80027d0:	4613      	mov	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4413      	add	r3, r2
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	4413      	add	r3, r2
 80027dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2201      	movs	r2, #1
 80027e2:	705a      	strb	r2, [r3, #1]
 80027e4:	e00e      	b.n	8002804 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027e6:	78fb      	ldrb	r3, [r7, #3]
 80027e8:	f003 0207 	and.w	r2, r3, #7
 80027ec:	4613      	mov	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4413      	add	r3, r2
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	4413      	add	r3, r2
 80027fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2200      	movs	r2, #0
 8002802:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800280a:	78fb      	ldrb	r3, [r7, #3]
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	b2da      	uxtb	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800281c:	2b01      	cmp	r3, #1
 800281e:	d101      	bne.n	8002824 <HAL_PCD_EP_ClrStall+0x82>
 8002820:	2302      	movs	r3, #2
 8002822:	e00e      	b.n	8002842 <HAL_PCD_EP_ClrStall+0xa0>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68f9      	ldr	r1, [r7, #12]
 8002832:	4618      	mov	r0, r3
 8002834:	f005 fde0 	bl	80083f8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3710      	adds	r7, #16
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b096      	sub	sp, #88	; 0x58
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002852:	e39c      	b.n	8002f8e <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800285c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002860:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002864:	b2db      	uxtb	r3, r3
 8002866:	f003 030f 	and.w	r3, r3, #15
 800286a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 800286e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002872:	2b00      	cmp	r3, #0
 8002874:	f040 815e 	bne.w	8002b34 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002878:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800287c:	f003 0310 	and.w	r3, r3, #16
 8002880:	2b00      	cmp	r3, #0
 8002882:	d150      	bne.n	8002926 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	881b      	ldrh	r3, [r3, #0]
 800288a:	b29b      	uxth	r3, r3
 800288c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002890:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002894:	81fb      	strh	r3, [r7, #14]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	89fb      	ldrh	r3, [r7, #14]
 800289c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3328      	adds	r3, #40	; 0x28
 80028ac:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	461a      	mov	r2, r3
 80028ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	4413      	add	r3, r2
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	6812      	ldr	r2, [r2, #0]
 80028c6:	4413      	add	r3, r2
 80028c8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80028cc:	881b      	ldrh	r3, [r3, #0]
 80028ce:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80028d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028d4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80028d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028d8:	695a      	ldr	r2, [r3, #20]
 80028da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	441a      	add	r2, r3
 80028e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028e2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80028e4:	2100      	movs	r1, #0
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f007 fdb5 	bl	800a456 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f000 834a 	beq.w	8002f8e <PCD_EP_ISR_Handler+0x744>
 80028fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f040 8345 	bne.w	8002f8e <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800290a:	b2db      	uxtb	r3, r3
 800290c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002910:	b2da      	uxtb	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	b292      	uxth	r2, r2
 8002918:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002924:	e333      	b.n	8002f8e <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800292c:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	881b      	ldrh	r3, [r3, #0]
 8002934:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002938:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800293c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002940:	2b00      	cmp	r3, #0
 8002942:	d032      	beq.n	80029aa <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800294c:	b29b      	uxth	r3, r3
 800294e:	461a      	mov	r2, r3
 8002950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	4413      	add	r3, r2
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	6812      	ldr	r2, [r2, #0]
 800295c:	4413      	add	r3, r2
 800295e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002962:	881b      	ldrh	r3, [r3, #0]
 8002964:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002968:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800296a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6818      	ldr	r0, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002976:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002978:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800297a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800297c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800297e:	b29b      	uxth	r3, r3
 8002980:	f005 fe65 	bl	800864e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	881b      	ldrh	r3, [r3, #0]
 800298a:	b29a      	uxth	r2, r3
 800298c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002990:	4013      	ands	r3, r2
 8002992:	823b      	strh	r3, [r7, #16]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	8a3a      	ldrh	r2, [r7, #16]
 800299a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800299e:	b292      	uxth	r2, r2
 80029a0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f007 fd2a 	bl	800a3fc <HAL_PCD_SetupStageCallback>
 80029a8:	e2f1      	b.n	8002f8e <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80029aa:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f280 82ed 	bge.w	8002f8e <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	881b      	ldrh	r3, [r3, #0]
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80029c0:	4013      	ands	r3, r2
 80029c2:	83fb      	strh	r3, [r7, #30]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	8bfa      	ldrh	r2, [r7, #30]
 80029ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80029ce:	b292      	uxth	r2, r2
 80029d0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029da:	b29b      	uxth	r3, r3
 80029dc:	461a      	mov	r2, r3
 80029de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	4413      	add	r3, r2
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	6812      	ldr	r2, [r2, #0]
 80029ea:	4413      	add	r3, r2
 80029ec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80029f0:	881b      	ldrh	r3, [r3, #0]
 80029f2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80029f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029f8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80029fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d019      	beq.n	8002a36 <PCD_EP_ISR_Handler+0x1ec>
 8002a02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d015      	beq.n	8002a36 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6818      	ldr	r0, [r3, #0]
 8002a0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a10:	6959      	ldr	r1, [r3, #20]
 8002a12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a14:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002a16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a18:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	f005 fe17 	bl	800864e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002a20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a22:	695a      	ldr	r2, [r3, #20]
 8002a24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a26:	69db      	ldr	r3, [r3, #28]
 8002a28:	441a      	add	r2, r3
 8002a2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a2c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002a2e:	2100      	movs	r1, #0
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f007 fcf5 	bl	800a420 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	881b      	ldrh	r3, [r3, #0]
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f040 82a3 	bne.w	8002f8e <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	61bb      	str	r3, [r7, #24]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	461a      	mov	r2, r3
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	61bb      	str	r3, [r7, #24]
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a66:	617b      	str	r3, [r7, #20]
 8002a68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	2b3e      	cmp	r3, #62	; 0x3e
 8002a6e:	d918      	bls.n	8002aa2 <PCD_EP_ISR_Handler+0x258>
 8002a70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	095b      	lsrs	r3, r3, #5
 8002a76:	647b      	str	r3, [r7, #68]	; 0x44
 8002a78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	f003 031f 	and.w	r3, r3, #31
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d102      	bne.n	8002a8a <PCD_EP_ISR_Handler+0x240>
 8002a84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a86:	3b01      	subs	r3, #1
 8002a88:	647b      	str	r3, [r7, #68]	; 0x44
 8002a8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	029b      	lsls	r3, r3, #10
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	801a      	strh	r2, [r3, #0]
 8002aa0:	e029      	b.n	8002af6 <PCD_EP_ISR_Handler+0x2ac>
 8002aa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d112      	bne.n	8002ad0 <PCD_EP_ISR_Handler+0x286>
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	881b      	ldrh	r3, [r3, #0]
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	801a      	strh	r2, [r3, #0]
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	881b      	ldrh	r3, [r3, #0]
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ac4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ac8:	b29a      	uxth	r2, r3
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	801a      	strh	r2, [r3, #0]
 8002ace:	e012      	b.n	8002af6 <PCD_EP_ISR_Handler+0x2ac>
 8002ad0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	085b      	lsrs	r3, r3, #1
 8002ad6:	647b      	str	r3, [r7, #68]	; 0x44
 8002ad8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d002      	beq.n	8002aea <PCD_EP_ISR_Handler+0x2a0>
 8002ae4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	647b      	str	r3, [r7, #68]	; 0x44
 8002aea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	029b      	lsls	r3, r3, #10
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	881b      	ldrh	r3, [r3, #0]
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b06:	827b      	strh	r3, [r7, #18]
 8002b08:	8a7b      	ldrh	r3, [r7, #18]
 8002b0a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002b0e:	827b      	strh	r3, [r7, #18]
 8002b10:	8a7b      	ldrh	r3, [r7, #18]
 8002b12:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b16:	827b      	strh	r3, [r7, #18]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	8a7b      	ldrh	r3, [r7, #18]
 8002b1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	8013      	strh	r3, [r2, #0]
 8002b32:	e22c      	b.n	8002f8e <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	461a      	mov	r2, r3
 8002b3a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	881b      	ldrh	r3, [r3, #0]
 8002b44:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002b48:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f280 80f6 	bge.w	8002d3e <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	461a      	mov	r2, r3
 8002b58:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4413      	add	r3, r2
 8002b60:	881b      	ldrh	r3, [r3, #0]
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002b68:	4013      	ands	r3, r2
 8002b6a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	461a      	mov	r2, r3
 8002b74:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4413      	add	r3, r2
 8002b7c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002b80:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b84:	b292      	uxth	r2, r2
 8002b86:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002b88:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	4413      	add	r3, r2
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002b9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ba0:	7b1b      	ldrb	r3, [r3, #12]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d123      	bne.n	8002bee <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	4413      	add	r3, r2
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	6812      	ldr	r2, [r2, #0]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002bc4:	881b      	ldrh	r3, [r3, #0]
 8002bc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bca:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8002bce:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f000 808e 	beq.w	8002cf4 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6818      	ldr	r0, [r3, #0]
 8002bdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bde:	6959      	ldr	r1, [r3, #20]
 8002be0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002be2:	88da      	ldrh	r2, [r3, #6]
 8002be4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002be8:	f005 fd31 	bl	800864e <USB_ReadPMA>
 8002bec:	e082      	b.n	8002cf4 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bf0:	78db      	ldrb	r3, [r3, #3]
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d10a      	bne.n	8002c0c <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002bf6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 f9d3 	bl	8002faa <HAL_PCD_EP_DB_Receive>
 8002c04:	4603      	mov	r3, r0
 8002c06:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002c0a:	e073      	b.n	8002cf4 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	461a      	mov	r2, r3
 8002c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4413      	add	r3, r2
 8002c1a:	881b      	ldrh	r3, [r3, #0]
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c26:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	441a      	add	r2, r3
 8002c38:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002c3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c48:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	461a      	mov	r2, r3
 8002c56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	4413      	add	r3, r2
 8002c5e:	881b      	ldrh	r3, [r3, #0]
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d022      	beq.n	8002cb0 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	461a      	mov	r2, r3
 8002c76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	4413      	add	r3, r2
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	6812      	ldr	r2, [r2, #0]
 8002c82:	4413      	add	r3, r2
 8002c84:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c88:	881b      	ldrh	r3, [r3, #0]
 8002c8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c8e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8002c92:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d02c      	beq.n	8002cf4 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6818      	ldr	r0, [r3, #0]
 8002c9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ca0:	6959      	ldr	r1, [r3, #20]
 8002ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ca4:	891a      	ldrh	r2, [r3, #8]
 8002ca6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002caa:	f005 fcd0 	bl	800864e <USB_ReadPMA>
 8002cae:	e021      	b.n	8002cf4 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	461a      	mov	r2, r3
 8002cbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	00db      	lsls	r3, r3, #3
 8002cc2:	4413      	add	r3, r2
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	6812      	ldr	r2, [r2, #0]
 8002cc8:	4413      	add	r3, r2
 8002cca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002cce:	881b      	ldrh	r3, [r3, #0]
 8002cd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cd4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8002cd8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d009      	beq.n	8002cf4 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6818      	ldr	r0, [r3, #0]
 8002ce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ce6:	6959      	ldr	r1, [r3, #20]
 8002ce8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cea:	895a      	ldrh	r2, [r3, #10]
 8002cec:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002cf0:	f005 fcad 	bl	800864e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002cf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cf6:	69da      	ldr	r2, [r3, #28]
 8002cf8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002cfc:	441a      	add	r2, r3
 8002cfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d00:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002d02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d04:	695a      	ldr	r2, [r3, #20]
 8002d06:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002d0a:	441a      	add	r2, r3
 8002d0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d0e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002d10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d005      	beq.n	8002d24 <PCD_EP_ISR_Handler+0x4da>
 8002d18:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002d1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d206      	bcs.n	8002d32 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002d24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	4619      	mov	r1, r3
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f007 fb78 	bl	800a420 <HAL_PCD_DataOutStageCallback>
 8002d30:	e005      	b.n	8002d3e <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f003 ffd6 	bl	8006cea <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002d3e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f000 8121 	beq.w	8002f8e <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8002d4c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002d50:	1c5a      	adds	r2, r3, #1
 8002d52:	4613      	mov	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4413      	add	r3, r2
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	461a      	mov	r2, r3
 8002d66:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	4413      	add	r3, r2
 8002d6e:	881b      	ldrh	r3, [r3, #0]
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d7a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	461a      	mov	r2, r3
 8002d84:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	441a      	add	r2, r3
 8002d8c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002d90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8002d9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d9e:	78db      	ldrb	r3, [r3, #3]
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	f000 80a2 	beq.w	8002eea <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 8002da6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002da8:	2200      	movs	r2, #0
 8002daa:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002dac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dae:	7b1b      	ldrb	r3, [r3, #12]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f000 8093 	beq.w	8002edc <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002db6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d046      	beq.n	8002e50 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002dc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dc4:	785b      	ldrb	r3, [r3, #1]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d126      	bne.n	8002e18 <PCD_EP_ISR_Handler+0x5ce>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	627b      	str	r3, [r7, #36]	; 0x24
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	461a      	mov	r2, r3
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dde:	4413      	add	r3, r2
 8002de0:	627b      	str	r3, [r7, #36]	; 0x24
 8002de2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	00da      	lsls	r2, r3, #3
 8002de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dea:	4413      	add	r3, r2
 8002dec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002df0:	623b      	str	r3, [r7, #32]
 8002df2:	6a3b      	ldr	r3, [r7, #32]
 8002df4:	881b      	ldrh	r3, [r3, #0]
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	6a3b      	ldr	r3, [r7, #32]
 8002e00:	801a      	strh	r2, [r3, #0]
 8002e02:	6a3b      	ldr	r3, [r7, #32]
 8002e04:	881b      	ldrh	r3, [r3, #0]
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	6a3b      	ldr	r3, [r7, #32]
 8002e14:	801a      	strh	r2, [r3, #0]
 8002e16:	e061      	b.n	8002edc <PCD_EP_ISR_Handler+0x692>
 8002e18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e1a:	785b      	ldrb	r3, [r3, #1]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d15d      	bne.n	8002edc <PCD_EP_ISR_Handler+0x692>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	461a      	mov	r2, r3
 8002e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e34:	4413      	add	r3, r2
 8002e36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	00da      	lsls	r2, r3, #3
 8002e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e40:	4413      	add	r3, r2
 8002e42:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e46:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	801a      	strh	r2, [r3, #0]
 8002e4e:	e045      	b.n	8002edc <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e58:	785b      	ldrb	r3, [r3, #1]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d126      	bne.n	8002eac <PCD_EP_ISR_Handler+0x662>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	637b      	str	r3, [r7, #52]	; 0x34
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	461a      	mov	r2, r3
 8002e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e72:	4413      	add	r3, r2
 8002e74:	637b      	str	r3, [r7, #52]	; 0x34
 8002e76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	00da      	lsls	r2, r3, #3
 8002e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e7e:	4413      	add	r3, r2
 8002e80:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e84:	633b      	str	r3, [r7, #48]	; 0x30
 8002e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e88:	881b      	ldrh	r3, [r3, #0]
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e94:	801a      	strh	r2, [r3, #0]
 8002e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e98:	881b      	ldrh	r3, [r3, #0]
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ea0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ea4:	b29a      	uxth	r2, r3
 8002ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea8:	801a      	strh	r2, [r3, #0]
 8002eaa:	e017      	b.n	8002edc <PCD_EP_ISR_Handler+0x692>
 8002eac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eae:	785b      	ldrb	r3, [r3, #1]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d113      	bne.n	8002edc <PCD_EP_ISR_Handler+0x692>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ec2:	4413      	add	r3, r2
 8002ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	00da      	lsls	r2, r3, #3
 8002ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ece:	4413      	add	r3, r2
 8002ed0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ed4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ed8:	2200      	movs	r2, #0
 8002eda:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002edc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f007 fab7 	bl	800a456 <HAL_PCD_DataInStageCallback>
 8002ee8:	e051      	b.n	8002f8e <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002eea:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d144      	bne.n	8002f80 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	461a      	mov	r2, r3
 8002f02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	4413      	add	r3, r2
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	6812      	ldr	r2, [r2, #0]
 8002f0e:	4413      	add	r3, r2
 8002f10:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f14:	881b      	ldrh	r3, [r3, #0]
 8002f16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f1a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002f1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f20:	699a      	ldr	r2, [r3, #24]
 8002f22:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d907      	bls.n	8002f3a <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8002f2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f2c:	699a      	ldr	r2, [r3, #24]
 8002f2e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002f32:	1ad2      	subs	r2, r2, r3
 8002f34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f36:	619a      	str	r2, [r3, #24]
 8002f38:	e002      	b.n	8002f40 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8002f3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002f40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d106      	bne.n	8002f56 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002f48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f007 fa81 	bl	800a456 <HAL_PCD_DataInStageCallback>
 8002f54:	e01b      	b.n	8002f8e <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002f56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f58:	695a      	ldr	r2, [r3, #20]
 8002f5a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002f5e:	441a      	add	r2, r3
 8002f60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f62:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002f64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f66:	69da      	ldr	r2, [r3, #28]
 8002f68:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002f6c:	441a      	add	r2, r3
 8002f6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f70:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f003 feb6 	bl	8006cea <USB_EPStartXfer>
 8002f7e:	e006      	b.n	8002f8e <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002f80:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002f84:	461a      	mov	r2, r3
 8002f86:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f000 f917 	bl	80031bc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	b21b      	sxth	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f6ff ac5a 	blt.w	8002854 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3758      	adds	r7, #88	; 0x58
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b088      	sub	sp, #32
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	60f8      	str	r0, [r7, #12]
 8002fb2:	60b9      	str	r1, [r7, #8]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002fb8:	88fb      	ldrh	r3, [r7, #6]
 8002fba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d07c      	beq.n	80030bc <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	461a      	mov	r2, r3
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	4413      	add	r3, r2
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	6812      	ldr	r2, [r2, #0]
 8002fda:	4413      	add	r3, r2
 8002fdc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002fe0:	881b      	ldrh	r3, [r3, #0]
 8002fe2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fe6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	699a      	ldr	r2, [r3, #24]
 8002fec:	8b7b      	ldrh	r3, [r7, #26]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d306      	bcc.n	8003000 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	699a      	ldr	r2, [r3, #24]
 8002ff6:	8b7b      	ldrh	r3, [r7, #26]
 8002ff8:	1ad2      	subs	r2, r2, r3
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	619a      	str	r2, [r3, #24]
 8002ffe:	e002      	b.n	8003006 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	2200      	movs	r2, #0
 8003004:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d123      	bne.n	8003056 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	461a      	mov	r2, r3
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	4413      	add	r3, r2
 800301c:	881b      	ldrh	r3, [r3, #0]
 800301e:	b29b      	uxth	r3, r3
 8003020:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003024:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003028:	833b      	strh	r3, [r7, #24]
 800302a:	8b3b      	ldrh	r3, [r7, #24]
 800302c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003030:	833b      	strh	r3, [r7, #24]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	461a      	mov	r2, r3
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	441a      	add	r2, r3
 8003040:	8b3b      	ldrh	r3, [r7, #24]
 8003042:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003046:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800304a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800304e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003052:	b29b      	uxth	r3, r3
 8003054:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003056:	88fb      	ldrh	r3, [r7, #6]
 8003058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800305c:	2b00      	cmp	r3, #0
 800305e:	d01f      	beq.n	80030a0 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	461a      	mov	r2, r3
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	4413      	add	r3, r2
 800306e:	881b      	ldrh	r3, [r3, #0]
 8003070:	b29b      	uxth	r3, r3
 8003072:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800307a:	82fb      	strh	r3, [r7, #22]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	461a      	mov	r2, r3
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	441a      	add	r2, r3
 800308a:	8afb      	ldrh	r3, [r7, #22]
 800308c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003090:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003094:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003098:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800309c:	b29b      	uxth	r3, r3
 800309e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80030a0:	8b7b      	ldrh	r3, [r7, #26]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f000 8085 	beq.w	80031b2 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6818      	ldr	r0, [r3, #0]
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	6959      	ldr	r1, [r3, #20]
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	891a      	ldrh	r2, [r3, #8]
 80030b4:	8b7b      	ldrh	r3, [r7, #26]
 80030b6:	f005 faca 	bl	800864e <USB_ReadPMA>
 80030ba:	e07a      	b.n	80031b2 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	461a      	mov	r2, r3
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	4413      	add	r3, r2
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	6812      	ldr	r2, [r2, #0]
 80030d4:	4413      	add	r3, r2
 80030d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80030da:	881b      	ldrh	r3, [r3, #0]
 80030dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030e0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	699a      	ldr	r2, [r3, #24]
 80030e6:	8b7b      	ldrh	r3, [r7, #26]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d306      	bcc.n	80030fa <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	699a      	ldr	r2, [r3, #24]
 80030f0:	8b7b      	ldrh	r3, [r7, #26]
 80030f2:	1ad2      	subs	r2, r2, r3
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	619a      	str	r2, [r3, #24]
 80030f8:	e002      	b.n	8003100 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	2200      	movs	r2, #0
 80030fe:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d123      	bne.n	8003150 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	461a      	mov	r2, r3
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4413      	add	r3, r2
 8003116:	881b      	ldrh	r3, [r3, #0]
 8003118:	b29b      	uxth	r3, r3
 800311a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800311e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003122:	83fb      	strh	r3, [r7, #30]
 8003124:	8bfb      	ldrh	r3, [r7, #30]
 8003126:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800312a:	83fb      	strh	r3, [r7, #30]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	461a      	mov	r2, r3
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	441a      	add	r2, r3
 800313a:	8bfb      	ldrh	r3, [r7, #30]
 800313c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003140:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003144:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800314c:	b29b      	uxth	r3, r3
 800314e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003150:	88fb      	ldrh	r3, [r7, #6]
 8003152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003156:	2b00      	cmp	r3, #0
 8003158:	d11f      	bne.n	800319a <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	461a      	mov	r2, r3
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	4413      	add	r3, r2
 8003168:	881b      	ldrh	r3, [r3, #0]
 800316a:	b29b      	uxth	r3, r3
 800316c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003170:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003174:	83bb      	strh	r3, [r7, #28]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	461a      	mov	r2, r3
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	441a      	add	r2, r3
 8003184:	8bbb      	ldrh	r3, [r7, #28]
 8003186:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800318a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800318e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003192:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003196:	b29b      	uxth	r3, r3
 8003198:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800319a:	8b7b      	ldrh	r3, [r7, #26]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d008      	beq.n	80031b2 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6818      	ldr	r0, [r3, #0]
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	6959      	ldr	r1, [r3, #20]
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	895a      	ldrh	r2, [r3, #10]
 80031ac:	8b7b      	ldrh	r3, [r7, #26]
 80031ae:	f005 fa4e 	bl	800864e <USB_ReadPMA>
    }
  }

  return count;
 80031b2:	8b7b      	ldrh	r3, [r7, #26]
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3720      	adds	r7, #32
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b0a2      	sub	sp, #136	; 0x88
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	4613      	mov	r3, r2
 80031c8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80031ca:	88fb      	ldrh	r3, [r7, #6]
 80031cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f000 81c5 	beq.w	8003560 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031de:	b29b      	uxth	r3, r3
 80031e0:	461a      	mov	r2, r3
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	4413      	add	r3, r2
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	6812      	ldr	r2, [r2, #0]
 80031ee:	4413      	add	r3, r2
 80031f0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80031f4:	881b      	ldrh	r3, [r3, #0]
 80031f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031fa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	699a      	ldr	r2, [r3, #24]
 8003202:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003206:	429a      	cmp	r2, r3
 8003208:	d907      	bls.n	800321a <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	699a      	ldr	r2, [r3, #24]
 800320e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003212:	1ad2      	subs	r2, r2, r3
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	619a      	str	r2, [r3, #24]
 8003218:	e002      	b.n	8003220 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	2200      	movs	r2, #0
 800321e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	2b00      	cmp	r3, #0
 8003226:	f040 80b9 	bne.w	800339c <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	785b      	ldrb	r3, [r3, #1]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d126      	bne.n	8003280 <HAL_PCD_EP_DB_Transmit+0xc4>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	62bb      	str	r3, [r7, #40]	; 0x28
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003240:	b29b      	uxth	r3, r3
 8003242:	461a      	mov	r2, r3
 8003244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003246:	4413      	add	r3, r2
 8003248:	62bb      	str	r3, [r7, #40]	; 0x28
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	00da      	lsls	r2, r3, #3
 8003250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003252:	4413      	add	r3, r2
 8003254:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003258:	627b      	str	r3, [r7, #36]	; 0x24
 800325a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325c:	881b      	ldrh	r3, [r3, #0]
 800325e:	b29b      	uxth	r3, r3
 8003260:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003264:	b29a      	uxth	r2, r3
 8003266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003268:	801a      	strh	r2, [r3, #0]
 800326a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326c:	881b      	ldrh	r3, [r3, #0]
 800326e:	b29b      	uxth	r3, r3
 8003270:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003274:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003278:	b29a      	uxth	r2, r3
 800327a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327c:	801a      	strh	r2, [r3, #0]
 800327e:	e01a      	b.n	80032b6 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	785b      	ldrb	r3, [r3, #1]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d116      	bne.n	80032b6 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	633b      	str	r3, [r7, #48]	; 0x30
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003296:	b29b      	uxth	r3, r3
 8003298:	461a      	mov	r2, r3
 800329a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800329c:	4413      	add	r3, r2
 800329e:	633b      	str	r3, [r7, #48]	; 0x30
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	00da      	lsls	r2, r3, #3
 80032a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a8:	4413      	add	r3, r2
 80032aa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80032ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b2:	2200      	movs	r2, #0
 80032b4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	623b      	str	r3, [r7, #32]
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	785b      	ldrb	r3, [r3, #1]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d126      	bne.n	8003312 <HAL_PCD_EP_DB_Transmit+0x156>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	61bb      	str	r3, [r7, #24]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	461a      	mov	r2, r3
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	4413      	add	r3, r2
 80032da:	61bb      	str	r3, [r7, #24]
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	00da      	lsls	r2, r3, #3
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	4413      	add	r3, r2
 80032e6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80032ea:	617b      	str	r3, [r7, #20]
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	881b      	ldrh	r3, [r3, #0]
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	801a      	strh	r2, [r3, #0]
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	881b      	ldrh	r3, [r3, #0]
 8003300:	b29b      	uxth	r3, r3
 8003302:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003306:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800330a:	b29a      	uxth	r2, r3
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	801a      	strh	r2, [r3, #0]
 8003310:	e017      	b.n	8003342 <HAL_PCD_EP_DB_Transmit+0x186>
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	785b      	ldrb	r3, [r3, #1]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d113      	bne.n	8003342 <HAL_PCD_EP_DB_Transmit+0x186>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003322:	b29b      	uxth	r3, r3
 8003324:	461a      	mov	r2, r3
 8003326:	6a3b      	ldr	r3, [r7, #32]
 8003328:	4413      	add	r3, r2
 800332a:	623b      	str	r3, [r7, #32]
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	00da      	lsls	r2, r3, #3
 8003332:	6a3b      	ldr	r3, [r7, #32]
 8003334:	4413      	add	r3, r2
 8003336:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800333a:	61fb      	str	r3, [r7, #28]
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	2200      	movs	r2, #0
 8003340:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	4619      	mov	r1, r3
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	f007 f884 	bl	800a456 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800334e:	88fb      	ldrh	r3, [r7, #6]
 8003350:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003354:	2b00      	cmp	r3, #0
 8003356:	f000 82d2 	beq.w	80038fe <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	461a      	mov	r2, r3
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	4413      	add	r3, r2
 8003368:	881b      	ldrh	r3, [r3, #0]
 800336a:	b29b      	uxth	r3, r3
 800336c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003370:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003374:	827b      	strh	r3, [r7, #18]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	461a      	mov	r2, r3
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	441a      	add	r2, r3
 8003384:	8a7b      	ldrh	r3, [r7, #18]
 8003386:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800338a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800338e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003396:	b29b      	uxth	r3, r3
 8003398:	8013      	strh	r3, [r2, #0]
 800339a:	e2b0      	b.n	80038fe <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800339c:	88fb      	ldrh	r3, [r7, #6]
 800339e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d021      	beq.n	80033ea <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	461a      	mov	r2, r3
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4413      	add	r3, r2
 80033b4:	881b      	ldrh	r3, [r3, #0]
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033c0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	461a      	mov	r2, r3
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	441a      	add	r2, r3
 80033d2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80033d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	f040 8284 	bne.w	80038fe <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	695a      	ldr	r2, [r3, #20]
 80033fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80033fe:	441a      	add	r2, r3
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	69da      	ldr	r2, [r3, #28]
 8003408:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800340c:	441a      	add	r2, r3
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	6a1a      	ldr	r2, [r3, #32]
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	429a      	cmp	r2, r3
 800341c:	d309      	bcc.n	8003432 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	6a1a      	ldr	r2, [r3, #32]
 8003428:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800342a:	1ad2      	subs	r2, r2, r3
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	621a      	str	r2, [r3, #32]
 8003430:	e015      	b.n	800345e <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d107      	bne.n	800344a <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 800343a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800343e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003448:	e009      	b.n	800345e <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	2200      	movs	r2, #0
 800345c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	785b      	ldrb	r3, [r3, #1]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d155      	bne.n	8003512 <HAL_PCD_EP_DB_Transmit+0x356>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	63bb      	str	r3, [r7, #56]	; 0x38
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003474:	b29b      	uxth	r3, r3
 8003476:	461a      	mov	r2, r3
 8003478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800347a:	4413      	add	r3, r2
 800347c:	63bb      	str	r3, [r7, #56]	; 0x38
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	00da      	lsls	r2, r3, #3
 8003484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003486:	4413      	add	r3, r2
 8003488:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800348c:	637b      	str	r3, [r7, #52]	; 0x34
 800348e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003490:	2b3e      	cmp	r3, #62	; 0x3e
 8003492:	d916      	bls.n	80034c2 <HAL_PCD_EP_DB_Transmit+0x306>
 8003494:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003496:	095b      	lsrs	r3, r3, #5
 8003498:	64bb      	str	r3, [r7, #72]	; 0x48
 800349a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800349c:	f003 031f 	and.w	r3, r3, #31
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d102      	bne.n	80034aa <HAL_PCD_EP_DB_Transmit+0x2ee>
 80034a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034a6:	3b01      	subs	r3, #1
 80034a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80034aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	029b      	lsls	r3, r3, #10
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034be:	801a      	strh	r2, [r3, #0]
 80034c0:	e043      	b.n	800354a <HAL_PCD_EP_DB_Transmit+0x38e>
 80034c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d112      	bne.n	80034ee <HAL_PCD_EP_DB_Transmit+0x332>
 80034c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ca:	881b      	ldrh	r3, [r3, #0]
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034d6:	801a      	strh	r2, [r3, #0]
 80034d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034da:	881b      	ldrh	r3, [r3, #0]
 80034dc:	b29b      	uxth	r3, r3
 80034de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ea:	801a      	strh	r2, [r3, #0]
 80034ec:	e02d      	b.n	800354a <HAL_PCD_EP_DB_Transmit+0x38e>
 80034ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034f0:	085b      	lsrs	r3, r3, #1
 80034f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80034f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d002      	beq.n	8003504 <HAL_PCD_EP_DB_Transmit+0x348>
 80034fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003500:	3301      	adds	r3, #1
 8003502:	64bb      	str	r3, [r7, #72]	; 0x48
 8003504:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003506:	b29b      	uxth	r3, r3
 8003508:	029b      	lsls	r3, r3, #10
 800350a:	b29a      	uxth	r2, r3
 800350c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800350e:	801a      	strh	r2, [r3, #0]
 8003510:	e01b      	b.n	800354a <HAL_PCD_EP_DB_Transmit+0x38e>
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	785b      	ldrb	r3, [r3, #1]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d117      	bne.n	800354a <HAL_PCD_EP_DB_Transmit+0x38e>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	643b      	str	r3, [r7, #64]	; 0x40
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003528:	b29b      	uxth	r3, r3
 800352a:	461a      	mov	r2, r3
 800352c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800352e:	4413      	add	r3, r2
 8003530:	643b      	str	r3, [r7, #64]	; 0x40
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	00da      	lsls	r2, r3, #3
 8003538:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800353a:	4413      	add	r3, r2
 800353c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003540:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003542:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003544:	b29a      	uxth	r2, r3
 8003546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003548:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6818      	ldr	r0, [r3, #0]
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	6959      	ldr	r1, [r3, #20]
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	891a      	ldrh	r2, [r3, #8]
 8003556:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003558:	b29b      	uxth	r3, r3
 800355a:	f005 f836 	bl	80085ca <USB_WritePMA>
 800355e:	e1ce      	b.n	80038fe <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003568:	b29b      	uxth	r3, r3
 800356a:	461a      	mov	r2, r3
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	00db      	lsls	r3, r3, #3
 8003572:	4413      	add	r3, r2
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	6812      	ldr	r2, [r2, #0]
 8003578:	4413      	add	r3, r2
 800357a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800357e:	881b      	ldrh	r3, [r3, #0]
 8003580:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003584:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	699a      	ldr	r2, [r3, #24]
 800358c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003590:	429a      	cmp	r2, r3
 8003592:	d307      	bcc.n	80035a4 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	699a      	ldr	r2, [r3, #24]
 8003598:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800359c:	1ad2      	subs	r2, r2, r3
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	619a      	str	r2, [r3, #24]
 80035a2:	e002      	b.n	80035aa <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	2200      	movs	r2, #0
 80035a8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f040 80c4 	bne.w	800373c <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	785b      	ldrb	r3, [r3, #1]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d126      	bne.n	800360a <HAL_PCD_EP_DB_Transmit+0x44e>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	461a      	mov	r2, r3
 80035ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035d0:	4413      	add	r3, r2
 80035d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	00da      	lsls	r2, r3, #3
 80035da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035dc:	4413      	add	r3, r2
 80035de:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80035e2:	667b      	str	r3, [r7, #100]	; 0x64
 80035e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035e6:	881b      	ldrh	r3, [r3, #0]
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035f2:	801a      	strh	r2, [r3, #0]
 80035f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035f6:	881b      	ldrh	r3, [r3, #0]
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003602:	b29a      	uxth	r2, r3
 8003604:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003606:	801a      	strh	r2, [r3, #0]
 8003608:	e01a      	b.n	8003640 <HAL_PCD_EP_DB_Transmit+0x484>
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	785b      	ldrb	r3, [r3, #1]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d116      	bne.n	8003640 <HAL_PCD_EP_DB_Transmit+0x484>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	673b      	str	r3, [r7, #112]	; 0x70
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003620:	b29b      	uxth	r3, r3
 8003622:	461a      	mov	r2, r3
 8003624:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003626:	4413      	add	r3, r2
 8003628:	673b      	str	r3, [r7, #112]	; 0x70
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	00da      	lsls	r2, r3, #3
 8003630:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003632:	4413      	add	r3, r2
 8003634:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003638:	66fb      	str	r3, [r7, #108]	; 0x6c
 800363a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800363c:	2200      	movs	r2, #0
 800363e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	785b      	ldrb	r3, [r3, #1]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d12f      	bne.n	80036ae <HAL_PCD_EP_DB_Transmit+0x4f2>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800365e:	b29b      	uxth	r3, r3
 8003660:	461a      	mov	r2, r3
 8003662:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003666:	4413      	add	r3, r2
 8003668:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	00da      	lsls	r2, r3, #3
 8003672:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003676:	4413      	add	r3, r2
 8003678:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800367c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003680:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003684:	881b      	ldrh	r3, [r3, #0]
 8003686:	b29b      	uxth	r3, r3
 8003688:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800368c:	b29a      	uxth	r2, r3
 800368e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003692:	801a      	strh	r2, [r3, #0]
 8003694:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003698:	881b      	ldrh	r3, [r3, #0]
 800369a:	b29b      	uxth	r3, r3
 800369c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80036aa:	801a      	strh	r2, [r3, #0]
 80036ac:	e017      	b.n	80036de <HAL_PCD_EP_DB_Transmit+0x522>
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	785b      	ldrb	r3, [r3, #1]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d113      	bne.n	80036de <HAL_PCD_EP_DB_Transmit+0x522>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036be:	b29b      	uxth	r3, r3
 80036c0:	461a      	mov	r2, r3
 80036c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80036c4:	4413      	add	r3, r2
 80036c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	00da      	lsls	r2, r3, #3
 80036ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80036d0:	4413      	add	r3, r2
 80036d2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80036d6:	67bb      	str	r3, [r7, #120]	; 0x78
 80036d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036da:	2200      	movs	r2, #0
 80036dc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	4619      	mov	r1, r3
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f006 feb6 	bl	800a456 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80036ea:	88fb      	ldrh	r3, [r7, #6]
 80036ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	f040 8104 	bne.w	80038fe <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	461a      	mov	r2, r3
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	4413      	add	r3, r2
 8003704:	881b      	ldrh	r3, [r3, #0]
 8003706:	b29b      	uxth	r3, r3
 8003708:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800370c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003710:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	461a      	mov	r2, r3
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	441a      	add	r2, r3
 8003722:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003726:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800372a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800372e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003736:	b29b      	uxth	r3, r3
 8003738:	8013      	strh	r3, [r2, #0]
 800373a:	e0e0      	b.n	80038fe <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800373c:	88fb      	ldrh	r3, [r7, #6]
 800373e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d121      	bne.n	800378a <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	461a      	mov	r2, r3
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	4413      	add	r3, r2
 8003754:	881b      	ldrh	r3, [r3, #0]
 8003756:	b29b      	uxth	r3, r3
 8003758:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800375c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003760:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	461a      	mov	r2, r3
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	441a      	add	r2, r3
 8003772:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003776:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800377a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800377e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003786:	b29b      	uxth	r3, r3
 8003788:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003790:	2b01      	cmp	r3, #1
 8003792:	f040 80b4 	bne.w	80038fe <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	695a      	ldr	r2, [r3, #20]
 800379a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800379e:	441a      	add	r2, r3
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	69da      	ldr	r2, [r3, #28]
 80037a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80037ac:	441a      	add	r2, r3
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	6a1a      	ldr	r2, [r3, #32]
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d309      	bcc.n	80037d2 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	6a1a      	ldr	r2, [r3, #32]
 80037c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037ca:	1ad2      	subs	r2, r2, r3
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	621a      	str	r2, [r3, #32]
 80037d0:	e015      	b.n	80037fe <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	6a1b      	ldr	r3, [r3, #32]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d107      	bne.n	80037ea <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 80037da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80037de:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80037e8:	e009      	b.n	80037fe <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	2200      	movs	r2, #0
 80037f4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	663b      	str	r3, [r7, #96]	; 0x60
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	785b      	ldrb	r3, [r3, #1]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d155      	bne.n	80038b8 <HAL_PCD_EP_DB_Transmit+0x6fc>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	65bb      	str	r3, [r7, #88]	; 0x58
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800381a:	b29b      	uxth	r3, r3
 800381c:	461a      	mov	r2, r3
 800381e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003820:	4413      	add	r3, r2
 8003822:	65bb      	str	r3, [r7, #88]	; 0x58
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	00da      	lsls	r2, r3, #3
 800382a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800382c:	4413      	add	r3, r2
 800382e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003832:	657b      	str	r3, [r7, #84]	; 0x54
 8003834:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003836:	2b3e      	cmp	r3, #62	; 0x3e
 8003838:	d916      	bls.n	8003868 <HAL_PCD_EP_DB_Transmit+0x6ac>
 800383a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800383c:	095b      	lsrs	r3, r3, #5
 800383e:	677b      	str	r3, [r7, #116]	; 0x74
 8003840:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003842:	f003 031f 	and.w	r3, r3, #31
 8003846:	2b00      	cmp	r3, #0
 8003848:	d102      	bne.n	8003850 <HAL_PCD_EP_DB_Transmit+0x694>
 800384a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800384c:	3b01      	subs	r3, #1
 800384e:	677b      	str	r3, [r7, #116]	; 0x74
 8003850:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003852:	b29b      	uxth	r3, r3
 8003854:	029b      	lsls	r3, r3, #10
 8003856:	b29b      	uxth	r3, r3
 8003858:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800385c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003860:	b29a      	uxth	r2, r3
 8003862:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003864:	801a      	strh	r2, [r3, #0]
 8003866:	e040      	b.n	80038ea <HAL_PCD_EP_DB_Transmit+0x72e>
 8003868:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800386a:	2b00      	cmp	r3, #0
 800386c:	d112      	bne.n	8003894 <HAL_PCD_EP_DB_Transmit+0x6d8>
 800386e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003870:	881b      	ldrh	r3, [r3, #0]
 8003872:	b29b      	uxth	r3, r3
 8003874:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003878:	b29a      	uxth	r2, r3
 800387a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800387c:	801a      	strh	r2, [r3, #0]
 800387e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003880:	881b      	ldrh	r3, [r3, #0]
 8003882:	b29b      	uxth	r3, r3
 8003884:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003888:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800388c:	b29a      	uxth	r2, r3
 800388e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003890:	801a      	strh	r2, [r3, #0]
 8003892:	e02a      	b.n	80038ea <HAL_PCD_EP_DB_Transmit+0x72e>
 8003894:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003896:	085b      	lsrs	r3, r3, #1
 8003898:	677b      	str	r3, [r7, #116]	; 0x74
 800389a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800389c:	f003 0301 	and.w	r3, r3, #1
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d002      	beq.n	80038aa <HAL_PCD_EP_DB_Transmit+0x6ee>
 80038a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038a6:	3301      	adds	r3, #1
 80038a8:	677b      	str	r3, [r7, #116]	; 0x74
 80038aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	029b      	lsls	r3, r3, #10
 80038b0:	b29a      	uxth	r2, r3
 80038b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038b4:	801a      	strh	r2, [r3, #0]
 80038b6:	e018      	b.n	80038ea <HAL_PCD_EP_DB_Transmit+0x72e>
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	785b      	ldrb	r3, [r3, #1]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d114      	bne.n	80038ea <HAL_PCD_EP_DB_Transmit+0x72e>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	461a      	mov	r2, r3
 80038cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038ce:	4413      	add	r3, r2
 80038d0:	663b      	str	r3, [r7, #96]	; 0x60
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	00da      	lsls	r2, r3, #3
 80038d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038da:	4413      	add	r3, r2
 80038dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80038e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038e8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6818      	ldr	r0, [r3, #0]
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	6959      	ldr	r1, [r3, #20]
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	895a      	ldrh	r2, [r3, #10]
 80038f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	f004 fe66 	bl	80085ca <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	461a      	mov	r2, r3
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	4413      	add	r3, r2
 800390c:	881b      	ldrh	r3, [r3, #0]
 800390e:	b29b      	uxth	r3, r3
 8003910:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003914:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003918:	823b      	strh	r3, [r7, #16]
 800391a:	8a3b      	ldrh	r3, [r7, #16]
 800391c:	f083 0310 	eor.w	r3, r3, #16
 8003920:	823b      	strh	r3, [r7, #16]
 8003922:	8a3b      	ldrh	r3, [r7, #16]
 8003924:	f083 0320 	eor.w	r3, r3, #32
 8003928:	823b      	strh	r3, [r7, #16]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	461a      	mov	r2, r3
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	441a      	add	r2, r3
 8003938:	8a3b      	ldrh	r3, [r7, #16]
 800393a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800393e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003942:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003946:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800394a:	b29b      	uxth	r3, r3
 800394c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3788      	adds	r7, #136	; 0x88
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003958:	b480      	push	{r7}
 800395a:	b087      	sub	sp, #28
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	607b      	str	r3, [r7, #4]
 8003962:	460b      	mov	r3, r1
 8003964:	817b      	strh	r3, [r7, #10]
 8003966:	4613      	mov	r3, r2
 8003968:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800396a:	897b      	ldrh	r3, [r7, #10]
 800396c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003970:	b29b      	uxth	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00b      	beq.n	800398e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003976:	897b      	ldrh	r3, [r7, #10]
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	1c5a      	adds	r2, r3, #1
 800397e:	4613      	mov	r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	4413      	add	r3, r2
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	4413      	add	r3, r2
 800398a:	617b      	str	r3, [r7, #20]
 800398c:	e009      	b.n	80039a2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800398e:	897a      	ldrh	r2, [r7, #10]
 8003990:	4613      	mov	r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	4413      	add	r3, r2
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	4413      	add	r3, r2
 80039a0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80039a2:	893b      	ldrh	r3, [r7, #8]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d107      	bne.n	80039b8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	2200      	movs	r2, #0
 80039ac:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	80da      	strh	r2, [r3, #6]
 80039b6:	e00b      	b.n	80039d0 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	2201      	movs	r2, #1
 80039bc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	b29a      	uxth	r2, r3
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	0c1b      	lsrs	r3, r3, #16
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	371c      	adds	r7, #28
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr

080039de <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80039de:	b480      	push	{r7}
 80039e0:	b085      	sub	sp, #20
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	f043 0301 	orr.w	r3, r3, #1
 8003a08:	b29a      	uxth	r2, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	f043 0302 	orr.w	r3, r3, #2
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3714      	adds	r7, #20
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
	...

08003a34 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d141      	bne.n	8003ac6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a42:	4b4b      	ldr	r3, [pc, #300]	; (8003b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a4e:	d131      	bne.n	8003ab4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a50:	4b47      	ldr	r3, [pc, #284]	; (8003b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a56:	4a46      	ldr	r2, [pc, #280]	; (8003b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a60:	4b43      	ldr	r3, [pc, #268]	; (8003b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a68:	4a41      	ldr	r2, [pc, #260]	; (8003b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a6e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a70:	4b40      	ldr	r3, [pc, #256]	; (8003b74 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2232      	movs	r2, #50	; 0x32
 8003a76:	fb02 f303 	mul.w	r3, r2, r3
 8003a7a:	4a3f      	ldr	r2, [pc, #252]	; (8003b78 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a80:	0c9b      	lsrs	r3, r3, #18
 8003a82:	3301      	adds	r3, #1
 8003a84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a86:	e002      	b.n	8003a8e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a8e:	4b38      	ldr	r3, [pc, #224]	; (8003b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a9a:	d102      	bne.n	8003aa2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1f2      	bne.n	8003a88 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003aa2:	4b33      	ldr	r3, [pc, #204]	; (8003b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aae:	d158      	bne.n	8003b62 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e057      	b.n	8003b64 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ab4:	4b2e      	ldr	r3, [pc, #184]	; (8003b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003aba:	4a2d      	ldr	r2, [pc, #180]	; (8003b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003abc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ac0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003ac4:	e04d      	b.n	8003b62 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003acc:	d141      	bne.n	8003b52 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ace:	4b28      	ldr	r3, [pc, #160]	; (8003b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ad6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ada:	d131      	bne.n	8003b40 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003adc:	4b24      	ldr	r3, [pc, #144]	; (8003b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ade:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ae2:	4a23      	ldr	r2, [pc, #140]	; (8003b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ae8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003aec:	4b20      	ldr	r3, [pc, #128]	; (8003b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003af4:	4a1e      	ldr	r2, [pc, #120]	; (8003b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003af6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003afa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003afc:	4b1d      	ldr	r3, [pc, #116]	; (8003b74 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2232      	movs	r2, #50	; 0x32
 8003b02:	fb02 f303 	mul.w	r3, r2, r3
 8003b06:	4a1c      	ldr	r2, [pc, #112]	; (8003b78 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003b08:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0c:	0c9b      	lsrs	r3, r3, #18
 8003b0e:	3301      	adds	r3, #1
 8003b10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b12:	e002      	b.n	8003b1a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	3b01      	subs	r3, #1
 8003b18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b1a:	4b15      	ldr	r3, [pc, #84]	; (8003b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b26:	d102      	bne.n	8003b2e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1f2      	bne.n	8003b14 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b2e:	4b10      	ldr	r3, [pc, #64]	; (8003b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b3a:	d112      	bne.n	8003b62 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e011      	b.n	8003b64 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b40:	4b0b      	ldr	r3, [pc, #44]	; (8003b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b46:	4a0a      	ldr	r2, [pc, #40]	; (8003b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003b50:	e007      	b.n	8003b62 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003b52:	4b07      	ldr	r3, [pc, #28]	; (8003b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b5a:	4a05      	ldr	r2, [pc, #20]	; (8003b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b60:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3714      	adds	r7, #20
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr
 8003b70:	40007000 	.word	0x40007000
 8003b74:	20000000 	.word	0x20000000
 8003b78:	431bde83 	.word	0x431bde83

08003b7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b088      	sub	sp, #32
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e306      	b.n	800419c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d075      	beq.n	8003c86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b9a:	4b97      	ldr	r3, [pc, #604]	; (8003df8 <HAL_RCC_OscConfig+0x27c>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f003 030c 	and.w	r3, r3, #12
 8003ba2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ba4:	4b94      	ldr	r3, [pc, #592]	; (8003df8 <HAL_RCC_OscConfig+0x27c>)
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	f003 0303 	and.w	r3, r3, #3
 8003bac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	2b0c      	cmp	r3, #12
 8003bb2:	d102      	bne.n	8003bba <HAL_RCC_OscConfig+0x3e>
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	2b03      	cmp	r3, #3
 8003bb8:	d002      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x44>
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	2b08      	cmp	r3, #8
 8003bbe:	d10b      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bc0:	4b8d      	ldr	r3, [pc, #564]	; (8003df8 <HAL_RCC_OscConfig+0x27c>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d05b      	beq.n	8003c84 <HAL_RCC_OscConfig+0x108>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d157      	bne.n	8003c84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e2e1      	b.n	800419c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003be0:	d106      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x74>
 8003be2:	4b85      	ldr	r3, [pc, #532]	; (8003df8 <HAL_RCC_OscConfig+0x27c>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a84      	ldr	r2, [pc, #528]	; (8003df8 <HAL_RCC_OscConfig+0x27c>)
 8003be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bec:	6013      	str	r3, [r2, #0]
 8003bee:	e01d      	b.n	8003c2c <HAL_RCC_OscConfig+0xb0>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bf8:	d10c      	bne.n	8003c14 <HAL_RCC_OscConfig+0x98>
 8003bfa:	4b7f      	ldr	r3, [pc, #508]	; (8003df8 <HAL_RCC_OscConfig+0x27c>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a7e      	ldr	r2, [pc, #504]	; (8003df8 <HAL_RCC_OscConfig+0x27c>)
 8003c00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c04:	6013      	str	r3, [r2, #0]
 8003c06:	4b7c      	ldr	r3, [pc, #496]	; (8003df8 <HAL_RCC_OscConfig+0x27c>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a7b      	ldr	r2, [pc, #492]	; (8003df8 <HAL_RCC_OscConfig+0x27c>)
 8003c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c10:	6013      	str	r3, [r2, #0]
 8003c12:	e00b      	b.n	8003c2c <HAL_RCC_OscConfig+0xb0>
 8003c14:	4b78      	ldr	r3, [pc, #480]	; (8003df8 <HAL_RCC_OscConfig+0x27c>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a77      	ldr	r2, [pc, #476]	; (8003df8 <HAL_RCC_OscConfig+0x27c>)
 8003c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c1e:	6013      	str	r3, [r2, #0]
 8003c20:	4b75      	ldr	r3, [pc, #468]	; (8003df8 <HAL_RCC_OscConfig+0x27c>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a74      	ldr	r2, [pc, #464]	; (8003df8 <HAL_RCC_OscConfig+0x27c>)
 8003c26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d013      	beq.n	8003c5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c34:	f7fd fed8 	bl	80019e8 <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c3c:	f7fd fed4 	bl	80019e8 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b64      	cmp	r3, #100	; 0x64
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e2a6      	b.n	800419c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c4e:	4b6a      	ldr	r3, [pc, #424]	; (8003df8 <HAL_RCC_OscConfig+0x27c>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d0f0      	beq.n	8003c3c <HAL_RCC_OscConfig+0xc0>
 8003c5a:	e014      	b.n	8003c86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5c:	f7fd fec4 	bl	80019e8 <HAL_GetTick>
 8003c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c62:	e008      	b.n	8003c76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c64:	f7fd fec0 	bl	80019e8 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b64      	cmp	r3, #100	; 0x64
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e292      	b.n	800419c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c76:	4b60      	ldr	r3, [pc, #384]	; (8003df8 <HAL_RCC_OscConfig+0x27c>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1f0      	bne.n	8003c64 <HAL_RCC_OscConfig+0xe8>
 8003c82:	e000      	b.n	8003c86 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d075      	beq.n	8003d7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c92:	4b59      	ldr	r3, [pc, #356]	; (8003df8 <HAL_RCC_OscConfig+0x27c>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 030c 	and.w	r3, r3, #12
 8003c9a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c9c:	4b56      	ldr	r3, [pc, #344]	; (8003df8 <HAL_RCC_OscConfig+0x27c>)
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	f003 0303 	and.w	r3, r3, #3
 8003ca4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	2b0c      	cmp	r3, #12
 8003caa:	d102      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x136>
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d002      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x13c>
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	2b04      	cmp	r3, #4
 8003cb6:	d11f      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cb8:	4b4f      	ldr	r3, [pc, #316]	; (8003df8 <HAL_RCC_OscConfig+0x27c>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d005      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x154>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d101      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e265      	b.n	800419c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cd0:	4b49      	ldr	r3, [pc, #292]	; (8003df8 <HAL_RCC_OscConfig+0x27c>)
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	061b      	lsls	r3, r3, #24
 8003cde:	4946      	ldr	r1, [pc, #280]	; (8003df8 <HAL_RCC_OscConfig+0x27c>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003ce4:	4b45      	ldr	r3, [pc, #276]	; (8003dfc <HAL_RCC_OscConfig+0x280>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7fd fe31 	bl	8001950 <HAL_InitTick>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d043      	beq.n	8003d7c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e251      	b.n	800419c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d023      	beq.n	8003d48 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d00:	4b3d      	ldr	r3, [pc, #244]	; (8003df8 <HAL_RCC_OscConfig+0x27c>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a3c      	ldr	r2, [pc, #240]	; (8003df8 <HAL_RCC_OscConfig+0x27c>)
 8003d06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d0c:	f7fd fe6c 	bl	80019e8 <HAL_GetTick>
 8003d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d12:	e008      	b.n	8003d26 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d14:	f7fd fe68 	bl	80019e8 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e23a      	b.n	800419c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d26:	4b34      	ldr	r3, [pc, #208]	; (8003df8 <HAL_RCC_OscConfig+0x27c>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d0f0      	beq.n	8003d14 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d32:	4b31      	ldr	r3, [pc, #196]	; (8003df8 <HAL_RCC_OscConfig+0x27c>)
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	061b      	lsls	r3, r3, #24
 8003d40:	492d      	ldr	r1, [pc, #180]	; (8003df8 <HAL_RCC_OscConfig+0x27c>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	604b      	str	r3, [r1, #4]
 8003d46:	e01a      	b.n	8003d7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d48:	4b2b      	ldr	r3, [pc, #172]	; (8003df8 <HAL_RCC_OscConfig+0x27c>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a2a      	ldr	r2, [pc, #168]	; (8003df8 <HAL_RCC_OscConfig+0x27c>)
 8003d4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d54:	f7fd fe48 	bl	80019e8 <HAL_GetTick>
 8003d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d5a:	e008      	b.n	8003d6e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d5c:	f7fd fe44 	bl	80019e8 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e216      	b.n	800419c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d6e:	4b22      	ldr	r3, [pc, #136]	; (8003df8 <HAL_RCC_OscConfig+0x27c>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1f0      	bne.n	8003d5c <HAL_RCC_OscConfig+0x1e0>
 8003d7a:	e000      	b.n	8003d7e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d7c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0308 	and.w	r3, r3, #8
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d041      	beq.n	8003e0e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d01c      	beq.n	8003dcc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d92:	4b19      	ldr	r3, [pc, #100]	; (8003df8 <HAL_RCC_OscConfig+0x27c>)
 8003d94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d98:	4a17      	ldr	r2, [pc, #92]	; (8003df8 <HAL_RCC_OscConfig+0x27c>)
 8003d9a:	f043 0301 	orr.w	r3, r3, #1
 8003d9e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003da2:	f7fd fe21 	bl	80019e8 <HAL_GetTick>
 8003da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003da8:	e008      	b.n	8003dbc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003daa:	f7fd fe1d 	bl	80019e8 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d901      	bls.n	8003dbc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e1ef      	b.n	800419c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003dbc:	4b0e      	ldr	r3, [pc, #56]	; (8003df8 <HAL_RCC_OscConfig+0x27c>)
 8003dbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d0ef      	beq.n	8003daa <HAL_RCC_OscConfig+0x22e>
 8003dca:	e020      	b.n	8003e0e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dcc:	4b0a      	ldr	r3, [pc, #40]	; (8003df8 <HAL_RCC_OscConfig+0x27c>)
 8003dce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dd2:	4a09      	ldr	r2, [pc, #36]	; (8003df8 <HAL_RCC_OscConfig+0x27c>)
 8003dd4:	f023 0301 	bic.w	r3, r3, #1
 8003dd8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ddc:	f7fd fe04 	bl	80019e8 <HAL_GetTick>
 8003de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003de2:	e00d      	b.n	8003e00 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003de4:	f7fd fe00 	bl	80019e8 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d906      	bls.n	8003e00 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e1d2      	b.n	800419c <HAL_RCC_OscConfig+0x620>
 8003df6:	bf00      	nop
 8003df8:	40021000 	.word	0x40021000
 8003dfc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e00:	4b8c      	ldr	r3, [pc, #560]	; (8004034 <HAL_RCC_OscConfig+0x4b8>)
 8003e02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1ea      	bne.n	8003de4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0304 	and.w	r3, r3, #4
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f000 80a6 	beq.w	8003f68 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e20:	4b84      	ldr	r3, [pc, #528]	; (8004034 <HAL_RCC_OscConfig+0x4b8>)
 8003e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d101      	bne.n	8003e30 <HAL_RCC_OscConfig+0x2b4>
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e000      	b.n	8003e32 <HAL_RCC_OscConfig+0x2b6>
 8003e30:	2300      	movs	r3, #0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00d      	beq.n	8003e52 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e36:	4b7f      	ldr	r3, [pc, #508]	; (8004034 <HAL_RCC_OscConfig+0x4b8>)
 8003e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e3a:	4a7e      	ldr	r2, [pc, #504]	; (8004034 <HAL_RCC_OscConfig+0x4b8>)
 8003e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e40:	6593      	str	r3, [r2, #88]	; 0x58
 8003e42:	4b7c      	ldr	r3, [pc, #496]	; (8004034 <HAL_RCC_OscConfig+0x4b8>)
 8003e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e4a:	60fb      	str	r3, [r7, #12]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e52:	4b79      	ldr	r3, [pc, #484]	; (8004038 <HAL_RCC_OscConfig+0x4bc>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d118      	bne.n	8003e90 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e5e:	4b76      	ldr	r3, [pc, #472]	; (8004038 <HAL_RCC_OscConfig+0x4bc>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a75      	ldr	r2, [pc, #468]	; (8004038 <HAL_RCC_OscConfig+0x4bc>)
 8003e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e6a:	f7fd fdbd 	bl	80019e8 <HAL_GetTick>
 8003e6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e70:	e008      	b.n	8003e84 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e72:	f7fd fdb9 	bl	80019e8 <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d901      	bls.n	8003e84 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e18b      	b.n	800419c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e84:	4b6c      	ldr	r3, [pc, #432]	; (8004038 <HAL_RCC_OscConfig+0x4bc>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d0f0      	beq.n	8003e72 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d108      	bne.n	8003eaa <HAL_RCC_OscConfig+0x32e>
 8003e98:	4b66      	ldr	r3, [pc, #408]	; (8004034 <HAL_RCC_OscConfig+0x4b8>)
 8003e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e9e:	4a65      	ldr	r2, [pc, #404]	; (8004034 <HAL_RCC_OscConfig+0x4b8>)
 8003ea0:	f043 0301 	orr.w	r3, r3, #1
 8003ea4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ea8:	e024      	b.n	8003ef4 <HAL_RCC_OscConfig+0x378>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	2b05      	cmp	r3, #5
 8003eb0:	d110      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x358>
 8003eb2:	4b60      	ldr	r3, [pc, #384]	; (8004034 <HAL_RCC_OscConfig+0x4b8>)
 8003eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb8:	4a5e      	ldr	r2, [pc, #376]	; (8004034 <HAL_RCC_OscConfig+0x4b8>)
 8003eba:	f043 0304 	orr.w	r3, r3, #4
 8003ebe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ec2:	4b5c      	ldr	r3, [pc, #368]	; (8004034 <HAL_RCC_OscConfig+0x4b8>)
 8003ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec8:	4a5a      	ldr	r2, [pc, #360]	; (8004034 <HAL_RCC_OscConfig+0x4b8>)
 8003eca:	f043 0301 	orr.w	r3, r3, #1
 8003ece:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ed2:	e00f      	b.n	8003ef4 <HAL_RCC_OscConfig+0x378>
 8003ed4:	4b57      	ldr	r3, [pc, #348]	; (8004034 <HAL_RCC_OscConfig+0x4b8>)
 8003ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eda:	4a56      	ldr	r2, [pc, #344]	; (8004034 <HAL_RCC_OscConfig+0x4b8>)
 8003edc:	f023 0301 	bic.w	r3, r3, #1
 8003ee0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ee4:	4b53      	ldr	r3, [pc, #332]	; (8004034 <HAL_RCC_OscConfig+0x4b8>)
 8003ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eea:	4a52      	ldr	r2, [pc, #328]	; (8004034 <HAL_RCC_OscConfig+0x4b8>)
 8003eec:	f023 0304 	bic.w	r3, r3, #4
 8003ef0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d016      	beq.n	8003f2a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003efc:	f7fd fd74 	bl	80019e8 <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f02:	e00a      	b.n	8003f1a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f04:	f7fd fd70 	bl	80019e8 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e140      	b.n	800419c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f1a:	4b46      	ldr	r3, [pc, #280]	; (8004034 <HAL_RCC_OscConfig+0x4b8>)
 8003f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d0ed      	beq.n	8003f04 <HAL_RCC_OscConfig+0x388>
 8003f28:	e015      	b.n	8003f56 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f2a:	f7fd fd5d 	bl	80019e8 <HAL_GetTick>
 8003f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f30:	e00a      	b.n	8003f48 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f32:	f7fd fd59 	bl	80019e8 <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d901      	bls.n	8003f48 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e129      	b.n	800419c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f48:	4b3a      	ldr	r3, [pc, #232]	; (8004034 <HAL_RCC_OscConfig+0x4b8>)
 8003f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1ed      	bne.n	8003f32 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f56:	7ffb      	ldrb	r3, [r7, #31]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d105      	bne.n	8003f68 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f5c:	4b35      	ldr	r3, [pc, #212]	; (8004034 <HAL_RCC_OscConfig+0x4b8>)
 8003f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f60:	4a34      	ldr	r2, [pc, #208]	; (8004034 <HAL_RCC_OscConfig+0x4b8>)
 8003f62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f66:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0320 	and.w	r3, r3, #32
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d03c      	beq.n	8003fee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d01c      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f7c:	4b2d      	ldr	r3, [pc, #180]	; (8004034 <HAL_RCC_OscConfig+0x4b8>)
 8003f7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f82:	4a2c      	ldr	r2, [pc, #176]	; (8004034 <HAL_RCC_OscConfig+0x4b8>)
 8003f84:	f043 0301 	orr.w	r3, r3, #1
 8003f88:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f8c:	f7fd fd2c 	bl	80019e8 <HAL_GetTick>
 8003f90:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f92:	e008      	b.n	8003fa6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f94:	f7fd fd28 	bl	80019e8 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e0fa      	b.n	800419c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003fa6:	4b23      	ldr	r3, [pc, #140]	; (8004034 <HAL_RCC_OscConfig+0x4b8>)
 8003fa8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d0ef      	beq.n	8003f94 <HAL_RCC_OscConfig+0x418>
 8003fb4:	e01b      	b.n	8003fee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003fb6:	4b1f      	ldr	r3, [pc, #124]	; (8004034 <HAL_RCC_OscConfig+0x4b8>)
 8003fb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fbc:	4a1d      	ldr	r2, [pc, #116]	; (8004034 <HAL_RCC_OscConfig+0x4b8>)
 8003fbe:	f023 0301 	bic.w	r3, r3, #1
 8003fc2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc6:	f7fd fd0f 	bl	80019e8 <HAL_GetTick>
 8003fca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003fcc:	e008      	b.n	8003fe0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fce:	f7fd fd0b 	bl	80019e8 <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d901      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e0dd      	b.n	800419c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003fe0:	4b14      	ldr	r3, [pc, #80]	; (8004034 <HAL_RCC_OscConfig+0x4b8>)
 8003fe2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1ef      	bne.n	8003fce <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	69db      	ldr	r3, [r3, #28]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f000 80d1 	beq.w	800419a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ff8:	4b0e      	ldr	r3, [pc, #56]	; (8004034 <HAL_RCC_OscConfig+0x4b8>)
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f003 030c 	and.w	r3, r3, #12
 8004000:	2b0c      	cmp	r3, #12
 8004002:	f000 808b 	beq.w	800411c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	2b02      	cmp	r3, #2
 800400c:	d15e      	bne.n	80040cc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800400e:	4b09      	ldr	r3, [pc, #36]	; (8004034 <HAL_RCC_OscConfig+0x4b8>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a08      	ldr	r2, [pc, #32]	; (8004034 <HAL_RCC_OscConfig+0x4b8>)
 8004014:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004018:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800401a:	f7fd fce5 	bl	80019e8 <HAL_GetTick>
 800401e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004020:	e00c      	b.n	800403c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004022:	f7fd fce1 	bl	80019e8 <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	2b02      	cmp	r3, #2
 800402e:	d905      	bls.n	800403c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e0b3      	b.n	800419c <HAL_RCC_OscConfig+0x620>
 8004034:	40021000 	.word	0x40021000
 8004038:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800403c:	4b59      	ldr	r3, [pc, #356]	; (80041a4 <HAL_RCC_OscConfig+0x628>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1ec      	bne.n	8004022 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004048:	4b56      	ldr	r3, [pc, #344]	; (80041a4 <HAL_RCC_OscConfig+0x628>)
 800404a:	68da      	ldr	r2, [r3, #12]
 800404c:	4b56      	ldr	r3, [pc, #344]	; (80041a8 <HAL_RCC_OscConfig+0x62c>)
 800404e:	4013      	ands	r3, r2
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	6a11      	ldr	r1, [r2, #32]
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004058:	3a01      	subs	r2, #1
 800405a:	0112      	lsls	r2, r2, #4
 800405c:	4311      	orrs	r1, r2
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004062:	0212      	lsls	r2, r2, #8
 8004064:	4311      	orrs	r1, r2
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800406a:	0852      	lsrs	r2, r2, #1
 800406c:	3a01      	subs	r2, #1
 800406e:	0552      	lsls	r2, r2, #21
 8004070:	4311      	orrs	r1, r2
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004076:	0852      	lsrs	r2, r2, #1
 8004078:	3a01      	subs	r2, #1
 800407a:	0652      	lsls	r2, r2, #25
 800407c:	4311      	orrs	r1, r2
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004082:	06d2      	lsls	r2, r2, #27
 8004084:	430a      	orrs	r2, r1
 8004086:	4947      	ldr	r1, [pc, #284]	; (80041a4 <HAL_RCC_OscConfig+0x628>)
 8004088:	4313      	orrs	r3, r2
 800408a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800408c:	4b45      	ldr	r3, [pc, #276]	; (80041a4 <HAL_RCC_OscConfig+0x628>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a44      	ldr	r2, [pc, #272]	; (80041a4 <HAL_RCC_OscConfig+0x628>)
 8004092:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004096:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004098:	4b42      	ldr	r3, [pc, #264]	; (80041a4 <HAL_RCC_OscConfig+0x628>)
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	4a41      	ldr	r2, [pc, #260]	; (80041a4 <HAL_RCC_OscConfig+0x628>)
 800409e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040a2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a4:	f7fd fca0 	bl	80019e8 <HAL_GetTick>
 80040a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040aa:	e008      	b.n	80040be <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040ac:	f7fd fc9c 	bl	80019e8 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d901      	bls.n	80040be <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e06e      	b.n	800419c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040be:	4b39      	ldr	r3, [pc, #228]	; (80041a4 <HAL_RCC_OscConfig+0x628>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d0f0      	beq.n	80040ac <HAL_RCC_OscConfig+0x530>
 80040ca:	e066      	b.n	800419a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040cc:	4b35      	ldr	r3, [pc, #212]	; (80041a4 <HAL_RCC_OscConfig+0x628>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a34      	ldr	r2, [pc, #208]	; (80041a4 <HAL_RCC_OscConfig+0x628>)
 80040d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040d6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80040d8:	4b32      	ldr	r3, [pc, #200]	; (80041a4 <HAL_RCC_OscConfig+0x628>)
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	4a31      	ldr	r2, [pc, #196]	; (80041a4 <HAL_RCC_OscConfig+0x628>)
 80040de:	f023 0303 	bic.w	r3, r3, #3
 80040e2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80040e4:	4b2f      	ldr	r3, [pc, #188]	; (80041a4 <HAL_RCC_OscConfig+0x628>)
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	4a2e      	ldr	r2, [pc, #184]	; (80041a4 <HAL_RCC_OscConfig+0x628>)
 80040ea:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80040ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040f2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f4:	f7fd fc78 	bl	80019e8 <HAL_GetTick>
 80040f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040fa:	e008      	b.n	800410e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040fc:	f7fd fc74 	bl	80019e8 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b02      	cmp	r3, #2
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e046      	b.n	800419c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800410e:	4b25      	ldr	r3, [pc, #148]	; (80041a4 <HAL_RCC_OscConfig+0x628>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1f0      	bne.n	80040fc <HAL_RCC_OscConfig+0x580>
 800411a:	e03e      	b.n	800419a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	69db      	ldr	r3, [r3, #28]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d101      	bne.n	8004128 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e039      	b.n	800419c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004128:	4b1e      	ldr	r3, [pc, #120]	; (80041a4 <HAL_RCC_OscConfig+0x628>)
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	f003 0203 	and.w	r2, r3, #3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a1b      	ldr	r3, [r3, #32]
 8004138:	429a      	cmp	r2, r3
 800413a:	d12c      	bne.n	8004196 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004146:	3b01      	subs	r3, #1
 8004148:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800414a:	429a      	cmp	r2, r3
 800414c:	d123      	bne.n	8004196 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004158:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800415a:	429a      	cmp	r2, r3
 800415c:	d11b      	bne.n	8004196 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004168:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800416a:	429a      	cmp	r2, r3
 800416c:	d113      	bne.n	8004196 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004178:	085b      	lsrs	r3, r3, #1
 800417a:	3b01      	subs	r3, #1
 800417c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800417e:	429a      	cmp	r2, r3
 8004180:	d109      	bne.n	8004196 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800418c:	085b      	lsrs	r3, r3, #1
 800418e:	3b01      	subs	r3, #1
 8004190:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004192:	429a      	cmp	r2, r3
 8004194:	d001      	beq.n	800419a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e000      	b.n	800419c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3720      	adds	r7, #32
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	40021000 	.word	0x40021000
 80041a8:	019f800c 	.word	0x019f800c

080041ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b086      	sub	sp, #24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80041b6:	2300      	movs	r3, #0
 80041b8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d101      	bne.n	80041c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e11e      	b.n	8004402 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041c4:	4b91      	ldr	r3, [pc, #580]	; (800440c <HAL_RCC_ClockConfig+0x260>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 030f 	and.w	r3, r3, #15
 80041cc:	683a      	ldr	r2, [r7, #0]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d910      	bls.n	80041f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041d2:	4b8e      	ldr	r3, [pc, #568]	; (800440c <HAL_RCC_ClockConfig+0x260>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f023 020f 	bic.w	r2, r3, #15
 80041da:	498c      	ldr	r1, [pc, #560]	; (800440c <HAL_RCC_ClockConfig+0x260>)
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	4313      	orrs	r3, r2
 80041e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041e2:	4b8a      	ldr	r3, [pc, #552]	; (800440c <HAL_RCC_ClockConfig+0x260>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 030f 	and.w	r3, r3, #15
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d001      	beq.n	80041f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e106      	b.n	8004402 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0301 	and.w	r3, r3, #1
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d073      	beq.n	80042e8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	2b03      	cmp	r3, #3
 8004206:	d129      	bne.n	800425c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004208:	4b81      	ldr	r3, [pc, #516]	; (8004410 <HAL_RCC_ClockConfig+0x264>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d101      	bne.n	8004218 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e0f4      	b.n	8004402 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004218:	f000 f966 	bl	80044e8 <RCC_GetSysClockFreqFromPLLSource>
 800421c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	4a7c      	ldr	r2, [pc, #496]	; (8004414 <HAL_RCC_ClockConfig+0x268>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d93f      	bls.n	80042a6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004226:	4b7a      	ldr	r3, [pc, #488]	; (8004410 <HAL_RCC_ClockConfig+0x264>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d009      	beq.n	8004246 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800423a:	2b00      	cmp	r3, #0
 800423c:	d033      	beq.n	80042a6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004242:	2b00      	cmp	r3, #0
 8004244:	d12f      	bne.n	80042a6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004246:	4b72      	ldr	r3, [pc, #456]	; (8004410 <HAL_RCC_ClockConfig+0x264>)
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800424e:	4a70      	ldr	r2, [pc, #448]	; (8004410 <HAL_RCC_ClockConfig+0x264>)
 8004250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004254:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004256:	2380      	movs	r3, #128	; 0x80
 8004258:	617b      	str	r3, [r7, #20]
 800425a:	e024      	b.n	80042a6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	2b02      	cmp	r3, #2
 8004262:	d107      	bne.n	8004274 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004264:	4b6a      	ldr	r3, [pc, #424]	; (8004410 <HAL_RCC_ClockConfig+0x264>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d109      	bne.n	8004284 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e0c6      	b.n	8004402 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004274:	4b66      	ldr	r3, [pc, #408]	; (8004410 <HAL_RCC_ClockConfig+0x264>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800427c:	2b00      	cmp	r3, #0
 800427e:	d101      	bne.n	8004284 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e0be      	b.n	8004402 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004284:	f000 f8ce 	bl	8004424 <HAL_RCC_GetSysClockFreq>
 8004288:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	4a61      	ldr	r2, [pc, #388]	; (8004414 <HAL_RCC_ClockConfig+0x268>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d909      	bls.n	80042a6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004292:	4b5f      	ldr	r3, [pc, #380]	; (8004410 <HAL_RCC_ClockConfig+0x264>)
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800429a:	4a5d      	ldr	r2, [pc, #372]	; (8004410 <HAL_RCC_ClockConfig+0x264>)
 800429c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042a0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80042a2:	2380      	movs	r3, #128	; 0x80
 80042a4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042a6:	4b5a      	ldr	r3, [pc, #360]	; (8004410 <HAL_RCC_ClockConfig+0x264>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f023 0203 	bic.w	r2, r3, #3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	4957      	ldr	r1, [pc, #348]	; (8004410 <HAL_RCC_ClockConfig+0x264>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042b8:	f7fd fb96 	bl	80019e8 <HAL_GetTick>
 80042bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042be:	e00a      	b.n	80042d6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042c0:	f7fd fb92 	bl	80019e8 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d901      	bls.n	80042d6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e095      	b.n	8004402 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042d6:	4b4e      	ldr	r3, [pc, #312]	; (8004410 <HAL_RCC_ClockConfig+0x264>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f003 020c 	and.w	r2, r3, #12
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d1eb      	bne.n	80042c0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d023      	beq.n	800433c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0304 	and.w	r3, r3, #4
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d005      	beq.n	800430c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004300:	4b43      	ldr	r3, [pc, #268]	; (8004410 <HAL_RCC_ClockConfig+0x264>)
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	4a42      	ldr	r2, [pc, #264]	; (8004410 <HAL_RCC_ClockConfig+0x264>)
 8004306:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800430a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0308 	and.w	r3, r3, #8
 8004314:	2b00      	cmp	r3, #0
 8004316:	d007      	beq.n	8004328 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004318:	4b3d      	ldr	r3, [pc, #244]	; (8004410 <HAL_RCC_ClockConfig+0x264>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004320:	4a3b      	ldr	r2, [pc, #236]	; (8004410 <HAL_RCC_ClockConfig+0x264>)
 8004322:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004326:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004328:	4b39      	ldr	r3, [pc, #228]	; (8004410 <HAL_RCC_ClockConfig+0x264>)
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	4936      	ldr	r1, [pc, #216]	; (8004410 <HAL_RCC_ClockConfig+0x264>)
 8004336:	4313      	orrs	r3, r2
 8004338:	608b      	str	r3, [r1, #8]
 800433a:	e008      	b.n	800434e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	2b80      	cmp	r3, #128	; 0x80
 8004340:	d105      	bne.n	800434e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004342:	4b33      	ldr	r3, [pc, #204]	; (8004410 <HAL_RCC_ClockConfig+0x264>)
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	4a32      	ldr	r2, [pc, #200]	; (8004410 <HAL_RCC_ClockConfig+0x264>)
 8004348:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800434c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800434e:	4b2f      	ldr	r3, [pc, #188]	; (800440c <HAL_RCC_ClockConfig+0x260>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 030f 	and.w	r3, r3, #15
 8004356:	683a      	ldr	r2, [r7, #0]
 8004358:	429a      	cmp	r2, r3
 800435a:	d21d      	bcs.n	8004398 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800435c:	4b2b      	ldr	r3, [pc, #172]	; (800440c <HAL_RCC_ClockConfig+0x260>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f023 020f 	bic.w	r2, r3, #15
 8004364:	4929      	ldr	r1, [pc, #164]	; (800440c <HAL_RCC_ClockConfig+0x260>)
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	4313      	orrs	r3, r2
 800436a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800436c:	f7fd fb3c 	bl	80019e8 <HAL_GetTick>
 8004370:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004372:	e00a      	b.n	800438a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004374:	f7fd fb38 	bl	80019e8 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004382:	4293      	cmp	r3, r2
 8004384:	d901      	bls.n	800438a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e03b      	b.n	8004402 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800438a:	4b20      	ldr	r3, [pc, #128]	; (800440c <HAL_RCC_ClockConfig+0x260>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 030f 	and.w	r3, r3, #15
 8004392:	683a      	ldr	r2, [r7, #0]
 8004394:	429a      	cmp	r2, r3
 8004396:	d1ed      	bne.n	8004374 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0304 	and.w	r3, r3, #4
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d008      	beq.n	80043b6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043a4:	4b1a      	ldr	r3, [pc, #104]	; (8004410 <HAL_RCC_ClockConfig+0x264>)
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	4917      	ldr	r1, [pc, #92]	; (8004410 <HAL_RCC_ClockConfig+0x264>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0308 	and.w	r3, r3, #8
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d009      	beq.n	80043d6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043c2:	4b13      	ldr	r3, [pc, #76]	; (8004410 <HAL_RCC_ClockConfig+0x264>)
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	00db      	lsls	r3, r3, #3
 80043d0:	490f      	ldr	r1, [pc, #60]	; (8004410 <HAL_RCC_ClockConfig+0x264>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043d6:	f000 f825 	bl	8004424 <HAL_RCC_GetSysClockFreq>
 80043da:	4602      	mov	r2, r0
 80043dc:	4b0c      	ldr	r3, [pc, #48]	; (8004410 <HAL_RCC_ClockConfig+0x264>)
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	091b      	lsrs	r3, r3, #4
 80043e2:	f003 030f 	and.w	r3, r3, #15
 80043e6:	490c      	ldr	r1, [pc, #48]	; (8004418 <HAL_RCC_ClockConfig+0x26c>)
 80043e8:	5ccb      	ldrb	r3, [r1, r3]
 80043ea:	f003 031f 	and.w	r3, r3, #31
 80043ee:	fa22 f303 	lsr.w	r3, r2, r3
 80043f2:	4a0a      	ldr	r2, [pc, #40]	; (800441c <HAL_RCC_ClockConfig+0x270>)
 80043f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80043f6:	4b0a      	ldr	r3, [pc, #40]	; (8004420 <HAL_RCC_ClockConfig+0x274>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7fd faa8 	bl	8001950 <HAL_InitTick>
 8004400:	4603      	mov	r3, r0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3718      	adds	r7, #24
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	40022000 	.word	0x40022000
 8004410:	40021000 	.word	0x40021000
 8004414:	04c4b400 	.word	0x04c4b400
 8004418:	0800aa64 	.word	0x0800aa64
 800441c:	20000000 	.word	0x20000000
 8004420:	20000004 	.word	0x20000004

08004424 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004424:	b480      	push	{r7}
 8004426:	b087      	sub	sp, #28
 8004428:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800442a:	4b2c      	ldr	r3, [pc, #176]	; (80044dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f003 030c 	and.w	r3, r3, #12
 8004432:	2b04      	cmp	r3, #4
 8004434:	d102      	bne.n	800443c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004436:	4b2a      	ldr	r3, [pc, #168]	; (80044e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004438:	613b      	str	r3, [r7, #16]
 800443a:	e047      	b.n	80044cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800443c:	4b27      	ldr	r3, [pc, #156]	; (80044dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f003 030c 	and.w	r3, r3, #12
 8004444:	2b08      	cmp	r3, #8
 8004446:	d102      	bne.n	800444e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004448:	4b26      	ldr	r3, [pc, #152]	; (80044e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800444a:	613b      	str	r3, [r7, #16]
 800444c:	e03e      	b.n	80044cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800444e:	4b23      	ldr	r3, [pc, #140]	; (80044dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f003 030c 	and.w	r3, r3, #12
 8004456:	2b0c      	cmp	r3, #12
 8004458:	d136      	bne.n	80044c8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800445a:	4b20      	ldr	r3, [pc, #128]	; (80044dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	f003 0303 	and.w	r3, r3, #3
 8004462:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004464:	4b1d      	ldr	r3, [pc, #116]	; (80044dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	091b      	lsrs	r3, r3, #4
 800446a:	f003 030f 	and.w	r3, r3, #15
 800446e:	3301      	adds	r3, #1
 8004470:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2b03      	cmp	r3, #3
 8004476:	d10c      	bne.n	8004492 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004478:	4a1a      	ldr	r2, [pc, #104]	; (80044e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004480:	4a16      	ldr	r2, [pc, #88]	; (80044dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004482:	68d2      	ldr	r2, [r2, #12]
 8004484:	0a12      	lsrs	r2, r2, #8
 8004486:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800448a:	fb02 f303 	mul.w	r3, r2, r3
 800448e:	617b      	str	r3, [r7, #20]
      break;
 8004490:	e00c      	b.n	80044ac <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004492:	4a13      	ldr	r2, [pc, #76]	; (80044e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	fbb2 f3f3 	udiv	r3, r2, r3
 800449a:	4a10      	ldr	r2, [pc, #64]	; (80044dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800449c:	68d2      	ldr	r2, [r2, #12]
 800449e:	0a12      	lsrs	r2, r2, #8
 80044a0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80044a4:	fb02 f303 	mul.w	r3, r2, r3
 80044a8:	617b      	str	r3, [r7, #20]
      break;
 80044aa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80044ac:	4b0b      	ldr	r3, [pc, #44]	; (80044dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	0e5b      	lsrs	r3, r3, #25
 80044b2:	f003 0303 	and.w	r3, r3, #3
 80044b6:	3301      	adds	r3, #1
 80044b8:	005b      	lsls	r3, r3, #1
 80044ba:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80044bc:	697a      	ldr	r2, [r7, #20]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c4:	613b      	str	r3, [r7, #16]
 80044c6:	e001      	b.n	80044cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80044c8:	2300      	movs	r3, #0
 80044ca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80044cc:	693b      	ldr	r3, [r7, #16]
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	371c      	adds	r7, #28
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	40021000 	.word	0x40021000
 80044e0:	00f42400 	.word	0x00f42400
 80044e4:	007a1200 	.word	0x007a1200

080044e8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b087      	sub	sp, #28
 80044ec:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80044ee:	4b1e      	ldr	r3, [pc, #120]	; (8004568 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	f003 0303 	and.w	r3, r3, #3
 80044f6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044f8:	4b1b      	ldr	r3, [pc, #108]	; (8004568 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	091b      	lsrs	r3, r3, #4
 80044fe:	f003 030f 	and.w	r3, r3, #15
 8004502:	3301      	adds	r3, #1
 8004504:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	2b03      	cmp	r3, #3
 800450a:	d10c      	bne.n	8004526 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800450c:	4a17      	ldr	r2, [pc, #92]	; (800456c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	fbb2 f3f3 	udiv	r3, r2, r3
 8004514:	4a14      	ldr	r2, [pc, #80]	; (8004568 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004516:	68d2      	ldr	r2, [r2, #12]
 8004518:	0a12      	lsrs	r2, r2, #8
 800451a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800451e:	fb02 f303 	mul.w	r3, r2, r3
 8004522:	617b      	str	r3, [r7, #20]
    break;
 8004524:	e00c      	b.n	8004540 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004526:	4a12      	ldr	r2, [pc, #72]	; (8004570 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	fbb2 f3f3 	udiv	r3, r2, r3
 800452e:	4a0e      	ldr	r2, [pc, #56]	; (8004568 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004530:	68d2      	ldr	r2, [r2, #12]
 8004532:	0a12      	lsrs	r2, r2, #8
 8004534:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004538:	fb02 f303 	mul.w	r3, r2, r3
 800453c:	617b      	str	r3, [r7, #20]
    break;
 800453e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004540:	4b09      	ldr	r3, [pc, #36]	; (8004568 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	0e5b      	lsrs	r3, r3, #25
 8004546:	f003 0303 	and.w	r3, r3, #3
 800454a:	3301      	adds	r3, #1
 800454c:	005b      	lsls	r3, r3, #1
 800454e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004550:	697a      	ldr	r2, [r7, #20]
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	fbb2 f3f3 	udiv	r3, r2, r3
 8004558:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800455a:	687b      	ldr	r3, [r7, #4]
}
 800455c:	4618      	mov	r0, r3
 800455e:	371c      	adds	r7, #28
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr
 8004568:	40021000 	.word	0x40021000
 800456c:	007a1200 	.word	0x007a1200
 8004570:	00f42400 	.word	0x00f42400

08004574 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800457c:	2300      	movs	r3, #0
 800457e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004580:	2300      	movs	r3, #0
 8004582:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800458c:	2b00      	cmp	r3, #0
 800458e:	f000 8098 	beq.w	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004592:	2300      	movs	r3, #0
 8004594:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004596:	4b43      	ldr	r3, [pc, #268]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800459a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10d      	bne.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045a2:	4b40      	ldr	r3, [pc, #256]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a6:	4a3f      	ldr	r2, [pc, #252]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045ac:	6593      	str	r3, [r2, #88]	; 0x58
 80045ae:	4b3d      	ldr	r3, [pc, #244]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045b6:	60bb      	str	r3, [r7, #8]
 80045b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045ba:	2301      	movs	r3, #1
 80045bc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045be:	4b3a      	ldr	r3, [pc, #232]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a39      	ldr	r2, [pc, #228]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80045c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045ca:	f7fd fa0d 	bl	80019e8 <HAL_GetTick>
 80045ce:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045d0:	e009      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045d2:	f7fd fa09 	bl	80019e8 <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d902      	bls.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	74fb      	strb	r3, [r7, #19]
        break;
 80045e4:	e005      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045e6:	4b30      	ldr	r3, [pc, #192]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d0ef      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80045f2:	7cfb      	ldrb	r3, [r7, #19]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d159      	bne.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80045f8:	4b2a      	ldr	r3, [pc, #168]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004602:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d01e      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	429a      	cmp	r2, r3
 8004612:	d019      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004614:	4b23      	ldr	r3, [pc, #140]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800461a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800461e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004620:	4b20      	ldr	r3, [pc, #128]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004626:	4a1f      	ldr	r2, [pc, #124]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004628:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800462c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004630:	4b1c      	ldr	r3, [pc, #112]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004636:	4a1b      	ldr	r2, [pc, #108]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004638:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800463c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004640:	4a18      	ldr	r2, [pc, #96]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b00      	cmp	r3, #0
 8004650:	d016      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004652:	f7fd f9c9 	bl	80019e8 <HAL_GetTick>
 8004656:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004658:	e00b      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800465a:	f7fd f9c5 	bl	80019e8 <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	f241 3288 	movw	r2, #5000	; 0x1388
 8004668:	4293      	cmp	r3, r2
 800466a:	d902      	bls.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	74fb      	strb	r3, [r7, #19]
            break;
 8004670:	e006      	b.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004672:	4b0c      	ldr	r3, [pc, #48]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004678:	f003 0302 	and.w	r3, r3, #2
 800467c:	2b00      	cmp	r3, #0
 800467e:	d0ec      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004680:	7cfb      	ldrb	r3, [r7, #19]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d10b      	bne.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004686:	4b07      	ldr	r3, [pc, #28]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800468c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004694:	4903      	ldr	r1, [pc, #12]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004696:	4313      	orrs	r3, r2
 8004698:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800469c:	e008      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800469e:	7cfb      	ldrb	r3, [r7, #19]
 80046a0:	74bb      	strb	r3, [r7, #18]
 80046a2:	e005      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80046a4:	40021000 	.word	0x40021000
 80046a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ac:	7cfb      	ldrb	r3, [r7, #19]
 80046ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046b0:	7c7b      	ldrb	r3, [r7, #17]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d105      	bne.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046b6:	4ba6      	ldr	r3, [pc, #664]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ba:	4aa5      	ldr	r2, [pc, #660]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00a      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046ce:	4ba0      	ldr	r3, [pc, #640]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d4:	f023 0203 	bic.w	r2, r3, #3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	499c      	ldr	r1, [pc, #624]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00a      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046f0:	4b97      	ldr	r3, [pc, #604]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f6:	f023 020c 	bic.w	r2, r3, #12
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	4994      	ldr	r1, [pc, #592]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004700:	4313      	orrs	r3, r2
 8004702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0304 	and.w	r3, r3, #4
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00a      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004712:	4b8f      	ldr	r3, [pc, #572]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004718:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	498b      	ldr	r1, [pc, #556]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004722:	4313      	orrs	r3, r2
 8004724:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0308 	and.w	r3, r3, #8
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00a      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004734:	4b86      	ldr	r3, [pc, #536]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800473a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	4983      	ldr	r1, [pc, #524]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004744:	4313      	orrs	r3, r2
 8004746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0320 	and.w	r3, r3, #32
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00a      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004756:	4b7e      	ldr	r3, [pc, #504]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800475c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	695b      	ldr	r3, [r3, #20]
 8004764:	497a      	ldr	r1, [pc, #488]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004766:	4313      	orrs	r3, r2
 8004768:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00a      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004778:	4b75      	ldr	r3, [pc, #468]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800477a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800477e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	4972      	ldr	r1, [pc, #456]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004788:	4313      	orrs	r3, r2
 800478a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00a      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800479a:	4b6d      	ldr	r3, [pc, #436]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800479c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	69db      	ldr	r3, [r3, #28]
 80047a8:	4969      	ldr	r1, [pc, #420]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00a      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047bc:	4b64      	ldr	r3, [pc, #400]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	4961      	ldr	r1, [pc, #388]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00a      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047de:	4b5c      	ldr	r3, [pc, #368]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ec:	4958      	ldr	r1, [pc, #352]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d015      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004800:	4b53      	ldr	r3, [pc, #332]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004806:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480e:	4950      	ldr	r1, [pc, #320]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004810:	4313      	orrs	r3, r2
 8004812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800481e:	d105      	bne.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004820:	4b4b      	ldr	r3, [pc, #300]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	4a4a      	ldr	r2, [pc, #296]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004826:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800482a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004834:	2b00      	cmp	r3, #0
 8004836:	d015      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004838:	4b45      	ldr	r3, [pc, #276]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800483a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800483e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004846:	4942      	ldr	r1, [pc, #264]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004848:	4313      	orrs	r3, r2
 800484a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004852:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004856:	d105      	bne.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004858:	4b3d      	ldr	r3, [pc, #244]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	4a3c      	ldr	r2, [pc, #240]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800485e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004862:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800486c:	2b00      	cmp	r3, #0
 800486e:	d015      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004870:	4b37      	ldr	r3, [pc, #220]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004876:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487e:	4934      	ldr	r1, [pc, #208]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004880:	4313      	orrs	r3, r2
 8004882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800488e:	d105      	bne.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004890:	4b2f      	ldr	r3, [pc, #188]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	4a2e      	ldr	r2, [pc, #184]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004896:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800489a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d015      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048a8:	4b29      	ldr	r3, [pc, #164]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048b6:	4926      	ldr	r1, [pc, #152]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048c6:	d105      	bne.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048c8:	4b21      	ldr	r3, [pc, #132]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	4a20      	ldr	r2, [pc, #128]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048d2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d015      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80048e0:	4b1b      	ldr	r3, [pc, #108]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ee:	4918      	ldr	r1, [pc, #96]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048fe:	d105      	bne.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004900:	4b13      	ldr	r3, [pc, #76]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	4a12      	ldr	r2, [pc, #72]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004906:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800490a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d015      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004918:	4b0d      	ldr	r3, [pc, #52]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800491a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800491e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004926:	490a      	ldr	r1, [pc, #40]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004928:	4313      	orrs	r3, r2
 800492a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004932:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004936:	d105      	bne.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004938:	4b05      	ldr	r3, [pc, #20]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	4a04      	ldr	r2, [pc, #16]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800493e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004942:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004944:	7cbb      	ldrb	r3, [r7, #18]
}
 8004946:	4618      	mov	r0, r3
 8004948:	3718      	adds	r7, #24
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	40021000 	.word	0x40021000

08004954 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d101      	bne.n	8004966 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e049      	b.n	80049fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800496c:	b2db      	uxtb	r3, r3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d106      	bne.n	8004980 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f7fc fe82 	bl	8001684 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2202      	movs	r2, #2
 8004984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	3304      	adds	r3, #4
 8004990:	4619      	mov	r1, r3
 8004992:	4610      	mov	r0, r2
 8004994:	f000 fde8 	bl	8005568 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3708      	adds	r7, #8
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
	...

08004a04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d001      	beq.n	8004a1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e04a      	b.n	8004ab2 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2202      	movs	r2, #2
 8004a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68da      	ldr	r2, [r3, #12]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f042 0201 	orr.w	r2, r2, #1
 8004a32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a21      	ldr	r2, [pc, #132]	; (8004ac0 <HAL_TIM_Base_Start_IT+0xbc>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d018      	beq.n	8004a70 <HAL_TIM_Base_Start_IT+0x6c>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a46:	d013      	beq.n	8004a70 <HAL_TIM_Base_Start_IT+0x6c>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a1d      	ldr	r2, [pc, #116]	; (8004ac4 <HAL_TIM_Base_Start_IT+0xc0>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d00e      	beq.n	8004a70 <HAL_TIM_Base_Start_IT+0x6c>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a1c      	ldr	r2, [pc, #112]	; (8004ac8 <HAL_TIM_Base_Start_IT+0xc4>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d009      	beq.n	8004a70 <HAL_TIM_Base_Start_IT+0x6c>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a1a      	ldr	r2, [pc, #104]	; (8004acc <HAL_TIM_Base_Start_IT+0xc8>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d004      	beq.n	8004a70 <HAL_TIM_Base_Start_IT+0x6c>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a19      	ldr	r2, [pc, #100]	; (8004ad0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d115      	bne.n	8004a9c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	689a      	ldr	r2, [r3, #8]
 8004a76:	4b17      	ldr	r3, [pc, #92]	; (8004ad4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004a78:	4013      	ands	r3, r2
 8004a7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2b06      	cmp	r3, #6
 8004a80:	d015      	beq.n	8004aae <HAL_TIM_Base_Start_IT+0xaa>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a88:	d011      	beq.n	8004aae <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f042 0201 	orr.w	r2, r2, #1
 8004a98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a9a:	e008      	b.n	8004aae <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f042 0201 	orr.w	r2, r2, #1
 8004aaa:	601a      	str	r2, [r3, #0]
 8004aac:	e000      	b.n	8004ab0 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3714      	adds	r7, #20
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	40012c00 	.word	0x40012c00
 8004ac4:	40000400 	.word	0x40000400
 8004ac8:	40000800 	.word	0x40000800
 8004acc:	40013400 	.word	0x40013400
 8004ad0:	40014000 	.word	0x40014000
 8004ad4:	00010007 	.word	0x00010007

08004ad8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d101      	bne.n	8004aea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e049      	b.n	8004b7e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d106      	bne.n	8004b04 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f7fc fd7a 	bl	80015f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2202      	movs	r2, #2
 8004b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	3304      	adds	r3, #4
 8004b14:	4619      	mov	r1, r3
 8004b16:	4610      	mov	r0, r2
 8004b18:	f000 fd26 	bl	8005568 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3708      	adds	r7, #8
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
	...

08004b88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d109      	bne.n	8004bac <HAL_TIM_PWM_Start+0x24>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	bf14      	ite	ne
 8004ba4:	2301      	movne	r3, #1
 8004ba6:	2300      	moveq	r3, #0
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	e03c      	b.n	8004c26 <HAL_TIM_PWM_Start+0x9e>
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	2b04      	cmp	r3, #4
 8004bb0:	d109      	bne.n	8004bc6 <HAL_TIM_PWM_Start+0x3e>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	bf14      	ite	ne
 8004bbe:	2301      	movne	r3, #1
 8004bc0:	2300      	moveq	r3, #0
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	e02f      	b.n	8004c26 <HAL_TIM_PWM_Start+0x9e>
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	2b08      	cmp	r3, #8
 8004bca:	d109      	bne.n	8004be0 <HAL_TIM_PWM_Start+0x58>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	bf14      	ite	ne
 8004bd8:	2301      	movne	r3, #1
 8004bda:	2300      	moveq	r3, #0
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	e022      	b.n	8004c26 <HAL_TIM_PWM_Start+0x9e>
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	2b0c      	cmp	r3, #12
 8004be4:	d109      	bne.n	8004bfa <HAL_TIM_PWM_Start+0x72>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	bf14      	ite	ne
 8004bf2:	2301      	movne	r3, #1
 8004bf4:	2300      	moveq	r3, #0
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	e015      	b.n	8004c26 <HAL_TIM_PWM_Start+0x9e>
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	2b10      	cmp	r3, #16
 8004bfe:	d109      	bne.n	8004c14 <HAL_TIM_PWM_Start+0x8c>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	bf14      	ite	ne
 8004c0c:	2301      	movne	r3, #1
 8004c0e:	2300      	moveq	r3, #0
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	e008      	b.n	8004c26 <HAL_TIM_PWM_Start+0x9e>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	bf14      	ite	ne
 8004c20:	2301      	movne	r3, #1
 8004c22:	2300      	moveq	r3, #0
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e097      	b.n	8004d5e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d104      	bne.n	8004c3e <HAL_TIM_PWM_Start+0xb6>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2202      	movs	r2, #2
 8004c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c3c:	e023      	b.n	8004c86 <HAL_TIM_PWM_Start+0xfe>
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	2b04      	cmp	r3, #4
 8004c42:	d104      	bne.n	8004c4e <HAL_TIM_PWM_Start+0xc6>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2202      	movs	r2, #2
 8004c48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c4c:	e01b      	b.n	8004c86 <HAL_TIM_PWM_Start+0xfe>
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	2b08      	cmp	r3, #8
 8004c52:	d104      	bne.n	8004c5e <HAL_TIM_PWM_Start+0xd6>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2202      	movs	r2, #2
 8004c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c5c:	e013      	b.n	8004c86 <HAL_TIM_PWM_Start+0xfe>
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	2b0c      	cmp	r3, #12
 8004c62:	d104      	bne.n	8004c6e <HAL_TIM_PWM_Start+0xe6>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2202      	movs	r2, #2
 8004c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c6c:	e00b      	b.n	8004c86 <HAL_TIM_PWM_Start+0xfe>
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	2b10      	cmp	r3, #16
 8004c72:	d104      	bne.n	8004c7e <HAL_TIM_PWM_Start+0xf6>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2202      	movs	r2, #2
 8004c78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c7c:	e003      	b.n	8004c86 <HAL_TIM_PWM_Start+0xfe>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2202      	movs	r2, #2
 8004c82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	6839      	ldr	r1, [r7, #0]
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f000 fff0 	bl	8005c74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a33      	ldr	r2, [pc, #204]	; (8004d68 <HAL_TIM_PWM_Start+0x1e0>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d013      	beq.n	8004cc6 <HAL_TIM_PWM_Start+0x13e>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a32      	ldr	r2, [pc, #200]	; (8004d6c <HAL_TIM_PWM_Start+0x1e4>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d00e      	beq.n	8004cc6 <HAL_TIM_PWM_Start+0x13e>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a30      	ldr	r2, [pc, #192]	; (8004d70 <HAL_TIM_PWM_Start+0x1e8>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d009      	beq.n	8004cc6 <HAL_TIM_PWM_Start+0x13e>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a2f      	ldr	r2, [pc, #188]	; (8004d74 <HAL_TIM_PWM_Start+0x1ec>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d004      	beq.n	8004cc6 <HAL_TIM_PWM_Start+0x13e>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a2d      	ldr	r2, [pc, #180]	; (8004d78 <HAL_TIM_PWM_Start+0x1f0>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d101      	bne.n	8004cca <HAL_TIM_PWM_Start+0x142>
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e000      	b.n	8004ccc <HAL_TIM_PWM_Start+0x144>
 8004cca:	2300      	movs	r3, #0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d007      	beq.n	8004ce0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cde:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a20      	ldr	r2, [pc, #128]	; (8004d68 <HAL_TIM_PWM_Start+0x1e0>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d018      	beq.n	8004d1c <HAL_TIM_PWM_Start+0x194>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cf2:	d013      	beq.n	8004d1c <HAL_TIM_PWM_Start+0x194>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a20      	ldr	r2, [pc, #128]	; (8004d7c <HAL_TIM_PWM_Start+0x1f4>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d00e      	beq.n	8004d1c <HAL_TIM_PWM_Start+0x194>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a1f      	ldr	r2, [pc, #124]	; (8004d80 <HAL_TIM_PWM_Start+0x1f8>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d009      	beq.n	8004d1c <HAL_TIM_PWM_Start+0x194>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a17      	ldr	r2, [pc, #92]	; (8004d6c <HAL_TIM_PWM_Start+0x1e4>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d004      	beq.n	8004d1c <HAL_TIM_PWM_Start+0x194>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a16      	ldr	r2, [pc, #88]	; (8004d70 <HAL_TIM_PWM_Start+0x1e8>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d115      	bne.n	8004d48 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	689a      	ldr	r2, [r3, #8]
 8004d22:	4b18      	ldr	r3, [pc, #96]	; (8004d84 <HAL_TIM_PWM_Start+0x1fc>)
 8004d24:	4013      	ands	r3, r2
 8004d26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2b06      	cmp	r3, #6
 8004d2c:	d015      	beq.n	8004d5a <HAL_TIM_PWM_Start+0x1d2>
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d34:	d011      	beq.n	8004d5a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f042 0201 	orr.w	r2, r2, #1
 8004d44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d46:	e008      	b.n	8004d5a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f042 0201 	orr.w	r2, r2, #1
 8004d56:	601a      	str	r2, [r3, #0]
 8004d58:	e000      	b.n	8004d5c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d5a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	40012c00 	.word	0x40012c00
 8004d6c:	40013400 	.word	0x40013400
 8004d70:	40014000 	.word	0x40014000
 8004d74:	40014400 	.word	0x40014400
 8004d78:	40014800 	.word	0x40014800
 8004d7c:	40000400 	.word	0x40000400
 8004d80:	40000800 	.word	0x40000800
 8004d84:	00010007 	.word	0x00010007

08004d88 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b086      	sub	sp, #24
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d101      	bne.n	8004d9c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e097      	b.n	8004ecc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d106      	bne.n	8004db6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f7fc fb7b 	bl	80014ac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2202      	movs	r2, #2
 8004dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	6812      	ldr	r2, [r2, #0]
 8004dc8:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004dcc:	f023 0307 	bic.w	r3, r3, #7
 8004dd0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	3304      	adds	r3, #4
 8004dda:	4619      	mov	r1, r3
 8004ddc:	4610      	mov	r0, r2
 8004dde:	f000 fbc3 	bl	8005568 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	6a1b      	ldr	r3, [r3, #32]
 8004df8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e0a:	f023 0303 	bic.w	r3, r3, #3
 8004e0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	689a      	ldr	r2, [r3, #8]
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	699b      	ldr	r3, [r3, #24]
 8004e18:	021b      	lsls	r3, r3, #8
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004e28:	f023 030c 	bic.w	r3, r3, #12
 8004e2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	68da      	ldr	r2, [r3, #12]
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	69db      	ldr	r3, [r3, #28]
 8004e42:	021b      	lsls	r3, r3, #8
 8004e44:	4313      	orrs	r3, r2
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	011a      	lsls	r2, r3, #4
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	6a1b      	ldr	r3, [r3, #32]
 8004e56:	031b      	lsls	r3, r3, #12
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	693a      	ldr	r2, [r7, #16]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004e66:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004e6e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	685a      	ldr	r2, [r3, #4]
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	695b      	ldr	r3, [r3, #20]
 8004e78:	011b      	lsls	r3, r3, #4
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	68fa      	ldr	r2, [r7, #12]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	693a      	ldr	r2, [r7, #16]
 8004e90:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2201      	movs	r2, #1
 8004eae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3718      	adds	r7, #24
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ee4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004eec:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ef4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004efc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d110      	bne.n	8004f26 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f04:	7bfb      	ldrb	r3, [r7, #15]
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d102      	bne.n	8004f10 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f0a:	7b7b      	ldrb	r3, [r7, #13]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d001      	beq.n	8004f14 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e069      	b.n	8004fe8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2202      	movs	r2, #2
 8004f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2202      	movs	r2, #2
 8004f20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f24:	e031      	b.n	8004f8a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	2b04      	cmp	r3, #4
 8004f2a:	d110      	bne.n	8004f4e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f2c:	7bbb      	ldrb	r3, [r7, #14]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d102      	bne.n	8004f38 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f32:	7b3b      	ldrb	r3, [r7, #12]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d001      	beq.n	8004f3c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e055      	b.n	8004fe8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2202      	movs	r2, #2
 8004f40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2202      	movs	r2, #2
 8004f48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f4c:	e01d      	b.n	8004f8a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f4e:	7bfb      	ldrb	r3, [r7, #15]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d108      	bne.n	8004f66 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f54:	7bbb      	ldrb	r3, [r7, #14]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d105      	bne.n	8004f66 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f5a:	7b7b      	ldrb	r3, [r7, #13]
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d102      	bne.n	8004f66 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f60:	7b3b      	ldrb	r3, [r7, #12]
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d001      	beq.n	8004f6a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e03e      	b.n	8004fe8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2202      	movs	r2, #2
 8004f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2202      	movs	r2, #2
 8004f76:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2202      	movs	r2, #2
 8004f7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2202      	movs	r2, #2
 8004f86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d003      	beq.n	8004f98 <HAL_TIM_Encoder_Start+0xc4>
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	2b04      	cmp	r3, #4
 8004f94:	d008      	beq.n	8004fa8 <HAL_TIM_Encoder_Start+0xd4>
 8004f96:	e00f      	b.n	8004fb8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	2100      	movs	r1, #0
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f000 fe67 	bl	8005c74 <TIM_CCxChannelCmd>
      break;
 8004fa6:	e016      	b.n	8004fd6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2201      	movs	r2, #1
 8004fae:	2104      	movs	r1, #4
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f000 fe5f 	bl	8005c74 <TIM_CCxChannelCmd>
      break;
 8004fb6:	e00e      	b.n	8004fd6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	2100      	movs	r1, #0
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f000 fe57 	bl	8005c74 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	2104      	movs	r1, #4
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f000 fe50 	bl	8005c74 <TIM_CCxChannelCmd>
      break;
 8004fd4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f042 0201 	orr.w	r2, r2, #1
 8004fe4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3710      	adds	r7, #16
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	f003 0302 	and.w	r3, r3, #2
 8005002:	2b02      	cmp	r3, #2
 8005004:	d122      	bne.n	800504c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	f003 0302 	and.w	r3, r3, #2
 8005010:	2b02      	cmp	r3, #2
 8005012:	d11b      	bne.n	800504c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f06f 0202 	mvn.w	r2, #2
 800501c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2201      	movs	r2, #1
 8005022:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	f003 0303 	and.w	r3, r3, #3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d003      	beq.n	800503a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 fa7a 	bl	800552c <HAL_TIM_IC_CaptureCallback>
 8005038:	e005      	b.n	8005046 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 fa6c 	bl	8005518 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 fa7d 	bl	8005540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	f003 0304 	and.w	r3, r3, #4
 8005056:	2b04      	cmp	r3, #4
 8005058:	d122      	bne.n	80050a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	f003 0304 	and.w	r3, r3, #4
 8005064:	2b04      	cmp	r3, #4
 8005066:	d11b      	bne.n	80050a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f06f 0204 	mvn.w	r2, #4
 8005070:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2202      	movs	r2, #2
 8005076:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005082:	2b00      	cmp	r3, #0
 8005084:	d003      	beq.n	800508e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 fa50 	bl	800552c <HAL_TIM_IC_CaptureCallback>
 800508c:	e005      	b.n	800509a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 fa42 	bl	8005518 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 fa53 	bl	8005540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	f003 0308 	and.w	r3, r3, #8
 80050aa:	2b08      	cmp	r3, #8
 80050ac:	d122      	bne.n	80050f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	f003 0308 	and.w	r3, r3, #8
 80050b8:	2b08      	cmp	r3, #8
 80050ba:	d11b      	bne.n	80050f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f06f 0208 	mvn.w	r2, #8
 80050c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2204      	movs	r2, #4
 80050ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	69db      	ldr	r3, [r3, #28]
 80050d2:	f003 0303 	and.w	r3, r3, #3
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d003      	beq.n	80050e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 fa26 	bl	800552c <HAL_TIM_IC_CaptureCallback>
 80050e0:	e005      	b.n	80050ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 fa18 	bl	8005518 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 fa29 	bl	8005540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	f003 0310 	and.w	r3, r3, #16
 80050fe:	2b10      	cmp	r3, #16
 8005100:	d122      	bne.n	8005148 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	f003 0310 	and.w	r3, r3, #16
 800510c:	2b10      	cmp	r3, #16
 800510e:	d11b      	bne.n	8005148 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f06f 0210 	mvn.w	r2, #16
 8005118:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2208      	movs	r2, #8
 800511e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	69db      	ldr	r3, [r3, #28]
 8005126:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800512a:	2b00      	cmp	r3, #0
 800512c:	d003      	beq.n	8005136 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 f9fc 	bl	800552c <HAL_TIM_IC_CaptureCallback>
 8005134:	e005      	b.n	8005142 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 f9ee 	bl	8005518 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 f9ff 	bl	8005540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	f003 0301 	and.w	r3, r3, #1
 8005152:	2b01      	cmp	r3, #1
 8005154:	d10e      	bne.n	8005174 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	f003 0301 	and.w	r3, r3, #1
 8005160:	2b01      	cmp	r3, #1
 8005162:	d107      	bne.n	8005174 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f06f 0201 	mvn.w	r2, #1
 800516c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f7fb fd3e 	bl	8000bf0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800517e:	2b80      	cmp	r3, #128	; 0x80
 8005180:	d10e      	bne.n	80051a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800518c:	2b80      	cmp	r3, #128	; 0x80
 800518e:	d107      	bne.n	80051a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 ff70 	bl	8006080 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051ae:	d10e      	bne.n	80051ce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ba:	2b80      	cmp	r3, #128	; 0x80
 80051bc:	d107      	bne.n	80051ce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80051c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 ff63 	bl	8006094 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d8:	2b40      	cmp	r3, #64	; 0x40
 80051da:	d10e      	bne.n	80051fa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e6:	2b40      	cmp	r3, #64	; 0x40
 80051e8:	d107      	bne.n	80051fa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f000 f9ad 	bl	8005554 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	f003 0320 	and.w	r3, r3, #32
 8005204:	2b20      	cmp	r3, #32
 8005206:	d10e      	bne.n	8005226 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	f003 0320 	and.w	r3, r3, #32
 8005212:	2b20      	cmp	r3, #32
 8005214:	d107      	bne.n	8005226 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f06f 0220 	mvn.w	r2, #32
 800521e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 ff23 	bl	800606c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005230:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005234:	d10f      	bne.n	8005256 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005240:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005244:	d107      	bne.n	8005256 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800524e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 ff29 	bl	80060a8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005260:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005264:	d10f      	bne.n	8005286 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005270:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005274:	d107      	bne.n	8005286 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800527e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 ff1b 	bl	80060bc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005290:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005294:	d10f      	bne.n	80052b6 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052a4:	d107      	bne.n	80052b6 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80052ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f000 ff0d 	bl	80060d0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80052c4:	d10f      	bne.n	80052e6 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80052d4:	d107      	bne.n	80052e6 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80052de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 feff 	bl	80060e4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052e6:	bf00      	nop
 80052e8:	3708      	adds	r7, #8
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
	...

080052f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b086      	sub	sp, #24
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052fc:	2300      	movs	r3, #0
 80052fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005306:	2b01      	cmp	r3, #1
 8005308:	d101      	bne.n	800530e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800530a:	2302      	movs	r3, #2
 800530c:	e0ff      	b.n	800550e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2201      	movs	r2, #1
 8005312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2b14      	cmp	r3, #20
 800531a:	f200 80f0 	bhi.w	80054fe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800531e:	a201      	add	r2, pc, #4	; (adr r2, 8005324 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005324:	08005379 	.word	0x08005379
 8005328:	080054ff 	.word	0x080054ff
 800532c:	080054ff 	.word	0x080054ff
 8005330:	080054ff 	.word	0x080054ff
 8005334:	080053b9 	.word	0x080053b9
 8005338:	080054ff 	.word	0x080054ff
 800533c:	080054ff 	.word	0x080054ff
 8005340:	080054ff 	.word	0x080054ff
 8005344:	080053fb 	.word	0x080053fb
 8005348:	080054ff 	.word	0x080054ff
 800534c:	080054ff 	.word	0x080054ff
 8005350:	080054ff 	.word	0x080054ff
 8005354:	0800543b 	.word	0x0800543b
 8005358:	080054ff 	.word	0x080054ff
 800535c:	080054ff 	.word	0x080054ff
 8005360:	080054ff 	.word	0x080054ff
 8005364:	0800547d 	.word	0x0800547d
 8005368:	080054ff 	.word	0x080054ff
 800536c:	080054ff 	.word	0x080054ff
 8005370:	080054ff 	.word	0x080054ff
 8005374:	080054bd 	.word	0x080054bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68b9      	ldr	r1, [r7, #8]
 800537e:	4618      	mov	r0, r3
 8005380:	f000 f982 	bl	8005688 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	699a      	ldr	r2, [r3, #24]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f042 0208 	orr.w	r2, r2, #8
 8005392:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	699a      	ldr	r2, [r3, #24]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f022 0204 	bic.w	r2, r2, #4
 80053a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	6999      	ldr	r1, [r3, #24]
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	691a      	ldr	r2, [r3, #16]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	430a      	orrs	r2, r1
 80053b4:	619a      	str	r2, [r3, #24]
      break;
 80053b6:	e0a5      	b.n	8005504 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68b9      	ldr	r1, [r7, #8]
 80053be:	4618      	mov	r0, r3
 80053c0:	f000 f9f2 	bl	80057a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	699a      	ldr	r2, [r3, #24]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	699a      	ldr	r2, [r3, #24]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6999      	ldr	r1, [r3, #24]
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	021a      	lsls	r2, r3, #8
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	430a      	orrs	r2, r1
 80053f6:	619a      	str	r2, [r3, #24]
      break;
 80053f8:	e084      	b.n	8005504 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68b9      	ldr	r1, [r7, #8]
 8005400:	4618      	mov	r0, r3
 8005402:	f000 fa5b 	bl	80058bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	69da      	ldr	r2, [r3, #28]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f042 0208 	orr.w	r2, r2, #8
 8005414:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	69da      	ldr	r2, [r3, #28]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f022 0204 	bic.w	r2, r2, #4
 8005424:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	69d9      	ldr	r1, [r3, #28]
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	691a      	ldr	r2, [r3, #16]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	430a      	orrs	r2, r1
 8005436:	61da      	str	r2, [r3, #28]
      break;
 8005438:	e064      	b.n	8005504 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68b9      	ldr	r1, [r7, #8]
 8005440:	4618      	mov	r0, r3
 8005442:	f000 fac3 	bl	80059cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	69da      	ldr	r2, [r3, #28]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005454:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	69da      	ldr	r2, [r3, #28]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005464:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	69d9      	ldr	r1, [r3, #28]
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	021a      	lsls	r2, r3, #8
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	430a      	orrs	r2, r1
 8005478:	61da      	str	r2, [r3, #28]
      break;
 800547a:	e043      	b.n	8005504 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68b9      	ldr	r1, [r7, #8]
 8005482:	4618      	mov	r0, r3
 8005484:	f000 fb2c 	bl	8005ae0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f042 0208 	orr.w	r2, r2, #8
 8005496:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f022 0204 	bic.w	r2, r2, #4
 80054a6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	691a      	ldr	r2, [r3, #16]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	430a      	orrs	r2, r1
 80054b8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80054ba:	e023      	b.n	8005504 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68b9      	ldr	r1, [r7, #8]
 80054c2:	4618      	mov	r0, r3
 80054c4:	f000 fb70 	bl	8005ba8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054d6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054e6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	021a      	lsls	r2, r3, #8
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	430a      	orrs	r2, r1
 80054fa:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80054fc:	e002      	b.n	8005504 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	75fb      	strb	r3, [r7, #23]
      break;
 8005502:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800550c:	7dfb      	ldrb	r3, [r7, #23]
}
 800550e:	4618      	mov	r0, r3
 8005510:	3718      	adds	r7, #24
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop

08005518 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005520:	bf00      	nop
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005534:	bf00      	nop
 8005536:	370c      	adds	r7, #12
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005548:	bf00      	nop
 800554a:	370c      	adds	r7, #12
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800555c:	bf00      	nop
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005568:	b480      	push	{r7}
 800556a:	b085      	sub	sp, #20
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a3c      	ldr	r2, [pc, #240]	; (800566c <TIM_Base_SetConfig+0x104>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d00f      	beq.n	80055a0 <TIM_Base_SetConfig+0x38>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005586:	d00b      	beq.n	80055a0 <TIM_Base_SetConfig+0x38>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a39      	ldr	r2, [pc, #228]	; (8005670 <TIM_Base_SetConfig+0x108>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d007      	beq.n	80055a0 <TIM_Base_SetConfig+0x38>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a38      	ldr	r2, [pc, #224]	; (8005674 <TIM_Base_SetConfig+0x10c>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d003      	beq.n	80055a0 <TIM_Base_SetConfig+0x38>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a37      	ldr	r2, [pc, #220]	; (8005678 <TIM_Base_SetConfig+0x110>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d108      	bne.n	80055b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a2d      	ldr	r2, [pc, #180]	; (800566c <TIM_Base_SetConfig+0x104>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d01b      	beq.n	80055f2 <TIM_Base_SetConfig+0x8a>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055c0:	d017      	beq.n	80055f2 <TIM_Base_SetConfig+0x8a>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a2a      	ldr	r2, [pc, #168]	; (8005670 <TIM_Base_SetConfig+0x108>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d013      	beq.n	80055f2 <TIM_Base_SetConfig+0x8a>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a29      	ldr	r2, [pc, #164]	; (8005674 <TIM_Base_SetConfig+0x10c>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d00f      	beq.n	80055f2 <TIM_Base_SetConfig+0x8a>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a28      	ldr	r2, [pc, #160]	; (8005678 <TIM_Base_SetConfig+0x110>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d00b      	beq.n	80055f2 <TIM_Base_SetConfig+0x8a>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a27      	ldr	r2, [pc, #156]	; (800567c <TIM_Base_SetConfig+0x114>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d007      	beq.n	80055f2 <TIM_Base_SetConfig+0x8a>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a26      	ldr	r2, [pc, #152]	; (8005680 <TIM_Base_SetConfig+0x118>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d003      	beq.n	80055f2 <TIM_Base_SetConfig+0x8a>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a25      	ldr	r2, [pc, #148]	; (8005684 <TIM_Base_SetConfig+0x11c>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d108      	bne.n	8005604 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	4313      	orrs	r3, r2
 8005602:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	4313      	orrs	r3, r2
 8005610:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	689a      	ldr	r2, [r3, #8]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a10      	ldr	r2, [pc, #64]	; (800566c <TIM_Base_SetConfig+0x104>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d00f      	beq.n	8005650 <TIM_Base_SetConfig+0xe8>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a11      	ldr	r2, [pc, #68]	; (8005678 <TIM_Base_SetConfig+0x110>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d00b      	beq.n	8005650 <TIM_Base_SetConfig+0xe8>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a10      	ldr	r2, [pc, #64]	; (800567c <TIM_Base_SetConfig+0x114>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d007      	beq.n	8005650 <TIM_Base_SetConfig+0xe8>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a0f      	ldr	r2, [pc, #60]	; (8005680 <TIM_Base_SetConfig+0x118>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d003      	beq.n	8005650 <TIM_Base_SetConfig+0xe8>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a0e      	ldr	r2, [pc, #56]	; (8005684 <TIM_Base_SetConfig+0x11c>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d103      	bne.n	8005658 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	691a      	ldr	r2, [r3, #16]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	615a      	str	r2, [r3, #20]
}
 800565e:	bf00      	nop
 8005660:	3714      	adds	r7, #20
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	40012c00 	.word	0x40012c00
 8005670:	40000400 	.word	0x40000400
 8005674:	40000800 	.word	0x40000800
 8005678:	40013400 	.word	0x40013400
 800567c:	40014000 	.word	0x40014000
 8005680:	40014400 	.word	0x40014400
 8005684:	40014800 	.word	0x40014800

08005688 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005688:	b480      	push	{r7}
 800568a:	b087      	sub	sp, #28
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a1b      	ldr	r3, [r3, #32]
 8005696:	f023 0201 	bic.w	r2, r3, #1
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a1b      	ldr	r3, [r3, #32]
 80056a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	699b      	ldr	r3, [r3, #24]
 80056ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f023 0303 	bic.w	r3, r3, #3
 80056c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	f023 0302 	bic.w	r3, r3, #2
 80056d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	4313      	orrs	r3, r2
 80056de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a2c      	ldr	r2, [pc, #176]	; (8005794 <TIM_OC1_SetConfig+0x10c>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d00f      	beq.n	8005708 <TIM_OC1_SetConfig+0x80>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a2b      	ldr	r2, [pc, #172]	; (8005798 <TIM_OC1_SetConfig+0x110>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d00b      	beq.n	8005708 <TIM_OC1_SetConfig+0x80>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a2a      	ldr	r2, [pc, #168]	; (800579c <TIM_OC1_SetConfig+0x114>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d007      	beq.n	8005708 <TIM_OC1_SetConfig+0x80>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a29      	ldr	r2, [pc, #164]	; (80057a0 <TIM_OC1_SetConfig+0x118>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d003      	beq.n	8005708 <TIM_OC1_SetConfig+0x80>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a28      	ldr	r2, [pc, #160]	; (80057a4 <TIM_OC1_SetConfig+0x11c>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d10c      	bne.n	8005722 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	f023 0308 	bic.w	r3, r3, #8
 800570e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	697a      	ldr	r2, [r7, #20]
 8005716:	4313      	orrs	r3, r2
 8005718:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	f023 0304 	bic.w	r3, r3, #4
 8005720:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a1b      	ldr	r2, [pc, #108]	; (8005794 <TIM_OC1_SetConfig+0x10c>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d00f      	beq.n	800574a <TIM_OC1_SetConfig+0xc2>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a1a      	ldr	r2, [pc, #104]	; (8005798 <TIM_OC1_SetConfig+0x110>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d00b      	beq.n	800574a <TIM_OC1_SetConfig+0xc2>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a19      	ldr	r2, [pc, #100]	; (800579c <TIM_OC1_SetConfig+0x114>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d007      	beq.n	800574a <TIM_OC1_SetConfig+0xc2>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a18      	ldr	r2, [pc, #96]	; (80057a0 <TIM_OC1_SetConfig+0x118>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d003      	beq.n	800574a <TIM_OC1_SetConfig+0xc2>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a17      	ldr	r2, [pc, #92]	; (80057a4 <TIM_OC1_SetConfig+0x11c>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d111      	bne.n	800576e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005750:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005758:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	4313      	orrs	r3, r2
 8005762:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	699b      	ldr	r3, [r3, #24]
 8005768:	693a      	ldr	r2, [r7, #16]
 800576a:	4313      	orrs	r3, r2
 800576c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	693a      	ldr	r2, [r7, #16]
 8005772:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	685a      	ldr	r2, [r3, #4]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	697a      	ldr	r2, [r7, #20]
 8005786:	621a      	str	r2, [r3, #32]
}
 8005788:	bf00      	nop
 800578a:	371c      	adds	r7, #28
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr
 8005794:	40012c00 	.word	0x40012c00
 8005798:	40013400 	.word	0x40013400
 800579c:	40014000 	.word	0x40014000
 80057a0:	40014400 	.word	0x40014400
 80057a4:	40014800 	.word	0x40014800

080057a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b087      	sub	sp, #28
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a1b      	ldr	r3, [r3, #32]
 80057b6:	f023 0210 	bic.w	r2, r3, #16
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a1b      	ldr	r3, [r3, #32]
 80057c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	021b      	lsls	r3, r3, #8
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	f023 0320 	bic.w	r3, r3, #32
 80057f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	011b      	lsls	r3, r3, #4
 80057fe:	697a      	ldr	r2, [r7, #20]
 8005800:	4313      	orrs	r3, r2
 8005802:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a28      	ldr	r2, [pc, #160]	; (80058a8 <TIM_OC2_SetConfig+0x100>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d003      	beq.n	8005814 <TIM_OC2_SetConfig+0x6c>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a27      	ldr	r2, [pc, #156]	; (80058ac <TIM_OC2_SetConfig+0x104>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d10d      	bne.n	8005830 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800581a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	011b      	lsls	r3, r3, #4
 8005822:	697a      	ldr	r2, [r7, #20]
 8005824:	4313      	orrs	r3, r2
 8005826:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800582e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a1d      	ldr	r2, [pc, #116]	; (80058a8 <TIM_OC2_SetConfig+0x100>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d00f      	beq.n	8005858 <TIM_OC2_SetConfig+0xb0>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a1c      	ldr	r2, [pc, #112]	; (80058ac <TIM_OC2_SetConfig+0x104>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d00b      	beq.n	8005858 <TIM_OC2_SetConfig+0xb0>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a1b      	ldr	r2, [pc, #108]	; (80058b0 <TIM_OC2_SetConfig+0x108>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d007      	beq.n	8005858 <TIM_OC2_SetConfig+0xb0>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a1a      	ldr	r2, [pc, #104]	; (80058b4 <TIM_OC2_SetConfig+0x10c>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d003      	beq.n	8005858 <TIM_OC2_SetConfig+0xb0>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a19      	ldr	r2, [pc, #100]	; (80058b8 <TIM_OC2_SetConfig+0x110>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d113      	bne.n	8005880 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800585e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005866:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	695b      	ldr	r3, [r3, #20]
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	693a      	ldr	r2, [r7, #16]
 8005870:	4313      	orrs	r3, r2
 8005872:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	699b      	ldr	r3, [r3, #24]
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	693a      	ldr	r2, [r7, #16]
 800587c:	4313      	orrs	r3, r2
 800587e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	693a      	ldr	r2, [r7, #16]
 8005884:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	68fa      	ldr	r2, [r7, #12]
 800588a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	685a      	ldr	r2, [r3, #4]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	621a      	str	r2, [r3, #32]
}
 800589a:	bf00      	nop
 800589c:	371c      	adds	r7, #28
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop
 80058a8:	40012c00 	.word	0x40012c00
 80058ac:	40013400 	.word	0x40013400
 80058b0:	40014000 	.word	0x40014000
 80058b4:	40014400 	.word	0x40014400
 80058b8:	40014800 	.word	0x40014800

080058bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058bc:	b480      	push	{r7}
 80058be:	b087      	sub	sp, #28
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a1b      	ldr	r3, [r3, #32]
 80058ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a1b      	ldr	r3, [r3, #32]
 80058d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	69db      	ldr	r3, [r3, #28]
 80058e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f023 0303 	bic.w	r3, r3, #3
 80058f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	4313      	orrs	r3, r2
 8005900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005908:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	021b      	lsls	r3, r3, #8
 8005910:	697a      	ldr	r2, [r7, #20]
 8005912:	4313      	orrs	r3, r2
 8005914:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a27      	ldr	r2, [pc, #156]	; (80059b8 <TIM_OC3_SetConfig+0xfc>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d003      	beq.n	8005926 <TIM_OC3_SetConfig+0x6a>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a26      	ldr	r2, [pc, #152]	; (80059bc <TIM_OC3_SetConfig+0x100>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d10d      	bne.n	8005942 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800592c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	021b      	lsls	r3, r3, #8
 8005934:	697a      	ldr	r2, [r7, #20]
 8005936:	4313      	orrs	r3, r2
 8005938:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005940:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a1c      	ldr	r2, [pc, #112]	; (80059b8 <TIM_OC3_SetConfig+0xfc>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d00f      	beq.n	800596a <TIM_OC3_SetConfig+0xae>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a1b      	ldr	r2, [pc, #108]	; (80059bc <TIM_OC3_SetConfig+0x100>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d00b      	beq.n	800596a <TIM_OC3_SetConfig+0xae>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a1a      	ldr	r2, [pc, #104]	; (80059c0 <TIM_OC3_SetConfig+0x104>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d007      	beq.n	800596a <TIM_OC3_SetConfig+0xae>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a19      	ldr	r2, [pc, #100]	; (80059c4 <TIM_OC3_SetConfig+0x108>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d003      	beq.n	800596a <TIM_OC3_SetConfig+0xae>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a18      	ldr	r2, [pc, #96]	; (80059c8 <TIM_OC3_SetConfig+0x10c>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d113      	bne.n	8005992 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005970:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005978:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	695b      	ldr	r3, [r3, #20]
 800597e:	011b      	lsls	r3, r3, #4
 8005980:	693a      	ldr	r2, [r7, #16]
 8005982:	4313      	orrs	r3, r2
 8005984:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	699b      	ldr	r3, [r3, #24]
 800598a:	011b      	lsls	r3, r3, #4
 800598c:	693a      	ldr	r2, [r7, #16]
 800598e:	4313      	orrs	r3, r2
 8005990:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	693a      	ldr	r2, [r7, #16]
 8005996:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	68fa      	ldr	r2, [r7, #12]
 800599c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	685a      	ldr	r2, [r3, #4]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	697a      	ldr	r2, [r7, #20]
 80059aa:	621a      	str	r2, [r3, #32]
}
 80059ac:	bf00      	nop
 80059ae:	371c      	adds	r7, #28
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr
 80059b8:	40012c00 	.word	0x40012c00
 80059bc:	40013400 	.word	0x40013400
 80059c0:	40014000 	.word	0x40014000
 80059c4:	40014400 	.word	0x40014400
 80059c8:	40014800 	.word	0x40014800

080059cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b087      	sub	sp, #28
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a1b      	ldr	r3, [r3, #32]
 80059da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a1b      	ldr	r3, [r3, #32]
 80059e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	69db      	ldr	r3, [r3, #28]
 80059f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	021b      	lsls	r3, r3, #8
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	031b      	lsls	r3, r3, #12
 8005a22:	697a      	ldr	r2, [r7, #20]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a28      	ldr	r2, [pc, #160]	; (8005acc <TIM_OC4_SetConfig+0x100>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d003      	beq.n	8005a38 <TIM_OC4_SetConfig+0x6c>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a27      	ldr	r2, [pc, #156]	; (8005ad0 <TIM_OC4_SetConfig+0x104>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d10d      	bne.n	8005a54 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	031b      	lsls	r3, r3, #12
 8005a46:	697a      	ldr	r2, [r7, #20]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a52:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a1d      	ldr	r2, [pc, #116]	; (8005acc <TIM_OC4_SetConfig+0x100>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d00f      	beq.n	8005a7c <TIM_OC4_SetConfig+0xb0>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a1c      	ldr	r2, [pc, #112]	; (8005ad0 <TIM_OC4_SetConfig+0x104>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d00b      	beq.n	8005a7c <TIM_OC4_SetConfig+0xb0>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a1b      	ldr	r2, [pc, #108]	; (8005ad4 <TIM_OC4_SetConfig+0x108>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d007      	beq.n	8005a7c <TIM_OC4_SetConfig+0xb0>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a1a      	ldr	r2, [pc, #104]	; (8005ad8 <TIM_OC4_SetConfig+0x10c>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d003      	beq.n	8005a7c <TIM_OC4_SetConfig+0xb0>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4a19      	ldr	r2, [pc, #100]	; (8005adc <TIM_OC4_SetConfig+0x110>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d113      	bne.n	8005aa4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a82:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a8a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	695b      	ldr	r3, [r3, #20]
 8005a90:	019b      	lsls	r3, r3, #6
 8005a92:	693a      	ldr	r2, [r7, #16]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	699b      	ldr	r3, [r3, #24]
 8005a9c:	019b      	lsls	r3, r3, #6
 8005a9e:	693a      	ldr	r2, [r7, #16]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	693a      	ldr	r2, [r7, #16]
 8005aa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	685a      	ldr	r2, [r3, #4]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	621a      	str	r2, [r3, #32]
}
 8005abe:	bf00      	nop
 8005ac0:	371c      	adds	r7, #28
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	40012c00 	.word	0x40012c00
 8005ad0:	40013400 	.word	0x40013400
 8005ad4:	40014000 	.word	0x40014000
 8005ad8:	40014400 	.word	0x40014400
 8005adc:	40014800 	.word	0x40014800

08005ae0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b087      	sub	sp, #28
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a1b      	ldr	r3, [r3, #32]
 8005aee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a1b      	ldr	r3, [r3, #32]
 8005afa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005b24:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	041b      	lsls	r3, r3, #16
 8005b2c:	693a      	ldr	r2, [r7, #16]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a17      	ldr	r2, [pc, #92]	; (8005b94 <TIM_OC5_SetConfig+0xb4>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d00f      	beq.n	8005b5a <TIM_OC5_SetConfig+0x7a>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a16      	ldr	r2, [pc, #88]	; (8005b98 <TIM_OC5_SetConfig+0xb8>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d00b      	beq.n	8005b5a <TIM_OC5_SetConfig+0x7a>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a15      	ldr	r2, [pc, #84]	; (8005b9c <TIM_OC5_SetConfig+0xbc>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d007      	beq.n	8005b5a <TIM_OC5_SetConfig+0x7a>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a14      	ldr	r2, [pc, #80]	; (8005ba0 <TIM_OC5_SetConfig+0xc0>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d003      	beq.n	8005b5a <TIM_OC5_SetConfig+0x7a>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a13      	ldr	r2, [pc, #76]	; (8005ba4 <TIM_OC5_SetConfig+0xc4>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d109      	bne.n	8005b6e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b60:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	021b      	lsls	r3, r3, #8
 8005b68:	697a      	ldr	r2, [r7, #20]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	697a      	ldr	r2, [r7, #20]
 8005b72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	685a      	ldr	r2, [r3, #4]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	693a      	ldr	r2, [r7, #16]
 8005b86:	621a      	str	r2, [r3, #32]
}
 8005b88:	bf00      	nop
 8005b8a:	371c      	adds	r7, #28
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr
 8005b94:	40012c00 	.word	0x40012c00
 8005b98:	40013400 	.word	0x40013400
 8005b9c:	40014000 	.word	0x40014000
 8005ba0:	40014400 	.word	0x40014400
 8005ba4:	40014800 	.word	0x40014800

08005ba8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b087      	sub	sp, #28
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a1b      	ldr	r3, [r3, #32]
 8005bb6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a1b      	ldr	r3, [r3, #32]
 8005bc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	021b      	lsls	r3, r3, #8
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005bee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	051b      	lsls	r3, r3, #20
 8005bf6:	693a      	ldr	r2, [r7, #16]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a18      	ldr	r2, [pc, #96]	; (8005c60 <TIM_OC6_SetConfig+0xb8>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d00f      	beq.n	8005c24 <TIM_OC6_SetConfig+0x7c>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a17      	ldr	r2, [pc, #92]	; (8005c64 <TIM_OC6_SetConfig+0xbc>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d00b      	beq.n	8005c24 <TIM_OC6_SetConfig+0x7c>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4a16      	ldr	r2, [pc, #88]	; (8005c68 <TIM_OC6_SetConfig+0xc0>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d007      	beq.n	8005c24 <TIM_OC6_SetConfig+0x7c>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a15      	ldr	r2, [pc, #84]	; (8005c6c <TIM_OC6_SetConfig+0xc4>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d003      	beq.n	8005c24 <TIM_OC6_SetConfig+0x7c>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a14      	ldr	r2, [pc, #80]	; (8005c70 <TIM_OC6_SetConfig+0xc8>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d109      	bne.n	8005c38 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c2a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	695b      	ldr	r3, [r3, #20]
 8005c30:	029b      	lsls	r3, r3, #10
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	697a      	ldr	r2, [r7, #20]
 8005c3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	685a      	ldr	r2, [r3, #4]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	693a      	ldr	r2, [r7, #16]
 8005c50:	621a      	str	r2, [r3, #32]
}
 8005c52:	bf00      	nop
 8005c54:	371c      	adds	r7, #28
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	40012c00 	.word	0x40012c00
 8005c64:	40013400 	.word	0x40013400
 8005c68:	40014000 	.word	0x40014000
 8005c6c:	40014400 	.word	0x40014400
 8005c70:	40014800 	.word	0x40014800

08005c74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b087      	sub	sp, #28
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	f003 031f 	and.w	r3, r3, #31
 8005c86:	2201      	movs	r2, #1
 8005c88:	fa02 f303 	lsl.w	r3, r2, r3
 8005c8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6a1a      	ldr	r2, [r3, #32]
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	43db      	mvns	r3, r3
 8005c96:	401a      	ands	r2, r3
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6a1a      	ldr	r2, [r3, #32]
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	f003 031f 	and.w	r3, r3, #31
 8005ca6:	6879      	ldr	r1, [r7, #4]
 8005ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8005cac:	431a      	orrs	r2, r3
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	621a      	str	r2, [r3, #32]
}
 8005cb2:	bf00      	nop
 8005cb4:	371c      	adds	r7, #28
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr
	...

08005cc0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d109      	bne.n	8005ce4 <HAL_TIMEx_PWMN_Start+0x24>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	bf14      	ite	ne
 8005cdc:	2301      	movne	r3, #1
 8005cde:	2300      	moveq	r3, #0
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	e022      	b.n	8005d2a <HAL_TIMEx_PWMN_Start+0x6a>
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	2b04      	cmp	r3, #4
 8005ce8:	d109      	bne.n	8005cfe <HAL_TIMEx_PWMN_Start+0x3e>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	bf14      	ite	ne
 8005cf6:	2301      	movne	r3, #1
 8005cf8:	2300      	moveq	r3, #0
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	e015      	b.n	8005d2a <HAL_TIMEx_PWMN_Start+0x6a>
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	2b08      	cmp	r3, #8
 8005d02:	d109      	bne.n	8005d18 <HAL_TIMEx_PWMN_Start+0x58>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	bf14      	ite	ne
 8005d10:	2301      	movne	r3, #1
 8005d12:	2300      	moveq	r3, #0
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	e008      	b.n	8005d2a <HAL_TIMEx_PWMN_Start+0x6a>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	bf14      	ite	ne
 8005d24:	2301      	movne	r3, #1
 8005d26:	2300      	moveq	r3, #0
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d001      	beq.n	8005d32 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e069      	b.n	8005e06 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d104      	bne.n	8005d42 <HAL_TIMEx_PWMN_Start+0x82>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2202      	movs	r2, #2
 8005d3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d40:	e013      	b.n	8005d6a <HAL_TIMEx_PWMN_Start+0xaa>
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	2b04      	cmp	r3, #4
 8005d46:	d104      	bne.n	8005d52 <HAL_TIMEx_PWMN_Start+0x92>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2202      	movs	r2, #2
 8005d4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d50:	e00b      	b.n	8005d6a <HAL_TIMEx_PWMN_Start+0xaa>
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	2b08      	cmp	r3, #8
 8005d56:	d104      	bne.n	8005d62 <HAL_TIMEx_PWMN_Start+0xa2>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2202      	movs	r2, #2
 8005d5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d60:	e003      	b.n	8005d6a <HAL_TIMEx_PWMN_Start+0xaa>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2202      	movs	r2, #2
 8005d66:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2204      	movs	r2, #4
 8005d70:	6839      	ldr	r1, [r7, #0]
 8005d72:	4618      	mov	r0, r3
 8005d74:	f000 f9c0 	bl	80060f8 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d86:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a20      	ldr	r2, [pc, #128]	; (8005e10 <HAL_TIMEx_PWMN_Start+0x150>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d018      	beq.n	8005dc4 <HAL_TIMEx_PWMN_Start+0x104>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d9a:	d013      	beq.n	8005dc4 <HAL_TIMEx_PWMN_Start+0x104>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a1c      	ldr	r2, [pc, #112]	; (8005e14 <HAL_TIMEx_PWMN_Start+0x154>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d00e      	beq.n	8005dc4 <HAL_TIMEx_PWMN_Start+0x104>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a1b      	ldr	r2, [pc, #108]	; (8005e18 <HAL_TIMEx_PWMN_Start+0x158>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d009      	beq.n	8005dc4 <HAL_TIMEx_PWMN_Start+0x104>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a19      	ldr	r2, [pc, #100]	; (8005e1c <HAL_TIMEx_PWMN_Start+0x15c>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d004      	beq.n	8005dc4 <HAL_TIMEx_PWMN_Start+0x104>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a18      	ldr	r2, [pc, #96]	; (8005e20 <HAL_TIMEx_PWMN_Start+0x160>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d115      	bne.n	8005df0 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	689a      	ldr	r2, [r3, #8]
 8005dca:	4b16      	ldr	r3, [pc, #88]	; (8005e24 <HAL_TIMEx_PWMN_Start+0x164>)
 8005dcc:	4013      	ands	r3, r2
 8005dce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2b06      	cmp	r3, #6
 8005dd4:	d015      	beq.n	8005e02 <HAL_TIMEx_PWMN_Start+0x142>
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ddc:	d011      	beq.n	8005e02 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f042 0201 	orr.w	r2, r2, #1
 8005dec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dee:	e008      	b.n	8005e02 <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f042 0201 	orr.w	r2, r2, #1
 8005dfe:	601a      	str	r2, [r3, #0]
 8005e00:	e000      	b.n	8005e04 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e02:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3710      	adds	r7, #16
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	40012c00 	.word	0x40012c00
 8005e14:	40000400 	.word	0x40000400
 8005e18:	40000800 	.word	0x40000800
 8005e1c:	40013400 	.word	0x40013400
 8005e20:	40014000 	.word	0x40014000
 8005e24:	00010007 	.word	0x00010007

08005e28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d101      	bne.n	8005e40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e3c:	2302      	movs	r3, #2
 8005e3e:	e065      	b.n	8005f0c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2202      	movs	r2, #2
 8005e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a2c      	ldr	r2, [pc, #176]	; (8005f18 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d004      	beq.n	8005e74 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a2b      	ldr	r2, [pc, #172]	; (8005f1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d108      	bne.n	8005e86 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005e7a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005e8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e90:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a1b      	ldr	r2, [pc, #108]	; (8005f18 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d018      	beq.n	8005ee0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eb6:	d013      	beq.n	8005ee0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a18      	ldr	r2, [pc, #96]	; (8005f20 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d00e      	beq.n	8005ee0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a17      	ldr	r2, [pc, #92]	; (8005f24 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d009      	beq.n	8005ee0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a12      	ldr	r2, [pc, #72]	; (8005f1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d004      	beq.n	8005ee0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a13      	ldr	r2, [pc, #76]	; (8005f28 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d10c      	bne.n	8005efa <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ee6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	68ba      	ldr	r2, [r7, #8]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	68ba      	ldr	r2, [r7, #8]
 8005ef8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2201      	movs	r2, #1
 8005efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3714      	adds	r7, #20
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr
 8005f18:	40012c00 	.word	0x40012c00
 8005f1c:	40013400 	.word	0x40013400
 8005f20:	40000400 	.word	0x40000400
 8005f24:	40000800 	.word	0x40000800
 8005f28:	40014000 	.word	0x40014000

08005f2c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b085      	sub	sp, #20
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005f36:	2300      	movs	r3, #0
 8005f38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d101      	bne.n	8005f48 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005f44:	2302      	movs	r3, #2
 8005f46:	e087      	b.n	8006058 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	695b      	ldr	r3, [r3, #20]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	699b      	ldr	r3, [r3, #24]
 8005fbc:	041b      	lsls	r3, r3, #16
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a27      	ldr	r2, [pc, #156]	; (8006064 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d004      	beq.n	8005fd6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a25      	ldr	r2, [pc, #148]	; (8006068 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d106      	bne.n	8005fe4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	69db      	ldr	r3, [r3, #28]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a1e      	ldr	r2, [pc, #120]	; (8006064 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d004      	beq.n	8005ff8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a1d      	ldr	r2, [pc, #116]	; (8006068 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d126      	bne.n	8006046 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006002:	051b      	lsls	r3, r3, #20
 8006004:	4313      	orrs	r3, r2
 8006006:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	6a1b      	ldr	r3, [r3, #32]
 8006012:	4313      	orrs	r3, r2
 8006014:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006020:	4313      	orrs	r3, r2
 8006022:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a0e      	ldr	r2, [pc, #56]	; (8006064 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d004      	beq.n	8006038 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a0d      	ldr	r2, [pc, #52]	; (8006068 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d106      	bne.n	8006046 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006042:	4313      	orrs	r3, r2
 8006044:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68fa      	ldr	r2, [r7, #12]
 800604c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006056:	2300      	movs	r3, #0
}
 8006058:	4618      	mov	r0, r3
 800605a:	3714      	adds	r7, #20
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr
 8006064:	40012c00 	.word	0x40012c00
 8006068:	40013400 	.word	0x40013400

0800606c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006074:	bf00      	nop
 8006076:	370c      	adds	r7, #12
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006088:	bf00      	nop
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800609c:	bf00      	nop
 800609e:	370c      	adds	r7, #12
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80060b0:	bf00      	nop
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80060c4:	bf00      	nop
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80060d8:	bf00      	nop
 80060da:	370c      	adds	r7, #12
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80060ec:	bf00      	nop
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b087      	sub	sp, #28
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	f003 031f 	and.w	r3, r3, #31
 800610a:	2204      	movs	r2, #4
 800610c:	fa02 f303 	lsl.w	r3, r2, r3
 8006110:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6a1a      	ldr	r2, [r3, #32]
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	43db      	mvns	r3, r3
 800611a:	401a      	ands	r2, r3
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6a1a      	ldr	r2, [r3, #32]
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	f003 031f 	and.w	r3, r3, #31
 800612a:	6879      	ldr	r1, [r7, #4]
 800612c:	fa01 f303 	lsl.w	r3, r1, r3
 8006130:	431a      	orrs	r2, r3
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	621a      	str	r2, [r3, #32]
}
 8006136:	bf00      	nop
 8006138:	371c      	adds	r7, #28
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr

08006142 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006142:	b480      	push	{r7}
 8006144:	b085      	sub	sp, #20
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006152:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006156:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	b29a      	uxth	r2, r3
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006162:	2300      	movs	r3, #0
}
 8006164:	4618      	mov	r0, r3
 8006166:	3714      	adds	r7, #20
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006170:	b480      	push	{r7}
 8006172:	b085      	sub	sp, #20
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006178:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800617c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006184:	b29a      	uxth	r2, r3
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	b29b      	uxth	r3, r3
 800618a:	43db      	mvns	r3, r3
 800618c:	b29b      	uxth	r3, r3
 800618e:	4013      	ands	r3, r2
 8006190:	b29a      	uxth	r2, r3
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	3714      	adds	r7, #20
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr

080061a6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80061a6:	b084      	sub	sp, #16
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	f107 0014 	add.w	r0, r7, #20
 80061b4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	370c      	adds	r7, #12
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	b004      	add	sp, #16
 80061e6:	4770      	bx	lr

080061e8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b09d      	sub	sp, #116	; 0x74
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80061f2:	2300      	movs	r3, #0
 80061f4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	4413      	add	r3, r2
 8006202:	881b      	ldrh	r3, [r3, #0]
 8006204:	b29b      	uxth	r3, r3
 8006206:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800620a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800620e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	78db      	ldrb	r3, [r3, #3]
 8006216:	2b03      	cmp	r3, #3
 8006218:	d81f      	bhi.n	800625a <USB_ActivateEndpoint+0x72>
 800621a:	a201      	add	r2, pc, #4	; (adr r2, 8006220 <USB_ActivateEndpoint+0x38>)
 800621c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006220:	08006231 	.word	0x08006231
 8006224:	0800624d 	.word	0x0800624d
 8006228:	08006263 	.word	0x08006263
 800622c:	0800623f 	.word	0x0800623f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006230:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006234:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006238:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800623c:	e012      	b.n	8006264 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800623e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006242:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006246:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800624a:	e00b      	b.n	8006264 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800624c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006250:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006254:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006258:	e004      	b.n	8006264 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8006260:	e000      	b.n	8006264 <USB_ActivateEndpoint+0x7c>
      break;
 8006262:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	441a      	add	r2, r3
 800626e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006272:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006276:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800627a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800627e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006282:	b29b      	uxth	r3, r3
 8006284:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	4413      	add	r3, r2
 8006290:	881b      	ldrh	r3, [r3, #0]
 8006292:	b29b      	uxth	r3, r3
 8006294:	b21b      	sxth	r3, r3
 8006296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800629a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800629e:	b21a      	sxth	r2, r3
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	b21b      	sxth	r3, r3
 80062a6:	4313      	orrs	r3, r2
 80062a8:	b21b      	sxth	r3, r3
 80062aa:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	441a      	add	r2, r3
 80062b8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80062bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	7b1b      	ldrb	r3, [r3, #12]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	f040 8149 	bne.w	800656c <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	785b      	ldrb	r3, [r3, #1]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	f000 8084 	beq.w	80063ec <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	61bb      	str	r3, [r7, #24]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	461a      	mov	r2, r3
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	4413      	add	r3, r2
 80062f6:	61bb      	str	r3, [r7, #24]
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	00da      	lsls	r2, r3, #3
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	4413      	add	r3, r2
 8006302:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006306:	617b      	str	r3, [r7, #20]
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	88db      	ldrh	r3, [r3, #6]
 800630c:	085b      	lsrs	r3, r3, #1
 800630e:	b29b      	uxth	r3, r3
 8006310:	005b      	lsls	r3, r3, #1
 8006312:	b29a      	uxth	r2, r3
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	4413      	add	r3, r2
 8006322:	881b      	ldrh	r3, [r3, #0]
 8006324:	827b      	strh	r3, [r7, #18]
 8006326:	8a7b      	ldrh	r3, [r7, #18]
 8006328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800632c:	2b00      	cmp	r3, #0
 800632e:	d01b      	beq.n	8006368 <USB_ActivateEndpoint+0x180>
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	4413      	add	r3, r2
 800633a:	881b      	ldrh	r3, [r3, #0]
 800633c:	b29b      	uxth	r3, r3
 800633e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006346:	823b      	strh	r3, [r7, #16]
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	441a      	add	r2, r3
 8006352:	8a3b      	ldrh	r3, [r7, #16]
 8006354:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006358:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800635c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006360:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006364:	b29b      	uxth	r3, r3
 8006366:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	78db      	ldrb	r3, [r3, #3]
 800636c:	2b01      	cmp	r3, #1
 800636e:	d020      	beq.n	80063b2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	4413      	add	r3, r2
 800637a:	881b      	ldrh	r3, [r3, #0]
 800637c:	b29b      	uxth	r3, r3
 800637e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006382:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006386:	81bb      	strh	r3, [r7, #12]
 8006388:	89bb      	ldrh	r3, [r7, #12]
 800638a:	f083 0320 	eor.w	r3, r3, #32
 800638e:	81bb      	strh	r3, [r7, #12]
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	441a      	add	r2, r3
 800639a:	89bb      	ldrh	r3, [r7, #12]
 800639c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	8013      	strh	r3, [r2, #0]
 80063b0:	e2a6      	b.n	8006900 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	4413      	add	r3, r2
 80063bc:	881b      	ldrh	r3, [r3, #0]
 80063be:	b29b      	uxth	r3, r3
 80063c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063c8:	81fb      	strh	r3, [r7, #14]
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	441a      	add	r2, r3
 80063d4:	89fb      	ldrh	r3, [r7, #14]
 80063d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	8013      	strh	r3, [r2, #0]
 80063ea:	e289      	b.n	8006900 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	633b      	str	r3, [r7, #48]	; 0x30
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	461a      	mov	r2, r3
 80063fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063fc:	4413      	add	r3, r2
 80063fe:	633b      	str	r3, [r7, #48]	; 0x30
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	00da      	lsls	r2, r3, #3
 8006406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006408:	4413      	add	r3, r2
 800640a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800640e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	88db      	ldrh	r3, [r3, #6]
 8006414:	085b      	lsrs	r3, r3, #1
 8006416:	b29b      	uxth	r3, r3
 8006418:	005b      	lsls	r3, r3, #1
 800641a:	b29a      	uxth	r2, r3
 800641c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800641e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	62bb      	str	r3, [r7, #40]	; 0x28
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800642a:	b29b      	uxth	r3, r3
 800642c:	461a      	mov	r2, r3
 800642e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006430:	4413      	add	r3, r2
 8006432:	62bb      	str	r3, [r7, #40]	; 0x28
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	00da      	lsls	r2, r3, #3
 800643a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643c:	4413      	add	r3, r2
 800643e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006442:	627b      	str	r3, [r7, #36]	; 0x24
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	691b      	ldr	r3, [r3, #16]
 8006448:	2b3e      	cmp	r3, #62	; 0x3e
 800644a:	d918      	bls.n	800647e <USB_ActivateEndpoint+0x296>
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	095b      	lsrs	r3, r3, #5
 8006452:	66bb      	str	r3, [r7, #104]	; 0x68
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	f003 031f 	and.w	r3, r3, #31
 800645c:	2b00      	cmp	r3, #0
 800645e:	d102      	bne.n	8006466 <USB_ActivateEndpoint+0x27e>
 8006460:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006462:	3b01      	subs	r3, #1
 8006464:	66bb      	str	r3, [r7, #104]	; 0x68
 8006466:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006468:	b29b      	uxth	r3, r3
 800646a:	029b      	lsls	r3, r3, #10
 800646c:	b29b      	uxth	r3, r3
 800646e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006472:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006476:	b29a      	uxth	r2, r3
 8006478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647a:	801a      	strh	r2, [r3, #0]
 800647c:	e029      	b.n	80064d2 <USB_ActivateEndpoint+0x2ea>
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d112      	bne.n	80064ac <USB_ActivateEndpoint+0x2c4>
 8006486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006488:	881b      	ldrh	r3, [r3, #0]
 800648a:	b29b      	uxth	r3, r3
 800648c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006490:	b29a      	uxth	r2, r3
 8006492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006494:	801a      	strh	r2, [r3, #0]
 8006496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006498:	881b      	ldrh	r3, [r3, #0]
 800649a:	b29b      	uxth	r3, r3
 800649c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064a4:	b29a      	uxth	r2, r3
 80064a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a8:	801a      	strh	r2, [r3, #0]
 80064aa:	e012      	b.n	80064d2 <USB_ActivateEndpoint+0x2ea>
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	085b      	lsrs	r3, r3, #1
 80064b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	691b      	ldr	r3, [r3, #16]
 80064b8:	f003 0301 	and.w	r3, r3, #1
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d002      	beq.n	80064c6 <USB_ActivateEndpoint+0x2de>
 80064c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064c2:	3301      	adds	r3, #1
 80064c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80064c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	029b      	lsls	r3, r3, #10
 80064cc:	b29a      	uxth	r2, r3
 80064ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	4413      	add	r3, r2
 80064dc:	881b      	ldrh	r3, [r3, #0]
 80064de:	847b      	strh	r3, [r7, #34]	; 0x22
 80064e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80064e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d01b      	beq.n	8006522 <USB_ActivateEndpoint+0x33a>
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	4413      	add	r3, r2
 80064f4:	881b      	ldrh	r3, [r3, #0]
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006500:	843b      	strh	r3, [r7, #32]
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	441a      	add	r2, r3
 800650c:	8c3b      	ldrh	r3, [r7, #32]
 800650e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006512:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006516:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800651a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800651e:	b29b      	uxth	r3, r3
 8006520:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	4413      	add	r3, r2
 800652c:	881b      	ldrh	r3, [r3, #0]
 800652e:	b29b      	uxth	r3, r3
 8006530:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006534:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006538:	83fb      	strh	r3, [r7, #30]
 800653a:	8bfb      	ldrh	r3, [r7, #30]
 800653c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006540:	83fb      	strh	r3, [r7, #30]
 8006542:	8bfb      	ldrh	r3, [r7, #30]
 8006544:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006548:	83fb      	strh	r3, [r7, #30]
 800654a:	687a      	ldr	r2, [r7, #4]
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	009b      	lsls	r3, r3, #2
 8006552:	441a      	add	r2, r3
 8006554:	8bfb      	ldrh	r3, [r7, #30]
 8006556:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800655a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800655e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006562:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006566:	b29b      	uxth	r3, r3
 8006568:	8013      	strh	r3, [r2, #0]
 800656a:	e1c9      	b.n	8006900 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	78db      	ldrb	r3, [r3, #3]
 8006570:	2b02      	cmp	r3, #2
 8006572:	d11e      	bne.n	80065b2 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	4413      	add	r3, r2
 800657e:	881b      	ldrh	r3, [r3, #0]
 8006580:	b29b      	uxth	r3, r3
 8006582:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800658a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	441a      	add	r2, r3
 8006598:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800659c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065a4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80065a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	8013      	strh	r3, [r2, #0]
 80065b0:	e01d      	b.n	80065ee <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	4413      	add	r3, r2
 80065bc:	881b      	ldrh	r3, [r3, #0]
 80065be:	b29b      	uxth	r3, r3
 80065c0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80065c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065c8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	441a      	add	r2, r3
 80065d6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80065da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	461a      	mov	r2, r3
 80065fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065fe:	4413      	add	r3, r2
 8006600:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	00da      	lsls	r2, r3, #3
 8006608:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800660a:	4413      	add	r3, r2
 800660c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006610:	65bb      	str	r3, [r7, #88]	; 0x58
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	891b      	ldrh	r3, [r3, #8]
 8006616:	085b      	lsrs	r3, r3, #1
 8006618:	b29b      	uxth	r3, r3
 800661a:	005b      	lsls	r3, r3, #1
 800661c:	b29a      	uxth	r2, r3
 800661e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006620:	801a      	strh	r2, [r3, #0]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	657b      	str	r3, [r7, #84]	; 0x54
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800662c:	b29b      	uxth	r3, r3
 800662e:	461a      	mov	r2, r3
 8006630:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006632:	4413      	add	r3, r2
 8006634:	657b      	str	r3, [r7, #84]	; 0x54
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	00da      	lsls	r2, r3, #3
 800663c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800663e:	4413      	add	r3, r2
 8006640:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006644:	653b      	str	r3, [r7, #80]	; 0x50
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	895b      	ldrh	r3, [r3, #10]
 800664a:	085b      	lsrs	r3, r3, #1
 800664c:	b29b      	uxth	r3, r3
 800664e:	005b      	lsls	r3, r3, #1
 8006650:	b29a      	uxth	r2, r3
 8006652:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006654:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	785b      	ldrb	r3, [r3, #1]
 800665a:	2b00      	cmp	r3, #0
 800665c:	f040 8093 	bne.w	8006786 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	4413      	add	r3, r2
 800666a:	881b      	ldrh	r3, [r3, #0]
 800666c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006670:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006674:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006678:	2b00      	cmp	r3, #0
 800667a:	d01b      	beq.n	80066b4 <USB_ActivateEndpoint+0x4cc>
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	4413      	add	r3, r2
 8006686:	881b      	ldrh	r3, [r3, #0]
 8006688:	b29b      	uxth	r3, r3
 800668a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800668e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006692:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	441a      	add	r2, r3
 800669e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80066a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80066ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	4413      	add	r3, r2
 80066be:	881b      	ldrh	r3, [r3, #0]
 80066c0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80066c2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80066c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d01b      	beq.n	8006704 <USB_ActivateEndpoint+0x51c>
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	4413      	add	r3, r2
 80066d6:	881b      	ldrh	r3, [r3, #0]
 80066d8:	b29b      	uxth	r3, r3
 80066da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066e2:	877b      	strh	r3, [r7, #58]	; 0x3a
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	441a      	add	r2, r3
 80066ee:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80066f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006700:	b29b      	uxth	r3, r3
 8006702:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	4413      	add	r3, r2
 800670e:	881b      	ldrh	r3, [r3, #0]
 8006710:	b29b      	uxth	r3, r3
 8006712:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800671a:	873b      	strh	r3, [r7, #56]	; 0x38
 800671c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800671e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006722:	873b      	strh	r3, [r7, #56]	; 0x38
 8006724:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006726:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800672a:	873b      	strh	r3, [r7, #56]	; 0x38
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	009b      	lsls	r3, r3, #2
 8006734:	441a      	add	r2, r3
 8006736:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006738:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800673c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006740:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006748:	b29b      	uxth	r3, r3
 800674a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	4413      	add	r3, r2
 8006756:	881b      	ldrh	r3, [r3, #0]
 8006758:	b29b      	uxth	r3, r3
 800675a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800675e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006762:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	441a      	add	r2, r3
 800676e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006770:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006774:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006778:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800677c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006780:	b29b      	uxth	r3, r3
 8006782:	8013      	strh	r3, [r2, #0]
 8006784:	e0bc      	b.n	8006900 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	4413      	add	r3, r2
 8006790:	881b      	ldrh	r3, [r3, #0]
 8006792:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006796:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800679a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d01d      	beq.n	80067de <USB_ActivateEndpoint+0x5f6>
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	4413      	add	r3, r2
 80067ac:	881b      	ldrh	r3, [r3, #0]
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067b8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	441a      	add	r2, r3
 80067c6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80067ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80067d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067da:	b29b      	uxth	r3, r3
 80067dc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	4413      	add	r3, r2
 80067e8:	881b      	ldrh	r3, [r3, #0]
 80067ea:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80067ee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80067f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d01d      	beq.n	8006836 <USB_ActivateEndpoint+0x64e>
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	4413      	add	r3, r2
 8006804:	881b      	ldrh	r3, [r3, #0]
 8006806:	b29b      	uxth	r3, r3
 8006808:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800680c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006810:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	441a      	add	r2, r3
 800681e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006822:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006826:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800682a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800682e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006832:	b29b      	uxth	r3, r3
 8006834:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	78db      	ldrb	r3, [r3, #3]
 800683a:	2b01      	cmp	r3, #1
 800683c:	d024      	beq.n	8006888 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	4413      	add	r3, r2
 8006848:	881b      	ldrh	r3, [r3, #0]
 800684a:	b29b      	uxth	r3, r3
 800684c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006850:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006854:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006858:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800685c:	f083 0320 	eor.w	r3, r3, #32
 8006860:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	441a      	add	r2, r3
 800686e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006872:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006876:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800687a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800687e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006882:	b29b      	uxth	r3, r3
 8006884:	8013      	strh	r3, [r2, #0]
 8006886:	e01d      	b.n	80068c4 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	4413      	add	r3, r2
 8006892:	881b      	ldrh	r3, [r3, #0]
 8006894:	b29b      	uxth	r3, r3
 8006896:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800689a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800689e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	441a      	add	r2, r3
 80068ac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80068b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	4413      	add	r3, r2
 80068ce:	881b      	ldrh	r3, [r3, #0]
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068da:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	441a      	add	r2, r3
 80068e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80068ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006900:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8006904:	4618      	mov	r0, r3
 8006906:	3774      	adds	r7, #116	; 0x74
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006910:	b480      	push	{r7}
 8006912:	b08d      	sub	sp, #52	; 0x34
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	7b1b      	ldrb	r3, [r3, #12]
 800691e:	2b00      	cmp	r3, #0
 8006920:	f040 808e 	bne.w	8006a40 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	785b      	ldrb	r3, [r3, #1]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d044      	beq.n	80069b6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	4413      	add	r3, r2
 8006936:	881b      	ldrh	r3, [r3, #0]
 8006938:	81bb      	strh	r3, [r7, #12]
 800693a:	89bb      	ldrh	r3, [r7, #12]
 800693c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006940:	2b00      	cmp	r3, #0
 8006942:	d01b      	beq.n	800697c <USB_DeactivateEndpoint+0x6c>
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	4413      	add	r3, r2
 800694e:	881b      	ldrh	r3, [r3, #0]
 8006950:	b29b      	uxth	r3, r3
 8006952:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800695a:	817b      	strh	r3, [r7, #10]
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	441a      	add	r2, r3
 8006966:	897b      	ldrh	r3, [r7, #10]
 8006968:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800696c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006970:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006974:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006978:	b29b      	uxth	r3, r3
 800697a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	4413      	add	r3, r2
 8006986:	881b      	ldrh	r3, [r3, #0]
 8006988:	b29b      	uxth	r3, r3
 800698a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800698e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006992:	813b      	strh	r3, [r7, #8]
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	441a      	add	r2, r3
 800699e:	893b      	ldrh	r3, [r7, #8]
 80069a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	8013      	strh	r3, [r2, #0]
 80069b4:	e192      	b.n	8006cdc <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	4413      	add	r3, r2
 80069c0:	881b      	ldrh	r3, [r3, #0]
 80069c2:	827b      	strh	r3, [r7, #18]
 80069c4:	8a7b      	ldrh	r3, [r7, #18]
 80069c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d01b      	beq.n	8006a06 <USB_DeactivateEndpoint+0xf6>
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	4413      	add	r3, r2
 80069d8:	881b      	ldrh	r3, [r3, #0]
 80069da:	b29b      	uxth	r3, r3
 80069dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069e4:	823b      	strh	r3, [r7, #16]
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	441a      	add	r2, r3
 80069f0:	8a3b      	ldrh	r3, [r7, #16]
 80069f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80069fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	4413      	add	r3, r2
 8006a10:	881b      	ldrh	r3, [r3, #0]
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a1c:	81fb      	strh	r3, [r7, #14]
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	441a      	add	r2, r3
 8006a28:	89fb      	ldrh	r3, [r7, #14]
 8006a2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	8013      	strh	r3, [r2, #0]
 8006a3e:	e14d      	b.n	8006cdc <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	785b      	ldrb	r3, [r3, #1]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	f040 80a5 	bne.w	8006b94 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	4413      	add	r3, r2
 8006a54:	881b      	ldrh	r3, [r3, #0]
 8006a56:	843b      	strh	r3, [r7, #32]
 8006a58:	8c3b      	ldrh	r3, [r7, #32]
 8006a5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d01b      	beq.n	8006a9a <USB_DeactivateEndpoint+0x18a>
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	4413      	add	r3, r2
 8006a6c:	881b      	ldrh	r3, [r3, #0]
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a78:	83fb      	strh	r3, [r7, #30]
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	441a      	add	r2, r3
 8006a84:	8bfb      	ldrh	r3, [r7, #30]
 8006a86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	4413      	add	r3, r2
 8006aa4:	881b      	ldrh	r3, [r3, #0]
 8006aa6:	83bb      	strh	r3, [r7, #28]
 8006aa8:	8bbb      	ldrh	r3, [r7, #28]
 8006aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d01b      	beq.n	8006aea <USB_DeactivateEndpoint+0x1da>
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	4413      	add	r3, r2
 8006abc:	881b      	ldrh	r3, [r3, #0]
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ac4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ac8:	837b      	strh	r3, [r7, #26]
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	441a      	add	r2, r3
 8006ad4:	8b7b      	ldrh	r3, [r7, #26]
 8006ad6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ada:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ade:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ae2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	4413      	add	r3, r2
 8006af4:	881b      	ldrh	r3, [r3, #0]
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006afc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b00:	833b      	strh	r3, [r7, #24]
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	441a      	add	r2, r3
 8006b0c:	8b3b      	ldrh	r3, [r7, #24]
 8006b0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b1a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	4413      	add	r3, r2
 8006b2c:	881b      	ldrh	r3, [r3, #0]
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b38:	82fb      	strh	r3, [r7, #22]
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	441a      	add	r2, r3
 8006b44:	8afb      	ldrh	r3, [r7, #22]
 8006b46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	4413      	add	r3, r2
 8006b64:	881b      	ldrh	r3, [r3, #0]
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b70:	82bb      	strh	r3, [r7, #20]
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	441a      	add	r2, r3
 8006b7c:	8abb      	ldrh	r3, [r7, #20]
 8006b7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	8013      	strh	r3, [r2, #0]
 8006b92:	e0a3      	b.n	8006cdc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	4413      	add	r3, r2
 8006b9e:	881b      	ldrh	r3, [r3, #0]
 8006ba0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006ba2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006ba4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d01b      	beq.n	8006be4 <USB_DeactivateEndpoint+0x2d4>
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	4413      	add	r3, r2
 8006bb6:	881b      	ldrh	r3, [r3, #0]
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bc2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	441a      	add	r2, r3
 8006bce:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006bd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	4413      	add	r3, r2
 8006bee:	881b      	ldrh	r3, [r3, #0]
 8006bf0:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006bf2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d01b      	beq.n	8006c34 <USB_DeactivateEndpoint+0x324>
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	4413      	add	r3, r2
 8006c06:	881b      	ldrh	r3, [r3, #0]
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c12:	853b      	strh	r3, [r7, #40]	; 0x28
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	441a      	add	r2, r3
 8006c1e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006c20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c2c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	4413      	add	r3, r2
 8006c3e:	881b      	ldrh	r3, [r3, #0]
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c4a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	441a      	add	r2, r3
 8006c56:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006c58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	4413      	add	r3, r2
 8006c76:	881b      	ldrh	r3, [r3, #0]
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c82:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	441a      	add	r2, r3
 8006c8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	4413      	add	r3, r2
 8006cae:	881b      	ldrh	r3, [r3, #0]
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cba:	847b      	strh	r3, [r7, #34]	; 0x22
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	441a      	add	r2, r3
 8006cc6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006cc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ccc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3734      	adds	r7, #52	; 0x34
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr

08006cea <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006cea:	b580      	push	{r7, lr}
 8006cec:	b0c2      	sub	sp, #264	; 0x108
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cf4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cf8:	6018      	str	r0, [r3, #0]
 8006cfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d02:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006d04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	785b      	ldrb	r3, [r3, #1]
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	f040 867b 	bne.w	8007a0c <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006d16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	699a      	ldr	r2, [r3, #24]
 8006d22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d908      	bls.n	8006d44 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006d32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	691b      	ldr	r3, [r3, #16]
 8006d3e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006d42:	e007      	b.n	8006d54 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006d44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	699b      	ldr	r3, [r3, #24]
 8006d50:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006d54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	7b1b      	ldrb	r3, [r3, #12]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d13a      	bne.n	8006dda <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006d64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	6959      	ldr	r1, [r3, #20]
 8006d70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	88da      	ldrh	r2, [r3, #6]
 8006d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006d86:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006d8a:	6800      	ldr	r0, [r0, #0]
 8006d8c:	f001 fc1d 	bl	80085ca <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006d90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	613b      	str	r3, [r7, #16]
 8006d9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006da0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	461a      	mov	r2, r3
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	4413      	add	r3, r2
 8006db2:	613b      	str	r3, [r7, #16]
 8006db4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006db8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	00da      	lsls	r2, r3, #3
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	4413      	add	r3, r2
 8006dc6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006dca:	60fb      	str	r3, [r7, #12]
 8006dcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dd0:	b29a      	uxth	r2, r3
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	801a      	strh	r2, [r3, #0]
 8006dd6:	f000 bde3 	b.w	80079a0 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006dda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	78db      	ldrb	r3, [r3, #3]
 8006de6:	2b02      	cmp	r3, #2
 8006de8:	f040 843a 	bne.w	8007660 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006dec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006df0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	6a1a      	ldr	r2, [r3, #32]
 8006df8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	f240 83b7 	bls.w	8007578 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006e0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	4413      	add	r3, r2
 8006e24:	881b      	ldrh	r3, [r3, #0]
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e30:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006e34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	441a      	add	r2, r3
 8006e4e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006e52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e5a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006e5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006e66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	6a1a      	ldr	r2, [r3, #32]
 8006e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e76:	1ad2      	subs	r2, r2, r3
 8006e78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006e84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	4413      	add	r3, r2
 8006e9e:	881b      	ldrh	r3, [r3, #0]
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	f000 81b3 	beq.w	8007212 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006eac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eb0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	633b      	str	r3, [r7, #48]	; 0x30
 8006eb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ebc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	785b      	ldrb	r3, [r3, #1]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d16d      	bne.n	8006fa4 <USB_EPStartXfer+0x2ba>
 8006ec8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ecc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ed4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ed8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee8:	4413      	add	r3, r2
 8006eea:	62bb      	str	r3, [r7, #40]	; 0x28
 8006eec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ef0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	00da      	lsls	r2, r3, #3
 8006efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006efc:	4413      	add	r3, r2
 8006efe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f02:	627b      	str	r3, [r7, #36]	; 0x24
 8006f04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f08:	2b3e      	cmp	r3, #62	; 0x3e
 8006f0a:	d91c      	bls.n	8006f46 <USB_EPStartXfer+0x25c>
 8006f0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f10:	095b      	lsrs	r3, r3, #5
 8006f12:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006f16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f1a:	f003 031f 	and.w	r3, r3, #31
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d104      	bne.n	8006f2c <USB_EPStartXfer+0x242>
 8006f22:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006f26:	3b01      	subs	r3, #1
 8006f28:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006f2c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	029b      	lsls	r3, r3, #10
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f3e:	b29a      	uxth	r2, r3
 8006f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f42:	801a      	strh	r2, [r3, #0]
 8006f44:	e053      	b.n	8006fee <USB_EPStartXfer+0x304>
 8006f46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d112      	bne.n	8006f74 <USB_EPStartXfer+0x28a>
 8006f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f50:	881b      	ldrh	r3, [r3, #0]
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f58:	b29a      	uxth	r2, r3
 8006f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5c:	801a      	strh	r2, [r3, #0]
 8006f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f60:	881b      	ldrh	r3, [r3, #0]
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f6c:	b29a      	uxth	r2, r3
 8006f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f70:	801a      	strh	r2, [r3, #0]
 8006f72:	e03c      	b.n	8006fee <USB_EPStartXfer+0x304>
 8006f74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f78:	085b      	lsrs	r3, r3, #1
 8006f7a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f82:	f003 0301 	and.w	r3, r3, #1
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d004      	beq.n	8006f94 <USB_EPStartXfer+0x2aa>
 8006f8a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006f8e:	3301      	adds	r3, #1
 8006f90:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006f94:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	029b      	lsls	r3, r3, #10
 8006f9c:	b29a      	uxth	r2, r3
 8006f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa0:	801a      	strh	r2, [r3, #0]
 8006fa2:	e024      	b.n	8006fee <USB_EPStartXfer+0x304>
 8006fa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	785b      	ldrb	r3, [r3, #1]
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d11c      	bne.n	8006fee <USB_EPStartXfer+0x304>
 8006fb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc8:	4413      	add	r3, r2
 8006fca:	633b      	str	r3, [r7, #48]	; 0x30
 8006fcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	00da      	lsls	r2, r3, #3
 8006fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fdc:	4413      	add	r3, r2
 8006fde:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fe8:	b29a      	uxth	r2, r3
 8006fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006fee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ff2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	895b      	ldrh	r3, [r3, #10]
 8006ffa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ffe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007002:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	6959      	ldr	r1, [r3, #20]
 800700a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800700e:	b29b      	uxth	r3, r3
 8007010:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007014:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007018:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800701c:	6800      	ldr	r0, [r0, #0]
 800701e:	f001 fad4 	bl	80085ca <USB_WritePMA>
            ep->xfer_buff += len;
 8007022:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007026:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	695a      	ldr	r2, [r3, #20]
 800702e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007032:	441a      	add	r2, r3
 8007034:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007038:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007040:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007044:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	6a1a      	ldr	r2, [r3, #32]
 800704c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007050:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	691b      	ldr	r3, [r3, #16]
 8007058:	429a      	cmp	r2, r3
 800705a:	d90f      	bls.n	800707c <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 800705c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007060:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	6a1a      	ldr	r2, [r3, #32]
 8007068:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800706c:	1ad2      	subs	r2, r2, r3
 800706e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007072:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	621a      	str	r2, [r3, #32]
 800707a:	e00e      	b.n	800709a <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800707c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007080:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	6a1b      	ldr	r3, [r3, #32]
 8007088:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800708c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007090:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	2200      	movs	r2, #0
 8007098:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800709a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800709e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	785b      	ldrb	r3, [r3, #1]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d16d      	bne.n	8007186 <USB_EPStartXfer+0x49c>
 80070aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	61bb      	str	r3, [r7, #24]
 80070b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	461a      	mov	r2, r3
 80070c8:	69bb      	ldr	r3, [r7, #24]
 80070ca:	4413      	add	r3, r2
 80070cc:	61bb      	str	r3, [r7, #24]
 80070ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	00da      	lsls	r2, r3, #3
 80070dc:	69bb      	ldr	r3, [r7, #24]
 80070de:	4413      	add	r3, r2
 80070e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80070e4:	617b      	str	r3, [r7, #20]
 80070e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070ea:	2b3e      	cmp	r3, #62	; 0x3e
 80070ec:	d91c      	bls.n	8007128 <USB_EPStartXfer+0x43e>
 80070ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070f2:	095b      	lsrs	r3, r3, #5
 80070f4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80070f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070fc:	f003 031f 	and.w	r3, r3, #31
 8007100:	2b00      	cmp	r3, #0
 8007102:	d104      	bne.n	800710e <USB_EPStartXfer+0x424>
 8007104:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007108:	3b01      	subs	r3, #1
 800710a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800710e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007112:	b29b      	uxth	r3, r3
 8007114:	029b      	lsls	r3, r3, #10
 8007116:	b29b      	uxth	r3, r3
 8007118:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800711c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007120:	b29a      	uxth	r2, r3
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	801a      	strh	r2, [r3, #0]
 8007126:	e059      	b.n	80071dc <USB_EPStartXfer+0x4f2>
 8007128:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800712c:	2b00      	cmp	r3, #0
 800712e:	d112      	bne.n	8007156 <USB_EPStartXfer+0x46c>
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	881b      	ldrh	r3, [r3, #0]
 8007134:	b29b      	uxth	r3, r3
 8007136:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800713a:	b29a      	uxth	r2, r3
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	801a      	strh	r2, [r3, #0]
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	881b      	ldrh	r3, [r3, #0]
 8007144:	b29b      	uxth	r3, r3
 8007146:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800714a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800714e:	b29a      	uxth	r2, r3
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	801a      	strh	r2, [r3, #0]
 8007154:	e042      	b.n	80071dc <USB_EPStartXfer+0x4f2>
 8007156:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800715a:	085b      	lsrs	r3, r3, #1
 800715c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007160:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007164:	f003 0301 	and.w	r3, r3, #1
 8007168:	2b00      	cmp	r3, #0
 800716a:	d004      	beq.n	8007176 <USB_EPStartXfer+0x48c>
 800716c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007170:	3301      	adds	r3, #1
 8007172:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007176:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800717a:	b29b      	uxth	r3, r3
 800717c:	029b      	lsls	r3, r3, #10
 800717e:	b29a      	uxth	r2, r3
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	801a      	strh	r2, [r3, #0]
 8007184:	e02a      	b.n	80071dc <USB_EPStartXfer+0x4f2>
 8007186:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800718a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	785b      	ldrb	r3, [r3, #1]
 8007192:	2b01      	cmp	r3, #1
 8007194:	d122      	bne.n	80071dc <USB_EPStartXfer+0x4f2>
 8007196:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800719a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	623b      	str	r3, [r7, #32]
 80071a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	461a      	mov	r2, r3
 80071b4:	6a3b      	ldr	r3, [r7, #32]
 80071b6:	4413      	add	r3, r2
 80071b8:	623b      	str	r3, [r7, #32]
 80071ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	00da      	lsls	r2, r3, #3
 80071c8:	6a3b      	ldr	r3, [r7, #32]
 80071ca:	4413      	add	r3, r2
 80071cc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80071d0:	61fb      	str	r3, [r7, #28]
 80071d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071d6:	b29a      	uxth	r2, r3
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80071dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	891b      	ldrh	r3, [r3, #8]
 80071e8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80071ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	6959      	ldr	r1, [r3, #20]
 80071f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007202:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007206:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800720a:	6800      	ldr	r0, [r0, #0]
 800720c:	f001 f9dd 	bl	80085ca <USB_WritePMA>
 8007210:	e3c6      	b.n	80079a0 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007212:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007216:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	785b      	ldrb	r3, [r3, #1]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d16d      	bne.n	80072fe <USB_EPStartXfer+0x614>
 8007222:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007226:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	64bb      	str	r3, [r7, #72]	; 0x48
 800722e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007232:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800723c:	b29b      	uxth	r3, r3
 800723e:	461a      	mov	r2, r3
 8007240:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007242:	4413      	add	r3, r2
 8007244:	64bb      	str	r3, [r7, #72]	; 0x48
 8007246:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800724a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	00da      	lsls	r2, r3, #3
 8007254:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007256:	4413      	add	r3, r2
 8007258:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800725c:	647b      	str	r3, [r7, #68]	; 0x44
 800725e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007262:	2b3e      	cmp	r3, #62	; 0x3e
 8007264:	d91c      	bls.n	80072a0 <USB_EPStartXfer+0x5b6>
 8007266:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800726a:	095b      	lsrs	r3, r3, #5
 800726c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007270:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007274:	f003 031f 	and.w	r3, r3, #31
 8007278:	2b00      	cmp	r3, #0
 800727a:	d104      	bne.n	8007286 <USB_EPStartXfer+0x59c>
 800727c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007280:	3b01      	subs	r3, #1
 8007282:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007286:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800728a:	b29b      	uxth	r3, r3
 800728c:	029b      	lsls	r3, r3, #10
 800728e:	b29b      	uxth	r3, r3
 8007290:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007294:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007298:	b29a      	uxth	r2, r3
 800729a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800729c:	801a      	strh	r2, [r3, #0]
 800729e:	e059      	b.n	8007354 <USB_EPStartXfer+0x66a>
 80072a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d112      	bne.n	80072ce <USB_EPStartXfer+0x5e4>
 80072a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072aa:	881b      	ldrh	r3, [r3, #0]
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072b2:	b29a      	uxth	r2, r3
 80072b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072b6:	801a      	strh	r2, [r3, #0]
 80072b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072ba:	881b      	ldrh	r3, [r3, #0]
 80072bc:	b29b      	uxth	r3, r3
 80072be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072c6:	b29a      	uxth	r2, r3
 80072c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072ca:	801a      	strh	r2, [r3, #0]
 80072cc:	e042      	b.n	8007354 <USB_EPStartXfer+0x66a>
 80072ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072d2:	085b      	lsrs	r3, r3, #1
 80072d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80072d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072dc:	f003 0301 	and.w	r3, r3, #1
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d004      	beq.n	80072ee <USB_EPStartXfer+0x604>
 80072e4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80072e8:	3301      	adds	r3, #1
 80072ea:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80072ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	029b      	lsls	r3, r3, #10
 80072f6:	b29a      	uxth	r2, r3
 80072f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072fa:	801a      	strh	r2, [r3, #0]
 80072fc:	e02a      	b.n	8007354 <USB_EPStartXfer+0x66a>
 80072fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007302:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	785b      	ldrb	r3, [r3, #1]
 800730a:	2b01      	cmp	r3, #1
 800730c:	d122      	bne.n	8007354 <USB_EPStartXfer+0x66a>
 800730e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007312:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	653b      	str	r3, [r7, #80]	; 0x50
 800731a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800731e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007328:	b29b      	uxth	r3, r3
 800732a:	461a      	mov	r2, r3
 800732c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800732e:	4413      	add	r3, r2
 8007330:	653b      	str	r3, [r7, #80]	; 0x50
 8007332:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007336:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	00da      	lsls	r2, r3, #3
 8007340:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007342:	4413      	add	r3, r2
 8007344:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007348:	64fb      	str	r3, [r7, #76]	; 0x4c
 800734a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800734e:	b29a      	uxth	r2, r3
 8007350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007352:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007354:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007358:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	891b      	ldrh	r3, [r3, #8]
 8007360:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007364:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007368:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	6959      	ldr	r1, [r3, #20]
 8007370:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007374:	b29b      	uxth	r3, r3
 8007376:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800737a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800737e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007382:	6800      	ldr	r0, [r0, #0]
 8007384:	f001 f921 	bl	80085ca <USB_WritePMA>
            ep->xfer_buff += len;
 8007388:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800738c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	695a      	ldr	r2, [r3, #20]
 8007394:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007398:	441a      	add	r2, r3
 800739a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800739e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80073a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	6a1a      	ldr	r2, [r3, #32]
 80073b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	429a      	cmp	r2, r3
 80073c0:	d90f      	bls.n	80073e2 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 80073c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	6a1a      	ldr	r2, [r3, #32]
 80073ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073d2:	1ad2      	subs	r2, r2, r3
 80073d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	621a      	str	r2, [r3, #32]
 80073e0:	e00e      	b.n	8007400 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 80073e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	6a1b      	ldr	r3, [r3, #32]
 80073ee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80073f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	2200      	movs	r2, #0
 80073fe:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007400:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007404:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	643b      	str	r3, [r7, #64]	; 0x40
 800740c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007410:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	785b      	ldrb	r3, [r3, #1]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d16d      	bne.n	80074f8 <USB_EPStartXfer+0x80e>
 800741c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007420:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	63bb      	str	r3, [r7, #56]	; 0x38
 8007428:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800742c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007436:	b29b      	uxth	r3, r3
 8007438:	461a      	mov	r2, r3
 800743a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800743c:	4413      	add	r3, r2
 800743e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007440:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007444:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	00da      	lsls	r2, r3, #3
 800744e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007450:	4413      	add	r3, r2
 8007452:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007456:	637b      	str	r3, [r7, #52]	; 0x34
 8007458:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800745c:	2b3e      	cmp	r3, #62	; 0x3e
 800745e:	d91c      	bls.n	800749a <USB_EPStartXfer+0x7b0>
 8007460:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007464:	095b      	lsrs	r3, r3, #5
 8007466:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800746a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800746e:	f003 031f 	and.w	r3, r3, #31
 8007472:	2b00      	cmp	r3, #0
 8007474:	d104      	bne.n	8007480 <USB_EPStartXfer+0x796>
 8007476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800747a:	3b01      	subs	r3, #1
 800747c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007484:	b29b      	uxth	r3, r3
 8007486:	029b      	lsls	r3, r3, #10
 8007488:	b29b      	uxth	r3, r3
 800748a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800748e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007492:	b29a      	uxth	r2, r3
 8007494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007496:	801a      	strh	r2, [r3, #0]
 8007498:	e053      	b.n	8007542 <USB_EPStartXfer+0x858>
 800749a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d112      	bne.n	80074c8 <USB_EPStartXfer+0x7de>
 80074a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074a4:	881b      	ldrh	r3, [r3, #0]
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80074ac:	b29a      	uxth	r2, r3
 80074ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074b0:	801a      	strh	r2, [r3, #0]
 80074b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074b4:	881b      	ldrh	r3, [r3, #0]
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074c0:	b29a      	uxth	r2, r3
 80074c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074c4:	801a      	strh	r2, [r3, #0]
 80074c6:	e03c      	b.n	8007542 <USB_EPStartXfer+0x858>
 80074c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074cc:	085b      	lsrs	r3, r3, #1
 80074ce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80074d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074d6:	f003 0301 	and.w	r3, r3, #1
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d004      	beq.n	80074e8 <USB_EPStartXfer+0x7fe>
 80074de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074e2:	3301      	adds	r3, #1
 80074e4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80074e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	029b      	lsls	r3, r3, #10
 80074f0:	b29a      	uxth	r2, r3
 80074f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074f4:	801a      	strh	r2, [r3, #0]
 80074f6:	e024      	b.n	8007542 <USB_EPStartXfer+0x858>
 80074f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	785b      	ldrb	r3, [r3, #1]
 8007504:	2b01      	cmp	r3, #1
 8007506:	d11c      	bne.n	8007542 <USB_EPStartXfer+0x858>
 8007508:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800750c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007516:	b29b      	uxth	r3, r3
 8007518:	461a      	mov	r2, r3
 800751a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800751c:	4413      	add	r3, r2
 800751e:	643b      	str	r3, [r7, #64]	; 0x40
 8007520:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007524:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	00da      	lsls	r2, r3, #3
 800752e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007530:	4413      	add	r3, r2
 8007532:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007536:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007538:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800753c:	b29a      	uxth	r2, r3
 800753e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007540:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007542:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007546:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	895b      	ldrh	r3, [r3, #10]
 800754e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007552:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007556:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	6959      	ldr	r1, [r3, #20]
 800755e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007562:	b29b      	uxth	r3, r3
 8007564:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007568:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800756c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007570:	6800      	ldr	r0, [r0, #0]
 8007572:	f001 f82a 	bl	80085ca <USB_WritePMA>
 8007576:	e213      	b.n	80079a0 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007578:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800757c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	6a1b      	ldr	r3, [r3, #32]
 8007584:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007588:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800758c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007596:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	4413      	add	r3, r2
 80075a2:	881b      	ldrh	r3, [r3, #0]
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80075aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075ae:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80075b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	441a      	add	r2, r3
 80075cc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80075d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80075e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075fe:	b29b      	uxth	r3, r3
 8007600:	461a      	mov	r2, r3
 8007602:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007604:	4413      	add	r3, r2
 8007606:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007608:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800760c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	00da      	lsls	r2, r3, #3
 8007616:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007618:	4413      	add	r3, r2
 800761a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800761e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007620:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007624:	b29a      	uxth	r2, r3
 8007626:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007628:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800762a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800762e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	891b      	ldrh	r3, [r3, #8]
 8007636:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800763a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800763e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	6959      	ldr	r1, [r3, #20]
 8007646:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800764a:	b29b      	uxth	r3, r3
 800764c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007650:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007654:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007658:	6800      	ldr	r0, [r0, #0]
 800765a:	f000 ffb6 	bl	80085ca <USB_WritePMA>
 800765e:	e19f      	b.n	80079a0 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007660:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007664:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	6a1a      	ldr	r2, [r3, #32]
 800766c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007670:	1ad2      	subs	r2, r2, r3
 8007672:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007676:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800767e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007682:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800768c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	009b      	lsls	r3, r3, #2
 8007696:	4413      	add	r3, r2
 8007698:	881b      	ldrh	r3, [r3, #0]
 800769a:	b29b      	uxth	r3, r3
 800769c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	f000 80bc 	beq.w	800781e <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80076a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	673b      	str	r3, [r7, #112]	; 0x70
 80076b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	785b      	ldrb	r3, [r3, #1]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d16d      	bne.n	800779e <USB_EPStartXfer+0xab4>
 80076c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80076ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076dc:	b29b      	uxth	r3, r3
 80076de:	461a      	mov	r2, r3
 80076e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80076e2:	4413      	add	r3, r2
 80076e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80076e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	00da      	lsls	r2, r3, #3
 80076f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80076f6:	4413      	add	r3, r2
 80076f8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80076fc:	667b      	str	r3, [r7, #100]	; 0x64
 80076fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007702:	2b3e      	cmp	r3, #62	; 0x3e
 8007704:	d91c      	bls.n	8007740 <USB_EPStartXfer+0xa56>
 8007706:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800770a:	095b      	lsrs	r3, r3, #5
 800770c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007710:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007714:	f003 031f 	and.w	r3, r3, #31
 8007718:	2b00      	cmp	r3, #0
 800771a:	d104      	bne.n	8007726 <USB_EPStartXfer+0xa3c>
 800771c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007720:	3b01      	subs	r3, #1
 8007722:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007726:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800772a:	b29b      	uxth	r3, r3
 800772c:	029b      	lsls	r3, r3, #10
 800772e:	b29b      	uxth	r3, r3
 8007730:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007734:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007738:	b29a      	uxth	r2, r3
 800773a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800773c:	801a      	strh	r2, [r3, #0]
 800773e:	e053      	b.n	80077e8 <USB_EPStartXfer+0xafe>
 8007740:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007744:	2b00      	cmp	r3, #0
 8007746:	d112      	bne.n	800776e <USB_EPStartXfer+0xa84>
 8007748:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800774a:	881b      	ldrh	r3, [r3, #0]
 800774c:	b29b      	uxth	r3, r3
 800774e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007752:	b29a      	uxth	r2, r3
 8007754:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007756:	801a      	strh	r2, [r3, #0]
 8007758:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800775a:	881b      	ldrh	r3, [r3, #0]
 800775c:	b29b      	uxth	r3, r3
 800775e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007762:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007766:	b29a      	uxth	r2, r3
 8007768:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800776a:	801a      	strh	r2, [r3, #0]
 800776c:	e03c      	b.n	80077e8 <USB_EPStartXfer+0xafe>
 800776e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007772:	085b      	lsrs	r3, r3, #1
 8007774:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007778:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800777c:	f003 0301 	and.w	r3, r3, #1
 8007780:	2b00      	cmp	r3, #0
 8007782:	d004      	beq.n	800778e <USB_EPStartXfer+0xaa4>
 8007784:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007788:	3301      	adds	r3, #1
 800778a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800778e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007792:	b29b      	uxth	r3, r3
 8007794:	029b      	lsls	r3, r3, #10
 8007796:	b29a      	uxth	r2, r3
 8007798:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800779a:	801a      	strh	r2, [r3, #0]
 800779c:	e024      	b.n	80077e8 <USB_EPStartXfer+0xafe>
 800779e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	785b      	ldrb	r3, [r3, #1]
 80077aa:	2b01      	cmp	r3, #1
 80077ac:	d11c      	bne.n	80077e8 <USB_EPStartXfer+0xafe>
 80077ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077bc:	b29b      	uxth	r3, r3
 80077be:	461a      	mov	r2, r3
 80077c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80077c2:	4413      	add	r3, r2
 80077c4:	673b      	str	r3, [r7, #112]	; 0x70
 80077c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	00da      	lsls	r2, r3, #3
 80077d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80077d6:	4413      	add	r3, r2
 80077d8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80077dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80077de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077e2:	b29a      	uxth	r2, r3
 80077e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077e6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80077e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	895b      	ldrh	r3, [r3, #10]
 80077f4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80077f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	6959      	ldr	r1, [r3, #20]
 8007804:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007808:	b29b      	uxth	r3, r3
 800780a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800780e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007812:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007816:	6800      	ldr	r0, [r0, #0]
 8007818:	f000 fed7 	bl	80085ca <USB_WritePMA>
 800781c:	e0c0      	b.n	80079a0 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800781e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007822:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	785b      	ldrb	r3, [r3, #1]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d16d      	bne.n	800790a <USB_EPStartXfer+0xc20>
 800782e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007832:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	67fb      	str	r3, [r7, #124]	; 0x7c
 800783a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800783e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007848:	b29b      	uxth	r3, r3
 800784a:	461a      	mov	r2, r3
 800784c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800784e:	4413      	add	r3, r2
 8007850:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007852:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007856:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	00da      	lsls	r2, r3, #3
 8007860:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007862:	4413      	add	r3, r2
 8007864:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007868:	67bb      	str	r3, [r7, #120]	; 0x78
 800786a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800786e:	2b3e      	cmp	r3, #62	; 0x3e
 8007870:	d91c      	bls.n	80078ac <USB_EPStartXfer+0xbc2>
 8007872:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007876:	095b      	lsrs	r3, r3, #5
 8007878:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800787c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007880:	f003 031f 	and.w	r3, r3, #31
 8007884:	2b00      	cmp	r3, #0
 8007886:	d104      	bne.n	8007892 <USB_EPStartXfer+0xba8>
 8007888:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800788c:	3b01      	subs	r3, #1
 800788e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007892:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007896:	b29b      	uxth	r3, r3
 8007898:	029b      	lsls	r3, r3, #10
 800789a:	b29b      	uxth	r3, r3
 800789c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078a4:	b29a      	uxth	r2, r3
 80078a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078a8:	801a      	strh	r2, [r3, #0]
 80078aa:	e05f      	b.n	800796c <USB_EPStartXfer+0xc82>
 80078ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d112      	bne.n	80078da <USB_EPStartXfer+0xbf0>
 80078b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078b6:	881b      	ldrh	r3, [r3, #0]
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80078be:	b29a      	uxth	r2, r3
 80078c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078c2:	801a      	strh	r2, [r3, #0]
 80078c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078c6:	881b      	ldrh	r3, [r3, #0]
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078d2:	b29a      	uxth	r2, r3
 80078d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078d6:	801a      	strh	r2, [r3, #0]
 80078d8:	e048      	b.n	800796c <USB_EPStartXfer+0xc82>
 80078da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078de:	085b      	lsrs	r3, r3, #1
 80078e0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80078e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078e8:	f003 0301 	and.w	r3, r3, #1
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d004      	beq.n	80078fa <USB_EPStartXfer+0xc10>
 80078f0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80078f4:	3301      	adds	r3, #1
 80078f6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80078fa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80078fe:	b29b      	uxth	r3, r3
 8007900:	029b      	lsls	r3, r3, #10
 8007902:	b29a      	uxth	r2, r3
 8007904:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007906:	801a      	strh	r2, [r3, #0]
 8007908:	e030      	b.n	800796c <USB_EPStartXfer+0xc82>
 800790a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800790e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	785b      	ldrb	r3, [r3, #1]
 8007916:	2b01      	cmp	r3, #1
 8007918:	d128      	bne.n	800796c <USB_EPStartXfer+0xc82>
 800791a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800791e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007928:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800792c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007936:	b29b      	uxth	r3, r3
 8007938:	461a      	mov	r2, r3
 800793a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800793e:	4413      	add	r3, r2
 8007940:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007944:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007948:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	00da      	lsls	r2, r3, #3
 8007952:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007956:	4413      	add	r3, r2
 8007958:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800795c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007960:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007964:	b29a      	uxth	r2, r3
 8007966:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800796a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800796c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007970:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	891b      	ldrh	r3, [r3, #8]
 8007978:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800797c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007980:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	6959      	ldr	r1, [r3, #20]
 8007988:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800798c:	b29b      	uxth	r3, r3
 800798e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007992:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007996:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800799a:	6800      	ldr	r0, [r0, #0]
 800799c:	f000 fe15 	bl	80085ca <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80079a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	4413      	add	r3, r2
 80079ba:	881b      	ldrh	r3, [r3, #0]
 80079bc:	b29b      	uxth	r3, r3
 80079be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079c6:	817b      	strh	r3, [r7, #10]
 80079c8:	897b      	ldrh	r3, [r7, #10]
 80079ca:	f083 0310 	eor.w	r3, r3, #16
 80079ce:	817b      	strh	r3, [r7, #10]
 80079d0:	897b      	ldrh	r3, [r7, #10]
 80079d2:	f083 0320 	eor.w	r3, r3, #32
 80079d6:	817b      	strh	r3, [r7, #10]
 80079d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	441a      	add	r2, r3
 80079f2:	897b      	ldrh	r3, [r7, #10]
 80079f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	8013      	strh	r3, [r2, #0]
 8007a08:	f000 bc9f 	b.w	800834a <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007a0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	7b1b      	ldrb	r3, [r3, #12]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	f040 80ae 	bne.w	8007b7a <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007a1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	699a      	ldr	r2, [r3, #24]
 8007a2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	691b      	ldr	r3, [r3, #16]
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d917      	bls.n	8007a6a <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 8007a3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	691b      	ldr	r3, [r3, #16]
 8007a46:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8007a4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	699a      	ldr	r2, [r3, #24]
 8007a56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a5a:	1ad2      	subs	r2, r2, r3
 8007a5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	619a      	str	r2, [r3, #24]
 8007a68:	e00e      	b.n	8007a88 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 8007a6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	699b      	ldr	r3, [r3, #24]
 8007a76:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8007a7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	2200      	movs	r2, #0
 8007a86:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007a88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007a96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007aac:	4413      	add	r3, r2
 8007aae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007ab2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ab6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	00da      	lsls	r2, r3, #3
 8007ac0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007ac4:	4413      	add	r3, r2
 8007ac6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007aca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007ace:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ad2:	2b3e      	cmp	r3, #62	; 0x3e
 8007ad4:	d91d      	bls.n	8007b12 <USB_EPStartXfer+0xe28>
 8007ad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ada:	095b      	lsrs	r3, r3, #5
 8007adc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007ae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ae4:	f003 031f 	and.w	r3, r3, #31
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d104      	bne.n	8007af6 <USB_EPStartXfer+0xe0c>
 8007aec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007af0:	3b01      	subs	r3, #1
 8007af2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007af6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	029b      	lsls	r3, r3, #10
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b08:	b29a      	uxth	r2, r3
 8007b0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b0e:	801a      	strh	r2, [r3, #0]
 8007b10:	e3e1      	b.n	80082d6 <USB_EPStartXfer+0x15ec>
 8007b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d116      	bne.n	8007b48 <USB_EPStartXfer+0xe5e>
 8007b1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b1e:	881b      	ldrh	r3, [r3, #0]
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b26:	b29a      	uxth	r2, r3
 8007b28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b2c:	801a      	strh	r2, [r3, #0]
 8007b2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b32:	881b      	ldrh	r3, [r3, #0]
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b3e:	b29a      	uxth	r2, r3
 8007b40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b44:	801a      	strh	r2, [r3, #0]
 8007b46:	e3c6      	b.n	80082d6 <USB_EPStartXfer+0x15ec>
 8007b48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b4c:	085b      	lsrs	r3, r3, #1
 8007b4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007b52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b56:	f003 0301 	and.w	r3, r3, #1
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d004      	beq.n	8007b68 <USB_EPStartXfer+0xe7e>
 8007b5e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007b62:	3301      	adds	r3, #1
 8007b64:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007b68:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	029b      	lsls	r3, r3, #10
 8007b70:	b29a      	uxth	r2, r3
 8007b72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b76:	801a      	strh	r2, [r3, #0]
 8007b78:	e3ad      	b.n	80082d6 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007b7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	78db      	ldrb	r3, [r3, #3]
 8007b86:	2b02      	cmp	r3, #2
 8007b88:	f040 8200 	bne.w	8007f8c <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007b8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	785b      	ldrb	r3, [r3, #1]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	f040 8091 	bne.w	8007cc0 <USB_EPStartXfer+0xfd6>
 8007b9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ba2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007bac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bb0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007bc2:	4413      	add	r3, r2
 8007bc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007bc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	781b      	ldrb	r3, [r3, #0]
 8007bd4:	00da      	lsls	r2, r3, #3
 8007bd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007bda:	4413      	add	r3, r2
 8007bdc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007be0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007be4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007be8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	691b      	ldr	r3, [r3, #16]
 8007bf0:	2b3e      	cmp	r3, #62	; 0x3e
 8007bf2:	d925      	bls.n	8007c40 <USB_EPStartXfer+0xf56>
 8007bf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	691b      	ldr	r3, [r3, #16]
 8007c00:	095b      	lsrs	r3, r3, #5
 8007c02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007c06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	691b      	ldr	r3, [r3, #16]
 8007c12:	f003 031f 	and.w	r3, r3, #31
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d104      	bne.n	8007c24 <USB_EPStartXfer+0xf3a>
 8007c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c1e:	3b01      	subs	r3, #1
 8007c20:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007c24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	029b      	lsls	r3, r3, #10
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c36:	b29a      	uxth	r2, r3
 8007c38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c3c:	801a      	strh	r2, [r3, #0]
 8007c3e:	e074      	b.n	8007d2a <USB_EPStartXfer+0x1040>
 8007c40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	691b      	ldr	r3, [r3, #16]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d116      	bne.n	8007c7e <USB_EPStartXfer+0xf94>
 8007c50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c54:	881b      	ldrh	r3, [r3, #0]
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c5c:	b29a      	uxth	r2, r3
 8007c5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c62:	801a      	strh	r2, [r3, #0]
 8007c64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c68:	881b      	ldrh	r3, [r3, #0]
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c74:	b29a      	uxth	r2, r3
 8007c76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c7a:	801a      	strh	r2, [r3, #0]
 8007c7c:	e055      	b.n	8007d2a <USB_EPStartXfer+0x1040>
 8007c7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	691b      	ldr	r3, [r3, #16]
 8007c8a:	085b      	lsrs	r3, r3, #1
 8007c8c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007c90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	691b      	ldr	r3, [r3, #16]
 8007c9c:	f003 0301 	and.w	r3, r3, #1
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d004      	beq.n	8007cae <USB_EPStartXfer+0xfc4>
 8007ca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ca8:	3301      	adds	r3, #1
 8007caa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	029b      	lsls	r3, r3, #10
 8007cb6:	b29a      	uxth	r2, r3
 8007cb8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007cbc:	801a      	strh	r2, [r3, #0]
 8007cbe:	e034      	b.n	8007d2a <USB_EPStartXfer+0x1040>
 8007cc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	785b      	ldrb	r3, [r3, #1]
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d12c      	bne.n	8007d2a <USB_EPStartXfer+0x1040>
 8007cd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cd4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007cde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ce2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	461a      	mov	r2, r3
 8007cf0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007cf4:	4413      	add	r3, r2
 8007cf6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007cfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	00da      	lsls	r2, r3, #3
 8007d08:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007d0c:	4413      	add	r3, r2
 8007d0e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007d12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	691b      	ldr	r3, [r3, #16]
 8007d22:	b29a      	uxth	r2, r3
 8007d24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007d28:	801a      	strh	r2, [r3, #0]
 8007d2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007d38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	785b      	ldrb	r3, [r3, #1]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	f040 8091 	bne.w	8007e6c <USB_EPStartXfer+0x1182>
 8007d4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007d58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	461a      	mov	r2, r3
 8007d6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007d6e:	4413      	add	r3, r2
 8007d70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007d74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	00da      	lsls	r2, r3, #3
 8007d82:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007d86:	4413      	add	r3, r2
 8007d88:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007d8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007d90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	691b      	ldr	r3, [r3, #16]
 8007d9c:	2b3e      	cmp	r3, #62	; 0x3e
 8007d9e:	d925      	bls.n	8007dec <USB_EPStartXfer+0x1102>
 8007da0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007da4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	691b      	ldr	r3, [r3, #16]
 8007dac:	095b      	lsrs	r3, r3, #5
 8007dae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007db2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007db6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	691b      	ldr	r3, [r3, #16]
 8007dbe:	f003 031f 	and.w	r3, r3, #31
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d104      	bne.n	8007dd0 <USB_EPStartXfer+0x10e6>
 8007dc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dca:	3b01      	subs	r3, #1
 8007dcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007dd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	029b      	lsls	r3, r3, #10
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007de2:	b29a      	uxth	r2, r3
 8007de4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007de8:	801a      	strh	r2, [r3, #0]
 8007dea:	e06d      	b.n	8007ec8 <USB_EPStartXfer+0x11de>
 8007dec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007df0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	691b      	ldr	r3, [r3, #16]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d116      	bne.n	8007e2a <USB_EPStartXfer+0x1140>
 8007dfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e00:	881b      	ldrh	r3, [r3, #0]
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e08:	b29a      	uxth	r2, r3
 8007e0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e0e:	801a      	strh	r2, [r3, #0]
 8007e10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e14:	881b      	ldrh	r3, [r3, #0]
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e20:	b29a      	uxth	r2, r3
 8007e22:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e26:	801a      	strh	r2, [r3, #0]
 8007e28:	e04e      	b.n	8007ec8 <USB_EPStartXfer+0x11de>
 8007e2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	691b      	ldr	r3, [r3, #16]
 8007e36:	085b      	lsrs	r3, r3, #1
 8007e38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007e3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	691b      	ldr	r3, [r3, #16]
 8007e48:	f003 0301 	and.w	r3, r3, #1
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d004      	beq.n	8007e5a <USB_EPStartXfer+0x1170>
 8007e50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e54:	3301      	adds	r3, #1
 8007e56:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007e5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	029b      	lsls	r3, r3, #10
 8007e62:	b29a      	uxth	r2, r3
 8007e64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e68:	801a      	strh	r2, [r3, #0]
 8007e6a:	e02d      	b.n	8007ec8 <USB_EPStartXfer+0x11de>
 8007e6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	785b      	ldrb	r3, [r3, #1]
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d125      	bne.n	8007ec8 <USB_EPStartXfer+0x11de>
 8007e7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007e92:	4413      	add	r3, r2
 8007e94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007e98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	00da      	lsls	r2, r3, #3
 8007ea6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007eaa:	4413      	add	r3, r2
 8007eac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007eb0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007eb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	691b      	ldr	r3, [r3, #16]
 8007ec0:	b29a      	uxth	r2, r3
 8007ec2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007ec6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007ec8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ecc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	69db      	ldr	r3, [r3, #28]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	f000 81fe 	beq.w	80082d6 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007eda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ede:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ee8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	009b      	lsls	r3, r3, #2
 8007ef2:	4413      	add	r3, r2
 8007ef4:	881b      	ldrh	r3, [r3, #0]
 8007ef6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007efa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d005      	beq.n	8007f12 <USB_EPStartXfer+0x1228>
 8007f06:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d10d      	bne.n	8007f2e <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007f12:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	f040 81db 	bne.w	80082d6 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007f20:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	f040 81d4 	bne.w	80082d6 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007f2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f36:	681a      	ldr	r2, [r3, #0]
 8007f38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	009b      	lsls	r3, r3, #2
 8007f46:	4413      	add	r3, r2
 8007f48:	881b      	ldrh	r3, [r3, #0]
 8007f4a:	b29b      	uxth	r3, r3
 8007f4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f54:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8007f58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	441a      	add	r2, r3
 8007f72:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8007f76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f82:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	8013      	strh	r3, [r2, #0]
 8007f8a:	e1a4      	b.n	80082d6 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007f8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	78db      	ldrb	r3, [r3, #3]
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	f040 819a 	bne.w	80082d2 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007f9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	699a      	ldr	r2, [r3, #24]
 8007faa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	691b      	ldr	r3, [r3, #16]
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d917      	bls.n	8007fea <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 8007fba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	691b      	ldr	r3, [r3, #16]
 8007fc6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8007fca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	699a      	ldr	r2, [r3, #24]
 8007fd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fda:	1ad2      	subs	r2, r2, r3
 8007fdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fe0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	619a      	str	r2, [r3, #24]
 8007fe8:	e00e      	b.n	8008008 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 8007fea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	699b      	ldr	r3, [r3, #24]
 8007ff6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8007ffa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ffe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	2200      	movs	r2, #0
 8008006:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008008:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800800c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	785b      	ldrb	r3, [r3, #1]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d178      	bne.n	800810a <USB_EPStartXfer+0x1420>
 8008018:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800801c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008026:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800802a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008034:	b29b      	uxth	r3, r3
 8008036:	461a      	mov	r2, r3
 8008038:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800803c:	4413      	add	r3, r2
 800803e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008042:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008046:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	00da      	lsls	r2, r3, #3
 8008050:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008054:	4413      	add	r3, r2
 8008056:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800805a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800805e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008062:	2b3e      	cmp	r3, #62	; 0x3e
 8008064:	d91d      	bls.n	80080a2 <USB_EPStartXfer+0x13b8>
 8008066:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800806a:	095b      	lsrs	r3, r3, #5
 800806c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008070:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008074:	f003 031f 	and.w	r3, r3, #31
 8008078:	2b00      	cmp	r3, #0
 800807a:	d104      	bne.n	8008086 <USB_EPStartXfer+0x139c>
 800807c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008080:	3b01      	subs	r3, #1
 8008082:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008086:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800808a:	b29b      	uxth	r3, r3
 800808c:	029b      	lsls	r3, r3, #10
 800808e:	b29b      	uxth	r3, r3
 8008090:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008094:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008098:	b29a      	uxth	r2, r3
 800809a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800809e:	801a      	strh	r2, [r3, #0]
 80080a0:	e064      	b.n	800816c <USB_EPStartXfer+0x1482>
 80080a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d116      	bne.n	80080d8 <USB_EPStartXfer+0x13ee>
 80080aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80080ae:	881b      	ldrh	r3, [r3, #0]
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80080b6:	b29a      	uxth	r2, r3
 80080b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80080bc:	801a      	strh	r2, [r3, #0]
 80080be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80080c2:	881b      	ldrh	r3, [r3, #0]
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080ce:	b29a      	uxth	r2, r3
 80080d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80080d4:	801a      	strh	r2, [r3, #0]
 80080d6:	e049      	b.n	800816c <USB_EPStartXfer+0x1482>
 80080d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080dc:	085b      	lsrs	r3, r3, #1
 80080de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80080e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080e6:	f003 0301 	and.w	r3, r3, #1
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d004      	beq.n	80080f8 <USB_EPStartXfer+0x140e>
 80080ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080f2:	3301      	adds	r3, #1
 80080f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80080f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	029b      	lsls	r3, r3, #10
 8008100:	b29a      	uxth	r2, r3
 8008102:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008106:	801a      	strh	r2, [r3, #0]
 8008108:	e030      	b.n	800816c <USB_EPStartXfer+0x1482>
 800810a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800810e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	785b      	ldrb	r3, [r3, #1]
 8008116:	2b01      	cmp	r3, #1
 8008118:	d128      	bne.n	800816c <USB_EPStartXfer+0x1482>
 800811a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800811e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008128:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800812c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008136:	b29b      	uxth	r3, r3
 8008138:	461a      	mov	r2, r3
 800813a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800813e:	4413      	add	r3, r2
 8008140:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008144:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008148:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	00da      	lsls	r2, r3, #3
 8008152:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008156:	4413      	add	r3, r2
 8008158:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800815c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008160:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008164:	b29a      	uxth	r2, r3
 8008166:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800816a:	801a      	strh	r2, [r3, #0]
 800816c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008170:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800817a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800817e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	785b      	ldrb	r3, [r3, #1]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d178      	bne.n	800827c <USB_EPStartXfer+0x1592>
 800818a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800818e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008198:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800819c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	461a      	mov	r2, r3
 80081aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80081ae:	4413      	add	r3, r2
 80081b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80081b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	00da      	lsls	r2, r3, #3
 80081c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80081c6:	4413      	add	r3, r2
 80081c8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80081cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80081d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081d4:	2b3e      	cmp	r3, #62	; 0x3e
 80081d6:	d91d      	bls.n	8008214 <USB_EPStartXfer+0x152a>
 80081d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081dc:	095b      	lsrs	r3, r3, #5
 80081de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80081e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081e6:	f003 031f 	and.w	r3, r3, #31
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d104      	bne.n	80081f8 <USB_EPStartXfer+0x150e>
 80081ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081f2:	3b01      	subs	r3, #1
 80081f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80081f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	029b      	lsls	r3, r3, #10
 8008200:	b29b      	uxth	r3, r3
 8008202:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008206:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800820a:	b29a      	uxth	r2, r3
 800820c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008210:	801a      	strh	r2, [r3, #0]
 8008212:	e060      	b.n	80082d6 <USB_EPStartXfer+0x15ec>
 8008214:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008218:	2b00      	cmp	r3, #0
 800821a:	d116      	bne.n	800824a <USB_EPStartXfer+0x1560>
 800821c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008220:	881b      	ldrh	r3, [r3, #0]
 8008222:	b29b      	uxth	r3, r3
 8008224:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008228:	b29a      	uxth	r2, r3
 800822a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800822e:	801a      	strh	r2, [r3, #0]
 8008230:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008234:	881b      	ldrh	r3, [r3, #0]
 8008236:	b29b      	uxth	r3, r3
 8008238:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800823c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008240:	b29a      	uxth	r2, r3
 8008242:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008246:	801a      	strh	r2, [r3, #0]
 8008248:	e045      	b.n	80082d6 <USB_EPStartXfer+0x15ec>
 800824a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800824e:	085b      	lsrs	r3, r3, #1
 8008250:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008254:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008258:	f003 0301 	and.w	r3, r3, #1
 800825c:	2b00      	cmp	r3, #0
 800825e:	d004      	beq.n	800826a <USB_EPStartXfer+0x1580>
 8008260:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008264:	3301      	adds	r3, #1
 8008266:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800826a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800826e:	b29b      	uxth	r3, r3
 8008270:	029b      	lsls	r3, r3, #10
 8008272:	b29a      	uxth	r2, r3
 8008274:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008278:	801a      	strh	r2, [r3, #0]
 800827a:	e02c      	b.n	80082d6 <USB_EPStartXfer+0x15ec>
 800827c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008280:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	785b      	ldrb	r3, [r3, #1]
 8008288:	2b01      	cmp	r3, #1
 800828a:	d124      	bne.n	80082d6 <USB_EPStartXfer+0x15ec>
 800828c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008290:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800829a:	b29b      	uxth	r3, r3
 800829c:	461a      	mov	r2, r3
 800829e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80082a2:	4413      	add	r3, r2
 80082a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80082a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	00da      	lsls	r2, r3, #3
 80082b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80082ba:	4413      	add	r3, r2
 80082bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80082c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80082c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082c8:	b29a      	uxth	r2, r3
 80082ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80082ce:	801a      	strh	r2, [r3, #0]
 80082d0:	e001      	b.n	80082d6 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 80082d2:	2301      	movs	r3, #1
 80082d4:	e03a      	b.n	800834c <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80082d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	009b      	lsls	r3, r3, #2
 80082ee:	4413      	add	r3, r2
 80082f0:	881b      	ldrh	r3, [r3, #0]
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80082f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082fc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008300:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008304:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008308:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800830c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008310:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008314:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008318:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800831c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008326:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	009b      	lsls	r3, r3, #2
 8008330:	441a      	add	r2, r3
 8008332:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008336:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800833a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800833e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008346:	b29b      	uxth	r3, r3
 8008348:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800834a:	2300      	movs	r3, #0
}
 800834c:	4618      	mov	r0, r3
 800834e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}

08008356 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008356:	b480      	push	{r7}
 8008358:	b085      	sub	sp, #20
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
 800835e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	785b      	ldrb	r3, [r3, #1]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d020      	beq.n	80083aa <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	009b      	lsls	r3, r3, #2
 8008370:	4413      	add	r3, r2
 8008372:	881b      	ldrh	r3, [r3, #0]
 8008374:	b29b      	uxth	r3, r3
 8008376:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800837a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800837e:	81bb      	strh	r3, [r7, #12]
 8008380:	89bb      	ldrh	r3, [r7, #12]
 8008382:	f083 0310 	eor.w	r3, r3, #16
 8008386:	81bb      	strh	r3, [r7, #12]
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	781b      	ldrb	r3, [r3, #0]
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	441a      	add	r2, r3
 8008392:	89bb      	ldrh	r3, [r7, #12]
 8008394:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008398:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800839c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083a4:	b29b      	uxth	r3, r3
 80083a6:	8013      	strh	r3, [r2, #0]
 80083a8:	e01f      	b.n	80083ea <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	4413      	add	r3, r2
 80083b4:	881b      	ldrh	r3, [r3, #0]
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083c0:	81fb      	strh	r3, [r7, #14]
 80083c2:	89fb      	ldrh	r3, [r7, #14]
 80083c4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80083c8:	81fb      	strh	r3, [r7, #14]
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	441a      	add	r2, r3
 80083d4:	89fb      	ldrh	r3, [r7, #14]
 80083d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80083ea:	2300      	movs	r3, #0
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3714      	adds	r7, #20
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr

080083f8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b087      	sub	sp, #28
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	7b1b      	ldrb	r3, [r3, #12]
 8008406:	2b00      	cmp	r3, #0
 8008408:	f040 809d 	bne.w	8008546 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	785b      	ldrb	r3, [r3, #1]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d04c      	beq.n	80084ae <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	009b      	lsls	r3, r3, #2
 800841c:	4413      	add	r3, r2
 800841e:	881b      	ldrh	r3, [r3, #0]
 8008420:	823b      	strh	r3, [r7, #16]
 8008422:	8a3b      	ldrh	r3, [r7, #16]
 8008424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008428:	2b00      	cmp	r3, #0
 800842a:	d01b      	beq.n	8008464 <USB_EPClearStall+0x6c>
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	009b      	lsls	r3, r3, #2
 8008434:	4413      	add	r3, r2
 8008436:	881b      	ldrh	r3, [r3, #0]
 8008438:	b29b      	uxth	r3, r3
 800843a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800843e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008442:	81fb      	strh	r3, [r7, #14]
 8008444:	687a      	ldr	r2, [r7, #4]
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	781b      	ldrb	r3, [r3, #0]
 800844a:	009b      	lsls	r3, r3, #2
 800844c:	441a      	add	r2, r3
 800844e:	89fb      	ldrh	r3, [r7, #14]
 8008450:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008454:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008458:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800845c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008460:	b29b      	uxth	r3, r3
 8008462:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	78db      	ldrb	r3, [r3, #3]
 8008468:	2b01      	cmp	r3, #1
 800846a:	d06c      	beq.n	8008546 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	009b      	lsls	r3, r3, #2
 8008474:	4413      	add	r3, r2
 8008476:	881b      	ldrh	r3, [r3, #0]
 8008478:	b29b      	uxth	r3, r3
 800847a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800847e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008482:	81bb      	strh	r3, [r7, #12]
 8008484:	89bb      	ldrh	r3, [r7, #12]
 8008486:	f083 0320 	eor.w	r3, r3, #32
 800848a:	81bb      	strh	r3, [r7, #12]
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	009b      	lsls	r3, r3, #2
 8008494:	441a      	add	r2, r3
 8008496:	89bb      	ldrh	r3, [r7, #12]
 8008498:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800849c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	8013      	strh	r3, [r2, #0]
 80084ac:	e04b      	b.n	8008546 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	009b      	lsls	r3, r3, #2
 80084b6:	4413      	add	r3, r2
 80084b8:	881b      	ldrh	r3, [r3, #0]
 80084ba:	82fb      	strh	r3, [r7, #22]
 80084bc:	8afb      	ldrh	r3, [r7, #22]
 80084be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d01b      	beq.n	80084fe <USB_EPClearStall+0x106>
 80084c6:	687a      	ldr	r2, [r7, #4]
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	009b      	lsls	r3, r3, #2
 80084ce:	4413      	add	r3, r2
 80084d0:	881b      	ldrh	r3, [r3, #0]
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084dc:	82bb      	strh	r3, [r7, #20]
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	781b      	ldrb	r3, [r3, #0]
 80084e4:	009b      	lsls	r3, r3, #2
 80084e6:	441a      	add	r2, r3
 80084e8:	8abb      	ldrh	r3, [r7, #20]
 80084ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80084f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	009b      	lsls	r3, r3, #2
 8008506:	4413      	add	r3, r2
 8008508:	881b      	ldrh	r3, [r3, #0]
 800850a:	b29b      	uxth	r3, r3
 800850c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008510:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008514:	827b      	strh	r3, [r7, #18]
 8008516:	8a7b      	ldrh	r3, [r7, #18]
 8008518:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800851c:	827b      	strh	r3, [r7, #18]
 800851e:	8a7b      	ldrh	r3, [r7, #18]
 8008520:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008524:	827b      	strh	r3, [r7, #18]
 8008526:	687a      	ldr	r2, [r7, #4]
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	781b      	ldrb	r3, [r3, #0]
 800852c:	009b      	lsls	r3, r3, #2
 800852e:	441a      	add	r2, r3
 8008530:	8a7b      	ldrh	r3, [r7, #18]
 8008532:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008536:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800853a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800853e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008542:	b29b      	uxth	r3, r3
 8008544:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008546:	2300      	movs	r3, #0
}
 8008548:	4618      	mov	r0, r3
 800854a:	371c      	adds	r7, #28
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr

08008554 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008554:	b480      	push	{r7}
 8008556:	b083      	sub	sp, #12
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	460b      	mov	r3, r1
 800855e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008560:	78fb      	ldrb	r3, [r7, #3]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d103      	bne.n	800856e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2280      	movs	r2, #128	; 0x80
 800856a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800856e:	2300      	movs	r3, #0
}
 8008570:	4618      	mov	r0, r3
 8008572:	370c      	adds	r7, #12
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr

0800857c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800857c:	b480      	push	{r7}
 800857e:	b083      	sub	sp, #12
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800858a:	b29b      	uxth	r3, r3
 800858c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008590:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008594:	b29a      	uxth	r2, r3
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800859c:	2300      	movs	r3, #0
}
 800859e:	4618      	mov	r0, r3
 80085a0:	370c      	adds	r7, #12
 80085a2:	46bd      	mov	sp, r7
 80085a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a8:	4770      	bx	lr

080085aa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80085aa:	b480      	push	{r7}
 80085ac:	b085      	sub	sp, #20
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80085b8:	b29b      	uxth	r3, r3
 80085ba:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80085bc:	68fb      	ldr	r3, [r7, #12]
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3714      	adds	r7, #20
 80085c2:	46bd      	mov	sp, r7
 80085c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c8:	4770      	bx	lr

080085ca <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80085ca:	b480      	push	{r7}
 80085cc:	b08d      	sub	sp, #52	; 0x34
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	60f8      	str	r0, [r7, #12]
 80085d2:	60b9      	str	r1, [r7, #8]
 80085d4:	4611      	mov	r1, r2
 80085d6:	461a      	mov	r2, r3
 80085d8:	460b      	mov	r3, r1
 80085da:	80fb      	strh	r3, [r7, #6]
 80085dc:	4613      	mov	r3, r2
 80085de:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80085e0:	88bb      	ldrh	r3, [r7, #4]
 80085e2:	3301      	adds	r3, #1
 80085e4:	085b      	lsrs	r3, r3, #1
 80085e6:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80085f0:	88fa      	ldrh	r2, [r7, #6]
 80085f2:	69fb      	ldr	r3, [r7, #28]
 80085f4:	4413      	add	r3, r2
 80085f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80085fa:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80085fc:	6a3b      	ldr	r3, [r7, #32]
 80085fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008600:	e01b      	b.n	800863a <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8008602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008604:	781b      	ldrb	r3, [r3, #0]
 8008606:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860a:	3301      	adds	r3, #1
 800860c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800860e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	b29b      	uxth	r3, r3
 8008614:	021b      	lsls	r3, r3, #8
 8008616:	b29b      	uxth	r3, r3
 8008618:	461a      	mov	r2, r3
 800861a:	69bb      	ldr	r3, [r7, #24]
 800861c:	4313      	orrs	r3, r2
 800861e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	b29a      	uxth	r2, r3
 8008624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008626:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800862a:	3302      	adds	r3, #2
 800862c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800862e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008630:	3301      	adds	r3, #1
 8008632:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008636:	3b01      	subs	r3, #1
 8008638:	62fb      	str	r3, [r7, #44]	; 0x2c
 800863a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800863c:	2b00      	cmp	r3, #0
 800863e:	d1e0      	bne.n	8008602 <USB_WritePMA+0x38>
  }
}
 8008640:	bf00      	nop
 8008642:	bf00      	nop
 8008644:	3734      	adds	r7, #52	; 0x34
 8008646:	46bd      	mov	sp, r7
 8008648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864c:	4770      	bx	lr

0800864e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800864e:	b480      	push	{r7}
 8008650:	b08b      	sub	sp, #44	; 0x2c
 8008652:	af00      	add	r7, sp, #0
 8008654:	60f8      	str	r0, [r7, #12]
 8008656:	60b9      	str	r1, [r7, #8]
 8008658:	4611      	mov	r1, r2
 800865a:	461a      	mov	r2, r3
 800865c:	460b      	mov	r3, r1
 800865e:	80fb      	strh	r3, [r7, #6]
 8008660:	4613      	mov	r3, r2
 8008662:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008664:	88bb      	ldrh	r3, [r7, #4]
 8008666:	085b      	lsrs	r3, r3, #1
 8008668:	b29b      	uxth	r3, r3
 800866a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008674:	88fa      	ldrh	r2, [r7, #6]
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	4413      	add	r3, r2
 800867a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800867e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008680:	69bb      	ldr	r3, [r7, #24]
 8008682:	627b      	str	r3, [r7, #36]	; 0x24
 8008684:	e018      	b.n	80086b8 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008686:	6a3b      	ldr	r3, [r7, #32]
 8008688:	881b      	ldrh	r3, [r3, #0]
 800868a:	b29b      	uxth	r3, r3
 800868c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800868e:	6a3b      	ldr	r3, [r7, #32]
 8008690:	3302      	adds	r3, #2
 8008692:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	b2da      	uxtb	r2, r3
 8008698:	69fb      	ldr	r3, [r7, #28]
 800869a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800869c:	69fb      	ldr	r3, [r7, #28]
 800869e:	3301      	adds	r3, #1
 80086a0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	0a1b      	lsrs	r3, r3, #8
 80086a6:	b2da      	uxtb	r2, r3
 80086a8:	69fb      	ldr	r3, [r7, #28]
 80086aa:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80086ac:	69fb      	ldr	r3, [r7, #28]
 80086ae:	3301      	adds	r3, #1
 80086b0:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80086b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b4:	3b01      	subs	r3, #1
 80086b6:	627b      	str	r3, [r7, #36]	; 0x24
 80086b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d1e3      	bne.n	8008686 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80086be:	88bb      	ldrh	r3, [r7, #4]
 80086c0:	f003 0301 	and.w	r3, r3, #1
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d007      	beq.n	80086da <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 80086ca:	6a3b      	ldr	r3, [r7, #32]
 80086cc:	881b      	ldrh	r3, [r3, #0]
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	b2da      	uxtb	r2, r3
 80086d6:	69fb      	ldr	r3, [r7, #28]
 80086d8:	701a      	strb	r2, [r3, #0]
  }
}
 80086da:	bf00      	nop
 80086dc:	372c      	adds	r7, #44	; 0x2c
 80086de:	46bd      	mov	sp, r7
 80086e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e4:	4770      	bx	lr

080086e6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80086e6:	b580      	push	{r7, lr}
 80086e8:	b084      	sub	sp, #16
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
 80086ee:	460b      	mov	r3, r1
 80086f0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80086f2:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80086f6:	f002 f901 	bl	800a8fc <USBD_static_malloc>
 80086fa:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d105      	bne.n	800870e <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2200      	movs	r2, #0
 8008706:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800870a:	2302      	movs	r3, #2
 800870c:	e066      	b.n	80087dc <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	68fa      	ldr	r2, [r7, #12]
 8008712:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	7c1b      	ldrb	r3, [r3, #16]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d119      	bne.n	8008752 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800871e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008722:	2202      	movs	r2, #2
 8008724:	2181      	movs	r1, #129	; 0x81
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f001 ff8d 	bl	800a646 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2201      	movs	r2, #1
 8008730:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008732:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008736:	2202      	movs	r2, #2
 8008738:	2101      	movs	r1, #1
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f001 ff83 	bl	800a646 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2201      	movs	r2, #1
 8008744:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2210      	movs	r2, #16
 800874c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8008750:	e016      	b.n	8008780 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008752:	2340      	movs	r3, #64	; 0x40
 8008754:	2202      	movs	r2, #2
 8008756:	2181      	movs	r1, #129	; 0x81
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f001 ff74 	bl	800a646 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2201      	movs	r2, #1
 8008762:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008764:	2340      	movs	r3, #64	; 0x40
 8008766:	2202      	movs	r2, #2
 8008768:	2101      	movs	r1, #1
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f001 ff6b 	bl	800a646 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2201      	movs	r2, #1
 8008774:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2210      	movs	r2, #16
 800877c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008780:	2308      	movs	r3, #8
 8008782:	2203      	movs	r2, #3
 8008784:	2182      	movs	r1, #130	; 0x82
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f001 ff5d 	bl	800a646 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2201      	movs	r2, #1
 8008790:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2200      	movs	r2, #0
 80087a2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2200      	movs	r2, #0
 80087aa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	7c1b      	ldrb	r3, [r3, #16]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d109      	bne.n	80087ca <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80087bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80087c0:	2101      	movs	r1, #1
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f002 f82f 	bl	800a826 <USBD_LL_PrepareReceive>
 80087c8:	e007      	b.n	80087da <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80087d0:	2340      	movs	r3, #64	; 0x40
 80087d2:	2101      	movs	r1, #1
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f002 f826 	bl	800a826 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80087da:	2300      	movs	r3, #0
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3710      	adds	r7, #16
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b082      	sub	sp, #8
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	460b      	mov	r3, r1
 80087ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80087f0:	2181      	movs	r1, #129	; 0x81
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f001 ff4d 	bl	800a692 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2200      	movs	r2, #0
 80087fc:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80087fe:	2101      	movs	r1, #1
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f001 ff46 	bl	800a692 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2200      	movs	r2, #0
 800880a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800880e:	2182      	movs	r1, #130	; 0x82
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f001 ff3e 	bl	800a692 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2200      	movs	r2, #0
 800881a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2200      	movs	r2, #0
 8008822:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800882c:	2b00      	cmp	r3, #0
 800882e:	d00e      	beq.n	800884e <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008840:	4618      	mov	r0, r3
 8008842:	f002 f869 	bl	800a918 <USBD_static_free>
    pdev->pClassData = NULL;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2200      	movs	r2, #0
 800884a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800884e:	2300      	movs	r3, #0
}
 8008850:	4618      	mov	r0, r3
 8008852:	3708      	adds	r7, #8
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b086      	sub	sp, #24
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008868:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800886a:	2300      	movs	r3, #0
 800886c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800886e:	2300      	movs	r3, #0
 8008870:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008872:	2300      	movs	r3, #0
 8008874:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008876:	693b      	ldr	r3, [r7, #16]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d101      	bne.n	8008880 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800887c:	2303      	movs	r3, #3
 800887e:	e0af      	b.n	80089e0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008888:	2b00      	cmp	r3, #0
 800888a:	d03f      	beq.n	800890c <USBD_CDC_Setup+0xb4>
 800888c:	2b20      	cmp	r3, #32
 800888e:	f040 809f 	bne.w	80089d0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	88db      	ldrh	r3, [r3, #6]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d02e      	beq.n	80088f8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	b25b      	sxtb	r3, r3
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	da16      	bge.n	80088d2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	683a      	ldr	r2, [r7, #0]
 80088ae:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80088b0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80088b2:	683a      	ldr	r2, [r7, #0]
 80088b4:	88d2      	ldrh	r2, [r2, #6]
 80088b6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	88db      	ldrh	r3, [r3, #6]
 80088bc:	2b07      	cmp	r3, #7
 80088be:	bf28      	it	cs
 80088c0:	2307      	movcs	r3, #7
 80088c2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	89fa      	ldrh	r2, [r7, #14]
 80088c8:	4619      	mov	r1, r3
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f001 facf 	bl	8009e6e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80088d0:	e085      	b.n	80089de <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	785a      	ldrb	r2, [r3, #1]
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	88db      	ldrh	r3, [r3, #6]
 80088e0:	b2da      	uxtb	r2, r3
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80088e8:	6939      	ldr	r1, [r7, #16]
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	88db      	ldrh	r3, [r3, #6]
 80088ee:	461a      	mov	r2, r3
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f001 fae8 	bl	8009ec6 <USBD_CtlPrepareRx>
      break;
 80088f6:	e072      	b.n	80089de <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088fe:	689b      	ldr	r3, [r3, #8]
 8008900:	683a      	ldr	r2, [r7, #0]
 8008902:	7850      	ldrb	r0, [r2, #1]
 8008904:	2200      	movs	r2, #0
 8008906:	6839      	ldr	r1, [r7, #0]
 8008908:	4798      	blx	r3
      break;
 800890a:	e068      	b.n	80089de <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	785b      	ldrb	r3, [r3, #1]
 8008910:	2b0b      	cmp	r3, #11
 8008912:	d852      	bhi.n	80089ba <USBD_CDC_Setup+0x162>
 8008914:	a201      	add	r2, pc, #4	; (adr r2, 800891c <USBD_CDC_Setup+0xc4>)
 8008916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800891a:	bf00      	nop
 800891c:	0800894d 	.word	0x0800894d
 8008920:	080089c9 	.word	0x080089c9
 8008924:	080089bb 	.word	0x080089bb
 8008928:	080089bb 	.word	0x080089bb
 800892c:	080089bb 	.word	0x080089bb
 8008930:	080089bb 	.word	0x080089bb
 8008934:	080089bb 	.word	0x080089bb
 8008938:	080089bb 	.word	0x080089bb
 800893c:	080089bb 	.word	0x080089bb
 8008940:	080089bb 	.word	0x080089bb
 8008944:	08008977 	.word	0x08008977
 8008948:	080089a1 	.word	0x080089a1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008952:	b2db      	uxtb	r3, r3
 8008954:	2b03      	cmp	r3, #3
 8008956:	d107      	bne.n	8008968 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008958:	f107 030a 	add.w	r3, r7, #10
 800895c:	2202      	movs	r2, #2
 800895e:	4619      	mov	r1, r3
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f001 fa84 	bl	8009e6e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008966:	e032      	b.n	80089ce <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008968:	6839      	ldr	r1, [r7, #0]
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f001 fa0e 	bl	8009d8c <USBD_CtlError>
            ret = USBD_FAIL;
 8008970:	2303      	movs	r3, #3
 8008972:	75fb      	strb	r3, [r7, #23]
          break;
 8008974:	e02b      	b.n	80089ce <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800897c:	b2db      	uxtb	r3, r3
 800897e:	2b03      	cmp	r3, #3
 8008980:	d107      	bne.n	8008992 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008982:	f107 030d 	add.w	r3, r7, #13
 8008986:	2201      	movs	r2, #1
 8008988:	4619      	mov	r1, r3
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f001 fa6f 	bl	8009e6e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008990:	e01d      	b.n	80089ce <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008992:	6839      	ldr	r1, [r7, #0]
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f001 f9f9 	bl	8009d8c <USBD_CtlError>
            ret = USBD_FAIL;
 800899a:	2303      	movs	r3, #3
 800899c:	75fb      	strb	r3, [r7, #23]
          break;
 800899e:	e016      	b.n	80089ce <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	2b03      	cmp	r3, #3
 80089aa:	d00f      	beq.n	80089cc <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80089ac:	6839      	ldr	r1, [r7, #0]
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f001 f9ec 	bl	8009d8c <USBD_CtlError>
            ret = USBD_FAIL;
 80089b4:	2303      	movs	r3, #3
 80089b6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80089b8:	e008      	b.n	80089cc <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80089ba:	6839      	ldr	r1, [r7, #0]
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f001 f9e5 	bl	8009d8c <USBD_CtlError>
          ret = USBD_FAIL;
 80089c2:	2303      	movs	r3, #3
 80089c4:	75fb      	strb	r3, [r7, #23]
          break;
 80089c6:	e002      	b.n	80089ce <USBD_CDC_Setup+0x176>
          break;
 80089c8:	bf00      	nop
 80089ca:	e008      	b.n	80089de <USBD_CDC_Setup+0x186>
          break;
 80089cc:	bf00      	nop
      }
      break;
 80089ce:	e006      	b.n	80089de <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80089d0:	6839      	ldr	r1, [r7, #0]
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f001 f9da 	bl	8009d8c <USBD_CtlError>
      ret = USBD_FAIL;
 80089d8:	2303      	movs	r3, #3
 80089da:	75fb      	strb	r3, [r7, #23]
      break;
 80089dc:	bf00      	nop
  }

  return (uint8_t)ret;
 80089de:	7dfb      	ldrb	r3, [r7, #23]
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3718      	adds	r7, #24
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}

080089e8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b084      	sub	sp, #16
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	460b      	mov	r3, r1
 80089f2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80089fa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d101      	bne.n	8008a0a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008a06:	2303      	movs	r3, #3
 8008a08:	e04f      	b.n	8008aaa <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a10:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008a12:	78fa      	ldrb	r2, [r7, #3]
 8008a14:	6879      	ldr	r1, [r7, #4]
 8008a16:	4613      	mov	r3, r2
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	4413      	add	r3, r2
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	440b      	add	r3, r1
 8008a20:	3318      	adds	r3, #24
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d029      	beq.n	8008a7c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008a28:	78fa      	ldrb	r2, [r7, #3]
 8008a2a:	6879      	ldr	r1, [r7, #4]
 8008a2c:	4613      	mov	r3, r2
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	4413      	add	r3, r2
 8008a32:	009b      	lsls	r3, r3, #2
 8008a34:	440b      	add	r3, r1
 8008a36:	3318      	adds	r3, #24
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	78f9      	ldrb	r1, [r7, #3]
 8008a3c:	68f8      	ldr	r0, [r7, #12]
 8008a3e:	460b      	mov	r3, r1
 8008a40:	009b      	lsls	r3, r3, #2
 8008a42:	440b      	add	r3, r1
 8008a44:	00db      	lsls	r3, r3, #3
 8008a46:	4403      	add	r3, r0
 8008a48:	3338      	adds	r3, #56	; 0x38
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	fbb2 f1f3 	udiv	r1, r2, r3
 8008a50:	fb01 f303 	mul.w	r3, r1, r3
 8008a54:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d110      	bne.n	8008a7c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008a5a:	78fa      	ldrb	r2, [r7, #3]
 8008a5c:	6879      	ldr	r1, [r7, #4]
 8008a5e:	4613      	mov	r3, r2
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	4413      	add	r3, r2
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	440b      	add	r3, r1
 8008a68:	3318      	adds	r3, #24
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008a6e:	78f9      	ldrb	r1, [r7, #3]
 8008a70:	2300      	movs	r3, #0
 8008a72:	2200      	movs	r2, #0
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f001 feb5 	bl	800a7e4 <USBD_LL_Transmit>
 8008a7a:	e015      	b.n	8008aa8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a8a:	691b      	ldr	r3, [r3, #16]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d00b      	beq.n	8008aa8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a96:	691b      	ldr	r3, [r3, #16]
 8008a98:	68ba      	ldr	r2, [r7, #8]
 8008a9a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008a9e:	68ba      	ldr	r2, [r7, #8]
 8008aa0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008aa4:	78fa      	ldrb	r2, [r7, #3]
 8008aa6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008aa8:	2300      	movs	r3, #0
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3710      	adds	r7, #16
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}

08008ab2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008ab2:	b580      	push	{r7, lr}
 8008ab4:	b084      	sub	sp, #16
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	6078      	str	r0, [r7, #4]
 8008aba:	460b      	mov	r3, r1
 8008abc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ac4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d101      	bne.n	8008ad4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008ad0:	2303      	movs	r3, #3
 8008ad2:	e015      	b.n	8008b00 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008ad4:	78fb      	ldrb	r3, [r7, #3]
 8008ad6:	4619      	mov	r1, r3
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f001 fec5 	bl	800a868 <USBD_LL_GetRxDataSize>
 8008ade:	4602      	mov	r2, r0
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008aec:	68db      	ldr	r3, [r3, #12]
 8008aee:	68fa      	ldr	r2, [r7, #12]
 8008af0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008af4:	68fa      	ldr	r2, [r7, #12]
 8008af6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008afa:	4611      	mov	r1, r2
 8008afc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008afe:	2300      	movs	r3, #0
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3710      	adds	r7, #16
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b084      	sub	sp, #16
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b16:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d101      	bne.n	8008b22 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8008b1e:	2303      	movs	r3, #3
 8008b20:	e01b      	b.n	8008b5a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d015      	beq.n	8008b58 <USBD_CDC_EP0_RxReady+0x50>
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008b32:	2bff      	cmp	r3, #255	; 0xff
 8008b34:	d010      	beq.n	8008b58 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	68fa      	ldr	r2, [r7, #12]
 8008b40:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008b44:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008b46:	68fa      	ldr	r2, [r7, #12]
 8008b48:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008b4c:	b292      	uxth	r2, r2
 8008b4e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	22ff      	movs	r2, #255	; 0xff
 8008b54:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008b58:	2300      	movs	r3, #0
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3710      	adds	r7, #16
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
	...

08008b64 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b083      	sub	sp, #12
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2243      	movs	r2, #67	; 0x43
 8008b70:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008b72:	4b03      	ldr	r3, [pc, #12]	; (8008b80 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	370c      	adds	r7, #12
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr
 8008b80:	20000094 	.word	0x20000094

08008b84 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b083      	sub	sp, #12
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2243      	movs	r2, #67	; 0x43
 8008b90:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008b92:	4b03      	ldr	r3, [pc, #12]	; (8008ba0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	370c      	adds	r7, #12
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr
 8008ba0:	20000050 	.word	0x20000050

08008ba4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b083      	sub	sp, #12
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2243      	movs	r2, #67	; 0x43
 8008bb0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8008bb2:	4b03      	ldr	r3, [pc, #12]	; (8008bc0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	370c      	adds	r7, #12
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr
 8008bc0:	200000d8 	.word	0x200000d8

08008bc4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b083      	sub	sp, #12
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	220a      	movs	r2, #10
 8008bd0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008bd2:	4b03      	ldr	r3, [pc, #12]	; (8008be0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	370c      	adds	r7, #12
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr
 8008be0:	2000000c 	.word	0x2000000c

08008be4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b083      	sub	sp, #12
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d101      	bne.n	8008bf8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008bf4:	2303      	movs	r3, #3
 8008bf6:	e004      	b.n	8008c02 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	683a      	ldr	r2, [r7, #0]
 8008bfc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008c00:	2300      	movs	r3, #0
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	370c      	adds	r7, #12
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr

08008c0e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008c0e:	b480      	push	{r7}
 8008c10:	b087      	sub	sp, #28
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	60f8      	str	r0, [r7, #12]
 8008c16:	60b9      	str	r1, [r7, #8]
 8008c18:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c20:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d101      	bne.n	8008c2c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008c28:	2303      	movs	r3, #3
 8008c2a:	e008      	b.n	8008c3e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	68ba      	ldr	r2, [r7, #8]
 8008c30:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008c3c:	2300      	movs	r3, #0
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	371c      	adds	r7, #28
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr

08008c4a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008c4a:	b480      	push	{r7}
 8008c4c:	b085      	sub	sp, #20
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	6078      	str	r0, [r7, #4]
 8008c52:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c5a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d101      	bne.n	8008c66 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8008c62:	2303      	movs	r3, #3
 8008c64:	e004      	b.n	8008c70 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	683a      	ldr	r2, [r7, #0]
 8008c6a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008c6e:	2300      	movs	r3, #0
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3714      	adds	r7, #20
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr

08008c7c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b084      	sub	sp, #16
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c8a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d101      	bne.n	8008c9e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008c9a:	2303      	movs	r3, #3
 8008c9c:	e01a      	b.n	8008cd4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d114      	bne.n	8008cd2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	2201      	movs	r2, #1
 8008cac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008cc6:	2181      	movs	r1, #129	; 0x81
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f001 fd8b 	bl	800a7e4 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3710      	adds	r7, #16
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b084      	sub	sp, #16
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008cea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d101      	bne.n	8008cfa <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008cf6:	2303      	movs	r3, #3
 8008cf8:	e016      	b.n	8008d28 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	7c1b      	ldrb	r3, [r3, #16]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d109      	bne.n	8008d16 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008d08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d0c:	2101      	movs	r1, #1
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f001 fd89 	bl	800a826 <USBD_LL_PrepareReceive>
 8008d14:	e007      	b.n	8008d26 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008d1c:	2340      	movs	r3, #64	; 0x40
 8008d1e:	2101      	movs	r1, #1
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f001 fd80 	bl	800a826 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008d26:	2300      	movs	r3, #0
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3710      	adds	r7, #16
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b086      	sub	sp, #24
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	60f8      	str	r0, [r7, #12]
 8008d38:	60b9      	str	r1, [r7, #8]
 8008d3a:	4613      	mov	r3, r2
 8008d3c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d101      	bne.n	8008d48 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008d44:	2303      	movs	r3, #3
 8008d46:	e01f      	b.n	8008d88 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2200      	movs	r2, #0
 8008d54:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d003      	beq.n	8008d6e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	68ba      	ldr	r2, [r7, #8]
 8008d6a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	2201      	movs	r2, #1
 8008d72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	79fa      	ldrb	r2, [r7, #7]
 8008d7a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008d7c:	68f8      	ldr	r0, [r7, #12]
 8008d7e:	f001 fbe7 	bl	800a550 <USBD_LL_Init>
 8008d82:	4603      	mov	r3, r0
 8008d84:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008d86:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3718      	adds	r7, #24
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}

08008d90 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b084      	sub	sp, #16
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d101      	bne.n	8008da8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008da4:	2303      	movs	r3, #3
 8008da6:	e016      	b.n	8008dd6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	683a      	ldr	r2, [r7, #0]
 8008dac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d00b      	beq.n	8008dd4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc4:	f107 020e 	add.w	r2, r7, #14
 8008dc8:	4610      	mov	r0, r2
 8008dca:	4798      	blx	r3
 8008dcc:	4602      	mov	r2, r0
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008dd4:	2300      	movs	r3, #0
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3710      	adds	r7, #16
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}

08008dde <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008dde:	b580      	push	{r7, lr}
 8008de0:	b082      	sub	sp, #8
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f001 fc12 	bl	800a610 <USBD_LL_Start>
 8008dec:	4603      	mov	r3, r0
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3708      	adds	r7, #8
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}

08008df6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008df6:	b480      	push	{r7}
 8008df8:	b083      	sub	sp, #12
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008dfe:	2300      	movs	r3, #0
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	370c      	adds	r7, #12
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr

08008e0c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b084      	sub	sp, #16
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	460b      	mov	r3, r1
 8008e16:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008e18:	2303      	movs	r3, #3
 8008e1a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d009      	beq.n	8008e3a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	78fa      	ldrb	r2, [r7, #3]
 8008e30:	4611      	mov	r1, r2
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	4798      	blx	r3
 8008e36:	4603      	mov	r3, r0
 8008e38:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3710      	adds	r7, #16
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}

08008e44 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b082      	sub	sp, #8
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	460b      	mov	r3, r1
 8008e4e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d007      	beq.n	8008e6a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	78fa      	ldrb	r2, [r7, #3]
 8008e64:	4611      	mov	r1, r2
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	4798      	blx	r3
  }

  return USBD_OK;
 8008e6a:	2300      	movs	r3, #0
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3708      	adds	r7, #8
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b084      	sub	sp, #16
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008e84:	6839      	ldr	r1, [r7, #0]
 8008e86:	4618      	mov	r0, r3
 8008e88:	f000 ff46 	bl	8009d18 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2201      	movs	r2, #1
 8008e90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008e9a:	461a      	mov	r2, r3
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008ea8:	f003 031f 	and.w	r3, r3, #31
 8008eac:	2b02      	cmp	r3, #2
 8008eae:	d01a      	beq.n	8008ee6 <USBD_LL_SetupStage+0x72>
 8008eb0:	2b02      	cmp	r3, #2
 8008eb2:	d822      	bhi.n	8008efa <USBD_LL_SetupStage+0x86>
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d002      	beq.n	8008ebe <USBD_LL_SetupStage+0x4a>
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d00a      	beq.n	8008ed2 <USBD_LL_SetupStage+0x5e>
 8008ebc:	e01d      	b.n	8008efa <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008ec4:	4619      	mov	r1, r3
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 f9ee 	bl	80092a8 <USBD_StdDevReq>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	73fb      	strb	r3, [r7, #15]
      break;
 8008ed0:	e020      	b.n	8008f14 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008ed8:	4619      	mov	r1, r3
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 fa52 	bl	8009384 <USBD_StdItfReq>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	73fb      	strb	r3, [r7, #15]
      break;
 8008ee4:	e016      	b.n	8008f14 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008eec:	4619      	mov	r1, r3
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f000 fa91 	bl	8009416 <USBD_StdEPReq>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	73fb      	strb	r3, [r7, #15]
      break;
 8008ef8:	e00c      	b.n	8008f14 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008f00:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	4619      	mov	r1, r3
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f001 fbe1 	bl	800a6d0 <USBD_LL_StallEP>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	73fb      	strb	r3, [r7, #15]
      break;
 8008f12:	bf00      	nop
  }

  return ret;
 8008f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3710      	adds	r7, #16
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}

08008f1e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008f1e:	b580      	push	{r7, lr}
 8008f20:	b086      	sub	sp, #24
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	60f8      	str	r0, [r7, #12]
 8008f26:	460b      	mov	r3, r1
 8008f28:	607a      	str	r2, [r7, #4]
 8008f2a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008f2c:	7afb      	ldrb	r3, [r7, #11]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d138      	bne.n	8008fa4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008f38:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008f40:	2b03      	cmp	r3, #3
 8008f42:	d14a      	bne.n	8008fda <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	689a      	ldr	r2, [r3, #8]
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	68db      	ldr	r3, [r3, #12]
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d913      	bls.n	8008f78 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	689a      	ldr	r2, [r3, #8]
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	68db      	ldr	r3, [r3, #12]
 8008f58:	1ad2      	subs	r2, r2, r3
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	68da      	ldr	r2, [r3, #12]
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	4293      	cmp	r3, r2
 8008f68:	bf28      	it	cs
 8008f6a:	4613      	movcs	r3, r2
 8008f6c:	461a      	mov	r2, r3
 8008f6e:	6879      	ldr	r1, [r7, #4]
 8008f70:	68f8      	ldr	r0, [r7, #12]
 8008f72:	f000 ffc5 	bl	8009f00 <USBD_CtlContinueRx>
 8008f76:	e030      	b.n	8008fda <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f7e:	b2db      	uxtb	r3, r3
 8008f80:	2b03      	cmp	r3, #3
 8008f82:	d10b      	bne.n	8008f9c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f8a:	691b      	ldr	r3, [r3, #16]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d005      	beq.n	8008f9c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f96:	691b      	ldr	r3, [r3, #16]
 8008f98:	68f8      	ldr	r0, [r7, #12]
 8008f9a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008f9c:	68f8      	ldr	r0, [r7, #12]
 8008f9e:	f000 ffc0 	bl	8009f22 <USBD_CtlSendStatus>
 8008fa2:	e01a      	b.n	8008fda <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008faa:	b2db      	uxtb	r3, r3
 8008fac:	2b03      	cmp	r3, #3
 8008fae:	d114      	bne.n	8008fda <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fb6:	699b      	ldr	r3, [r3, #24]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d00e      	beq.n	8008fda <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fc2:	699b      	ldr	r3, [r3, #24]
 8008fc4:	7afa      	ldrb	r2, [r7, #11]
 8008fc6:	4611      	mov	r1, r2
 8008fc8:	68f8      	ldr	r0, [r7, #12]
 8008fca:	4798      	blx	r3
 8008fcc:	4603      	mov	r3, r0
 8008fce:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008fd0:	7dfb      	ldrb	r3, [r7, #23]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d001      	beq.n	8008fda <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008fd6:	7dfb      	ldrb	r3, [r7, #23]
 8008fd8:	e000      	b.n	8008fdc <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008fda:	2300      	movs	r3, #0
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3718      	adds	r7, #24
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b086      	sub	sp, #24
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	60f8      	str	r0, [r7, #12]
 8008fec:	460b      	mov	r3, r1
 8008fee:	607a      	str	r2, [r7, #4]
 8008ff0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008ff2:	7afb      	ldrb	r3, [r7, #11]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d16b      	bne.n	80090d0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	3314      	adds	r3, #20
 8008ffc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009004:	2b02      	cmp	r3, #2
 8009006:	d156      	bne.n	80090b6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	689a      	ldr	r2, [r3, #8]
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	68db      	ldr	r3, [r3, #12]
 8009010:	429a      	cmp	r2, r3
 8009012:	d914      	bls.n	800903e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	689a      	ldr	r2, [r3, #8]
 8009018:	693b      	ldr	r3, [r7, #16]
 800901a:	68db      	ldr	r3, [r3, #12]
 800901c:	1ad2      	subs	r2, r2, r3
 800901e:	693b      	ldr	r3, [r7, #16]
 8009020:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	689b      	ldr	r3, [r3, #8]
 8009026:	461a      	mov	r2, r3
 8009028:	6879      	ldr	r1, [r7, #4]
 800902a:	68f8      	ldr	r0, [r7, #12]
 800902c:	f000 ff3a 	bl	8009ea4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009030:	2300      	movs	r3, #0
 8009032:	2200      	movs	r2, #0
 8009034:	2100      	movs	r1, #0
 8009036:	68f8      	ldr	r0, [r7, #12]
 8009038:	f001 fbf5 	bl	800a826 <USBD_LL_PrepareReceive>
 800903c:	e03b      	b.n	80090b6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	68da      	ldr	r2, [r3, #12]
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	689b      	ldr	r3, [r3, #8]
 8009046:	429a      	cmp	r2, r3
 8009048:	d11c      	bne.n	8009084 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	685a      	ldr	r2, [r3, #4]
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009052:	429a      	cmp	r2, r3
 8009054:	d316      	bcc.n	8009084 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	685a      	ldr	r2, [r3, #4]
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009060:	429a      	cmp	r2, r3
 8009062:	d20f      	bcs.n	8009084 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009064:	2200      	movs	r2, #0
 8009066:	2100      	movs	r1, #0
 8009068:	68f8      	ldr	r0, [r7, #12]
 800906a:	f000 ff1b 	bl	8009ea4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2200      	movs	r2, #0
 8009072:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009076:	2300      	movs	r3, #0
 8009078:	2200      	movs	r2, #0
 800907a:	2100      	movs	r1, #0
 800907c:	68f8      	ldr	r0, [r7, #12]
 800907e:	f001 fbd2 	bl	800a826 <USBD_LL_PrepareReceive>
 8009082:	e018      	b.n	80090b6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800908a:	b2db      	uxtb	r3, r3
 800908c:	2b03      	cmp	r3, #3
 800908e:	d10b      	bne.n	80090a8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d005      	beq.n	80090a8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090a2:	68db      	ldr	r3, [r3, #12]
 80090a4:	68f8      	ldr	r0, [r7, #12]
 80090a6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80090a8:	2180      	movs	r1, #128	; 0x80
 80090aa:	68f8      	ldr	r0, [r7, #12]
 80090ac:	f001 fb10 	bl	800a6d0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80090b0:	68f8      	ldr	r0, [r7, #12]
 80090b2:	f000 ff49 	bl	8009f48 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d122      	bne.n	8009106 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80090c0:	68f8      	ldr	r0, [r7, #12]
 80090c2:	f7ff fe98 	bl	8008df6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	2200      	movs	r2, #0
 80090ca:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80090ce:	e01a      	b.n	8009106 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090d6:	b2db      	uxtb	r3, r3
 80090d8:	2b03      	cmp	r3, #3
 80090da:	d114      	bne.n	8009106 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090e2:	695b      	ldr	r3, [r3, #20]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d00e      	beq.n	8009106 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090ee:	695b      	ldr	r3, [r3, #20]
 80090f0:	7afa      	ldrb	r2, [r7, #11]
 80090f2:	4611      	mov	r1, r2
 80090f4:	68f8      	ldr	r0, [r7, #12]
 80090f6:	4798      	blx	r3
 80090f8:	4603      	mov	r3, r0
 80090fa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80090fc:	7dfb      	ldrb	r3, [r7, #23]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d001      	beq.n	8009106 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8009102:	7dfb      	ldrb	r3, [r7, #23]
 8009104:	e000      	b.n	8009108 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8009106:	2300      	movs	r3, #0
}
 8009108:	4618      	mov	r0, r3
 800910a:	3718      	adds	r7, #24
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b082      	sub	sp, #8
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2201      	movs	r2, #1
 800911c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2200      	movs	r2, #0
 8009124:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2200      	movs	r2, #0
 800912c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2200      	movs	r2, #0
 8009132:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800913c:	2b00      	cmp	r3, #0
 800913e:	d101      	bne.n	8009144 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009140:	2303      	movs	r3, #3
 8009142:	e02f      	b.n	80091a4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800914a:	2b00      	cmp	r3, #0
 800914c:	d00f      	beq.n	800916e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d009      	beq.n	800916e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	687a      	ldr	r2, [r7, #4]
 8009164:	6852      	ldr	r2, [r2, #4]
 8009166:	b2d2      	uxtb	r2, r2
 8009168:	4611      	mov	r1, r2
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800916e:	2340      	movs	r3, #64	; 0x40
 8009170:	2200      	movs	r2, #0
 8009172:	2100      	movs	r1, #0
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f001 fa66 	bl	800a646 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2201      	movs	r2, #1
 800917e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2240      	movs	r2, #64	; 0x40
 8009186:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800918a:	2340      	movs	r3, #64	; 0x40
 800918c:	2200      	movs	r2, #0
 800918e:	2180      	movs	r1, #128	; 0x80
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f001 fa58 	bl	800a646 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2201      	movs	r2, #1
 800919a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2240      	movs	r2, #64	; 0x40
 80091a0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80091a2:	2300      	movs	r3, #0
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3708      	adds	r7, #8
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b083      	sub	sp, #12
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	460b      	mov	r3, r1
 80091b6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	78fa      	ldrb	r2, [r7, #3]
 80091bc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80091be:	2300      	movs	r3, #0
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	370c      	adds	r7, #12
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr

080091cc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b083      	sub	sp, #12
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091da:	b2da      	uxtb	r2, r3
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2204      	movs	r2, #4
 80091e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80091ea:	2300      	movs	r3, #0
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	370c      	adds	r7, #12
 80091f0:	46bd      	mov	sp, r7
 80091f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f6:	4770      	bx	lr

080091f8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b083      	sub	sp, #12
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009206:	b2db      	uxtb	r3, r3
 8009208:	2b04      	cmp	r3, #4
 800920a:	d106      	bne.n	800921a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009212:	b2da      	uxtb	r2, r3
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800921a:	2300      	movs	r3, #0
}
 800921c:	4618      	mov	r0, r3
 800921e:	370c      	adds	r7, #12
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr

08009228 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b082      	sub	sp, #8
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009236:	2b00      	cmp	r3, #0
 8009238:	d101      	bne.n	800923e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800923a:	2303      	movs	r3, #3
 800923c:	e012      	b.n	8009264 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009244:	b2db      	uxtb	r3, r3
 8009246:	2b03      	cmp	r3, #3
 8009248:	d10b      	bne.n	8009262 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009250:	69db      	ldr	r3, [r3, #28]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d005      	beq.n	8009262 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800925c:	69db      	ldr	r3, [r3, #28]
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009262:	2300      	movs	r3, #0
}
 8009264:	4618      	mov	r0, r3
 8009266:	3708      	adds	r7, #8
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}

0800926c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800926c:	b480      	push	{r7}
 800926e:	b087      	sub	sp, #28
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	781b      	ldrb	r3, [r3, #0]
 800927c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	3301      	adds	r3, #1
 8009282:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	781b      	ldrb	r3, [r3, #0]
 8009288:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800928a:	8a3b      	ldrh	r3, [r7, #16]
 800928c:	021b      	lsls	r3, r3, #8
 800928e:	b21a      	sxth	r2, r3
 8009290:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009294:	4313      	orrs	r3, r2
 8009296:	b21b      	sxth	r3, r3
 8009298:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800929a:	89fb      	ldrh	r3, [r7, #14]
}
 800929c:	4618      	mov	r0, r3
 800929e:	371c      	adds	r7, #28
 80092a0:	46bd      	mov	sp, r7
 80092a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a6:	4770      	bx	lr

080092a8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b084      	sub	sp, #16
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80092b2:	2300      	movs	r3, #0
 80092b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	781b      	ldrb	r3, [r3, #0]
 80092ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80092be:	2b40      	cmp	r3, #64	; 0x40
 80092c0:	d005      	beq.n	80092ce <USBD_StdDevReq+0x26>
 80092c2:	2b40      	cmp	r3, #64	; 0x40
 80092c4:	d853      	bhi.n	800936e <USBD_StdDevReq+0xc6>
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d00b      	beq.n	80092e2 <USBD_StdDevReq+0x3a>
 80092ca:	2b20      	cmp	r3, #32
 80092cc:	d14f      	bne.n	800936e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092d4:	689b      	ldr	r3, [r3, #8]
 80092d6:	6839      	ldr	r1, [r7, #0]
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	4798      	blx	r3
 80092dc:	4603      	mov	r3, r0
 80092de:	73fb      	strb	r3, [r7, #15]
      break;
 80092e0:	e04a      	b.n	8009378 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	785b      	ldrb	r3, [r3, #1]
 80092e6:	2b09      	cmp	r3, #9
 80092e8:	d83b      	bhi.n	8009362 <USBD_StdDevReq+0xba>
 80092ea:	a201      	add	r2, pc, #4	; (adr r2, 80092f0 <USBD_StdDevReq+0x48>)
 80092ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092f0:	08009345 	.word	0x08009345
 80092f4:	08009359 	.word	0x08009359
 80092f8:	08009363 	.word	0x08009363
 80092fc:	0800934f 	.word	0x0800934f
 8009300:	08009363 	.word	0x08009363
 8009304:	08009323 	.word	0x08009323
 8009308:	08009319 	.word	0x08009319
 800930c:	08009363 	.word	0x08009363
 8009310:	0800933b 	.word	0x0800933b
 8009314:	0800932d 	.word	0x0800932d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009318:	6839      	ldr	r1, [r7, #0]
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 f9de 	bl	80096dc <USBD_GetDescriptor>
          break;
 8009320:	e024      	b.n	800936c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009322:	6839      	ldr	r1, [r7, #0]
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f000 fb6d 	bl	8009a04 <USBD_SetAddress>
          break;
 800932a:	e01f      	b.n	800936c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800932c:	6839      	ldr	r1, [r7, #0]
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f000 fbac 	bl	8009a8c <USBD_SetConfig>
 8009334:	4603      	mov	r3, r0
 8009336:	73fb      	strb	r3, [r7, #15]
          break;
 8009338:	e018      	b.n	800936c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800933a:	6839      	ldr	r1, [r7, #0]
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f000 fc4b 	bl	8009bd8 <USBD_GetConfig>
          break;
 8009342:	e013      	b.n	800936c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009344:	6839      	ldr	r1, [r7, #0]
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 fc7c 	bl	8009c44 <USBD_GetStatus>
          break;
 800934c:	e00e      	b.n	800936c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800934e:	6839      	ldr	r1, [r7, #0]
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f000 fcab 	bl	8009cac <USBD_SetFeature>
          break;
 8009356:	e009      	b.n	800936c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009358:	6839      	ldr	r1, [r7, #0]
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f000 fcba 	bl	8009cd4 <USBD_ClrFeature>
          break;
 8009360:	e004      	b.n	800936c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009362:	6839      	ldr	r1, [r7, #0]
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f000 fd11 	bl	8009d8c <USBD_CtlError>
          break;
 800936a:	bf00      	nop
      }
      break;
 800936c:	e004      	b.n	8009378 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800936e:	6839      	ldr	r1, [r7, #0]
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f000 fd0b 	bl	8009d8c <USBD_CtlError>
      break;
 8009376:	bf00      	nop
  }

  return ret;
 8009378:	7bfb      	ldrb	r3, [r7, #15]
}
 800937a:	4618      	mov	r0, r3
 800937c:	3710      	adds	r7, #16
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}
 8009382:	bf00      	nop

08009384 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b084      	sub	sp, #16
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
 800938c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800938e:	2300      	movs	r3, #0
 8009390:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	781b      	ldrb	r3, [r3, #0]
 8009396:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800939a:	2b40      	cmp	r3, #64	; 0x40
 800939c:	d005      	beq.n	80093aa <USBD_StdItfReq+0x26>
 800939e:	2b40      	cmp	r3, #64	; 0x40
 80093a0:	d82f      	bhi.n	8009402 <USBD_StdItfReq+0x7e>
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d001      	beq.n	80093aa <USBD_StdItfReq+0x26>
 80093a6:	2b20      	cmp	r3, #32
 80093a8:	d12b      	bne.n	8009402 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093b0:	b2db      	uxtb	r3, r3
 80093b2:	3b01      	subs	r3, #1
 80093b4:	2b02      	cmp	r3, #2
 80093b6:	d81d      	bhi.n	80093f4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	889b      	ldrh	r3, [r3, #4]
 80093bc:	b2db      	uxtb	r3, r3
 80093be:	2b01      	cmp	r3, #1
 80093c0:	d813      	bhi.n	80093ea <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093c8:	689b      	ldr	r3, [r3, #8]
 80093ca:	6839      	ldr	r1, [r7, #0]
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	4798      	blx	r3
 80093d0:	4603      	mov	r3, r0
 80093d2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	88db      	ldrh	r3, [r3, #6]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d110      	bne.n	80093fe <USBD_StdItfReq+0x7a>
 80093dc:	7bfb      	ldrb	r3, [r7, #15]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d10d      	bne.n	80093fe <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 fd9d 	bl	8009f22 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80093e8:	e009      	b.n	80093fe <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80093ea:	6839      	ldr	r1, [r7, #0]
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f000 fccd 	bl	8009d8c <USBD_CtlError>
          break;
 80093f2:	e004      	b.n	80093fe <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80093f4:	6839      	ldr	r1, [r7, #0]
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f000 fcc8 	bl	8009d8c <USBD_CtlError>
          break;
 80093fc:	e000      	b.n	8009400 <USBD_StdItfReq+0x7c>
          break;
 80093fe:	bf00      	nop
      }
      break;
 8009400:	e004      	b.n	800940c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8009402:	6839      	ldr	r1, [r7, #0]
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f000 fcc1 	bl	8009d8c <USBD_CtlError>
      break;
 800940a:	bf00      	nop
  }

  return ret;
 800940c:	7bfb      	ldrb	r3, [r7, #15]
}
 800940e:	4618      	mov	r0, r3
 8009410:	3710      	adds	r7, #16
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}

08009416 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009416:	b580      	push	{r7, lr}
 8009418:	b084      	sub	sp, #16
 800941a:	af00      	add	r7, sp, #0
 800941c:	6078      	str	r0, [r7, #4]
 800941e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009420:	2300      	movs	r3, #0
 8009422:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	889b      	ldrh	r3, [r3, #4]
 8009428:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009432:	2b40      	cmp	r3, #64	; 0x40
 8009434:	d007      	beq.n	8009446 <USBD_StdEPReq+0x30>
 8009436:	2b40      	cmp	r3, #64	; 0x40
 8009438:	f200 8145 	bhi.w	80096c6 <USBD_StdEPReq+0x2b0>
 800943c:	2b00      	cmp	r3, #0
 800943e:	d00c      	beq.n	800945a <USBD_StdEPReq+0x44>
 8009440:	2b20      	cmp	r3, #32
 8009442:	f040 8140 	bne.w	80096c6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800944c:	689b      	ldr	r3, [r3, #8]
 800944e:	6839      	ldr	r1, [r7, #0]
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	4798      	blx	r3
 8009454:	4603      	mov	r3, r0
 8009456:	73fb      	strb	r3, [r7, #15]
      break;
 8009458:	e13a      	b.n	80096d0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	785b      	ldrb	r3, [r3, #1]
 800945e:	2b03      	cmp	r3, #3
 8009460:	d007      	beq.n	8009472 <USBD_StdEPReq+0x5c>
 8009462:	2b03      	cmp	r3, #3
 8009464:	f300 8129 	bgt.w	80096ba <USBD_StdEPReq+0x2a4>
 8009468:	2b00      	cmp	r3, #0
 800946a:	d07f      	beq.n	800956c <USBD_StdEPReq+0x156>
 800946c:	2b01      	cmp	r3, #1
 800946e:	d03c      	beq.n	80094ea <USBD_StdEPReq+0xd4>
 8009470:	e123      	b.n	80096ba <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009478:	b2db      	uxtb	r3, r3
 800947a:	2b02      	cmp	r3, #2
 800947c:	d002      	beq.n	8009484 <USBD_StdEPReq+0x6e>
 800947e:	2b03      	cmp	r3, #3
 8009480:	d016      	beq.n	80094b0 <USBD_StdEPReq+0x9a>
 8009482:	e02c      	b.n	80094de <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009484:	7bbb      	ldrb	r3, [r7, #14]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d00d      	beq.n	80094a6 <USBD_StdEPReq+0x90>
 800948a:	7bbb      	ldrb	r3, [r7, #14]
 800948c:	2b80      	cmp	r3, #128	; 0x80
 800948e:	d00a      	beq.n	80094a6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009490:	7bbb      	ldrb	r3, [r7, #14]
 8009492:	4619      	mov	r1, r3
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f001 f91b 	bl	800a6d0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800949a:	2180      	movs	r1, #128	; 0x80
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f001 f917 	bl	800a6d0 <USBD_LL_StallEP>
 80094a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80094a4:	e020      	b.n	80094e8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80094a6:	6839      	ldr	r1, [r7, #0]
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f000 fc6f 	bl	8009d8c <USBD_CtlError>
              break;
 80094ae:	e01b      	b.n	80094e8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	885b      	ldrh	r3, [r3, #2]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d10e      	bne.n	80094d6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80094b8:	7bbb      	ldrb	r3, [r7, #14]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d00b      	beq.n	80094d6 <USBD_StdEPReq+0xc0>
 80094be:	7bbb      	ldrb	r3, [r7, #14]
 80094c0:	2b80      	cmp	r3, #128	; 0x80
 80094c2:	d008      	beq.n	80094d6 <USBD_StdEPReq+0xc0>
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	88db      	ldrh	r3, [r3, #6]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d104      	bne.n	80094d6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80094cc:	7bbb      	ldrb	r3, [r7, #14]
 80094ce:	4619      	mov	r1, r3
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f001 f8fd 	bl	800a6d0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f000 fd23 	bl	8009f22 <USBD_CtlSendStatus>

              break;
 80094dc:	e004      	b.n	80094e8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80094de:	6839      	ldr	r1, [r7, #0]
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f000 fc53 	bl	8009d8c <USBD_CtlError>
              break;
 80094e6:	bf00      	nop
          }
          break;
 80094e8:	e0ec      	b.n	80096c4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094f0:	b2db      	uxtb	r3, r3
 80094f2:	2b02      	cmp	r3, #2
 80094f4:	d002      	beq.n	80094fc <USBD_StdEPReq+0xe6>
 80094f6:	2b03      	cmp	r3, #3
 80094f8:	d016      	beq.n	8009528 <USBD_StdEPReq+0x112>
 80094fa:	e030      	b.n	800955e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80094fc:	7bbb      	ldrb	r3, [r7, #14]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d00d      	beq.n	800951e <USBD_StdEPReq+0x108>
 8009502:	7bbb      	ldrb	r3, [r7, #14]
 8009504:	2b80      	cmp	r3, #128	; 0x80
 8009506:	d00a      	beq.n	800951e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009508:	7bbb      	ldrb	r3, [r7, #14]
 800950a:	4619      	mov	r1, r3
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f001 f8df 	bl	800a6d0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009512:	2180      	movs	r1, #128	; 0x80
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f001 f8db 	bl	800a6d0 <USBD_LL_StallEP>
 800951a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800951c:	e025      	b.n	800956a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800951e:	6839      	ldr	r1, [r7, #0]
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f000 fc33 	bl	8009d8c <USBD_CtlError>
              break;
 8009526:	e020      	b.n	800956a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	885b      	ldrh	r3, [r3, #2]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d11b      	bne.n	8009568 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009530:	7bbb      	ldrb	r3, [r7, #14]
 8009532:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009536:	2b00      	cmp	r3, #0
 8009538:	d004      	beq.n	8009544 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800953a:	7bbb      	ldrb	r3, [r7, #14]
 800953c:	4619      	mov	r1, r3
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f001 f8e5 	bl	800a70e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f000 fcec 	bl	8009f22 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009550:	689b      	ldr	r3, [r3, #8]
 8009552:	6839      	ldr	r1, [r7, #0]
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	4798      	blx	r3
 8009558:	4603      	mov	r3, r0
 800955a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800955c:	e004      	b.n	8009568 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800955e:	6839      	ldr	r1, [r7, #0]
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f000 fc13 	bl	8009d8c <USBD_CtlError>
              break;
 8009566:	e000      	b.n	800956a <USBD_StdEPReq+0x154>
              break;
 8009568:	bf00      	nop
          }
          break;
 800956a:	e0ab      	b.n	80096c4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009572:	b2db      	uxtb	r3, r3
 8009574:	2b02      	cmp	r3, #2
 8009576:	d002      	beq.n	800957e <USBD_StdEPReq+0x168>
 8009578:	2b03      	cmp	r3, #3
 800957a:	d032      	beq.n	80095e2 <USBD_StdEPReq+0x1cc>
 800957c:	e097      	b.n	80096ae <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800957e:	7bbb      	ldrb	r3, [r7, #14]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d007      	beq.n	8009594 <USBD_StdEPReq+0x17e>
 8009584:	7bbb      	ldrb	r3, [r7, #14]
 8009586:	2b80      	cmp	r3, #128	; 0x80
 8009588:	d004      	beq.n	8009594 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800958a:	6839      	ldr	r1, [r7, #0]
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f000 fbfd 	bl	8009d8c <USBD_CtlError>
                break;
 8009592:	e091      	b.n	80096b8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009594:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009598:	2b00      	cmp	r3, #0
 800959a:	da0b      	bge.n	80095b4 <USBD_StdEPReq+0x19e>
 800959c:	7bbb      	ldrb	r3, [r7, #14]
 800959e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80095a2:	4613      	mov	r3, r2
 80095a4:	009b      	lsls	r3, r3, #2
 80095a6:	4413      	add	r3, r2
 80095a8:	009b      	lsls	r3, r3, #2
 80095aa:	3310      	adds	r3, #16
 80095ac:	687a      	ldr	r2, [r7, #4]
 80095ae:	4413      	add	r3, r2
 80095b0:	3304      	adds	r3, #4
 80095b2:	e00b      	b.n	80095cc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80095b4:	7bbb      	ldrb	r3, [r7, #14]
 80095b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095ba:	4613      	mov	r3, r2
 80095bc:	009b      	lsls	r3, r3, #2
 80095be:	4413      	add	r3, r2
 80095c0:	009b      	lsls	r3, r3, #2
 80095c2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80095c6:	687a      	ldr	r2, [r7, #4]
 80095c8:	4413      	add	r3, r2
 80095ca:	3304      	adds	r3, #4
 80095cc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	2200      	movs	r2, #0
 80095d2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	2202      	movs	r2, #2
 80095d8:	4619      	mov	r1, r3
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f000 fc47 	bl	8009e6e <USBD_CtlSendData>
              break;
 80095e0:	e06a      	b.n	80096b8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80095e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	da11      	bge.n	800960e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80095ea:	7bbb      	ldrb	r3, [r7, #14]
 80095ec:	f003 020f 	and.w	r2, r3, #15
 80095f0:	6879      	ldr	r1, [r7, #4]
 80095f2:	4613      	mov	r3, r2
 80095f4:	009b      	lsls	r3, r3, #2
 80095f6:	4413      	add	r3, r2
 80095f8:	009b      	lsls	r3, r3, #2
 80095fa:	440b      	add	r3, r1
 80095fc:	3324      	adds	r3, #36	; 0x24
 80095fe:	881b      	ldrh	r3, [r3, #0]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d117      	bne.n	8009634 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009604:	6839      	ldr	r1, [r7, #0]
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f000 fbc0 	bl	8009d8c <USBD_CtlError>
                  break;
 800960c:	e054      	b.n	80096b8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800960e:	7bbb      	ldrb	r3, [r7, #14]
 8009610:	f003 020f 	and.w	r2, r3, #15
 8009614:	6879      	ldr	r1, [r7, #4]
 8009616:	4613      	mov	r3, r2
 8009618:	009b      	lsls	r3, r3, #2
 800961a:	4413      	add	r3, r2
 800961c:	009b      	lsls	r3, r3, #2
 800961e:	440b      	add	r3, r1
 8009620:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009624:	881b      	ldrh	r3, [r3, #0]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d104      	bne.n	8009634 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800962a:	6839      	ldr	r1, [r7, #0]
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f000 fbad 	bl	8009d8c <USBD_CtlError>
                  break;
 8009632:	e041      	b.n	80096b8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009634:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009638:	2b00      	cmp	r3, #0
 800963a:	da0b      	bge.n	8009654 <USBD_StdEPReq+0x23e>
 800963c:	7bbb      	ldrb	r3, [r7, #14]
 800963e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009642:	4613      	mov	r3, r2
 8009644:	009b      	lsls	r3, r3, #2
 8009646:	4413      	add	r3, r2
 8009648:	009b      	lsls	r3, r3, #2
 800964a:	3310      	adds	r3, #16
 800964c:	687a      	ldr	r2, [r7, #4]
 800964e:	4413      	add	r3, r2
 8009650:	3304      	adds	r3, #4
 8009652:	e00b      	b.n	800966c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009654:	7bbb      	ldrb	r3, [r7, #14]
 8009656:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800965a:	4613      	mov	r3, r2
 800965c:	009b      	lsls	r3, r3, #2
 800965e:	4413      	add	r3, r2
 8009660:	009b      	lsls	r3, r3, #2
 8009662:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009666:	687a      	ldr	r2, [r7, #4]
 8009668:	4413      	add	r3, r2
 800966a:	3304      	adds	r3, #4
 800966c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800966e:	7bbb      	ldrb	r3, [r7, #14]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d002      	beq.n	800967a <USBD_StdEPReq+0x264>
 8009674:	7bbb      	ldrb	r3, [r7, #14]
 8009676:	2b80      	cmp	r3, #128	; 0x80
 8009678:	d103      	bne.n	8009682 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	2200      	movs	r2, #0
 800967e:	601a      	str	r2, [r3, #0]
 8009680:	e00e      	b.n	80096a0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009682:	7bbb      	ldrb	r3, [r7, #14]
 8009684:	4619      	mov	r1, r3
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f001 f860 	bl	800a74c <USBD_LL_IsStallEP>
 800968c:	4603      	mov	r3, r0
 800968e:	2b00      	cmp	r3, #0
 8009690:	d003      	beq.n	800969a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	2201      	movs	r2, #1
 8009696:	601a      	str	r2, [r3, #0]
 8009698:	e002      	b.n	80096a0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	2200      	movs	r2, #0
 800969e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	2202      	movs	r2, #2
 80096a4:	4619      	mov	r1, r3
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f000 fbe1 	bl	8009e6e <USBD_CtlSendData>
              break;
 80096ac:	e004      	b.n	80096b8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80096ae:	6839      	ldr	r1, [r7, #0]
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f000 fb6b 	bl	8009d8c <USBD_CtlError>
              break;
 80096b6:	bf00      	nop
          }
          break;
 80096b8:	e004      	b.n	80096c4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80096ba:	6839      	ldr	r1, [r7, #0]
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f000 fb65 	bl	8009d8c <USBD_CtlError>
          break;
 80096c2:	bf00      	nop
      }
      break;
 80096c4:	e004      	b.n	80096d0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80096c6:	6839      	ldr	r1, [r7, #0]
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f000 fb5f 	bl	8009d8c <USBD_CtlError>
      break;
 80096ce:	bf00      	nop
  }

  return ret;
 80096d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3710      	adds	r7, #16
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
	...

080096dc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b084      	sub	sp, #16
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80096e6:	2300      	movs	r3, #0
 80096e8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80096ea:	2300      	movs	r3, #0
 80096ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80096ee:	2300      	movs	r3, #0
 80096f0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	885b      	ldrh	r3, [r3, #2]
 80096f6:	0a1b      	lsrs	r3, r3, #8
 80096f8:	b29b      	uxth	r3, r3
 80096fa:	3b01      	subs	r3, #1
 80096fc:	2b0e      	cmp	r3, #14
 80096fe:	f200 8152 	bhi.w	80099a6 <USBD_GetDescriptor+0x2ca>
 8009702:	a201      	add	r2, pc, #4	; (adr r2, 8009708 <USBD_GetDescriptor+0x2c>)
 8009704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009708:	08009779 	.word	0x08009779
 800970c:	08009791 	.word	0x08009791
 8009710:	080097d1 	.word	0x080097d1
 8009714:	080099a7 	.word	0x080099a7
 8009718:	080099a7 	.word	0x080099a7
 800971c:	08009947 	.word	0x08009947
 8009720:	08009973 	.word	0x08009973
 8009724:	080099a7 	.word	0x080099a7
 8009728:	080099a7 	.word	0x080099a7
 800972c:	080099a7 	.word	0x080099a7
 8009730:	080099a7 	.word	0x080099a7
 8009734:	080099a7 	.word	0x080099a7
 8009738:	080099a7 	.word	0x080099a7
 800973c:	080099a7 	.word	0x080099a7
 8009740:	08009745 	.word	0x08009745
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800974a:	69db      	ldr	r3, [r3, #28]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d00b      	beq.n	8009768 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009756:	69db      	ldr	r3, [r3, #28]
 8009758:	687a      	ldr	r2, [r7, #4]
 800975a:	7c12      	ldrb	r2, [r2, #16]
 800975c:	f107 0108 	add.w	r1, r7, #8
 8009760:	4610      	mov	r0, r2
 8009762:	4798      	blx	r3
 8009764:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009766:	e126      	b.n	80099b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009768:	6839      	ldr	r1, [r7, #0]
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f000 fb0e 	bl	8009d8c <USBD_CtlError>
        err++;
 8009770:	7afb      	ldrb	r3, [r7, #11]
 8009772:	3301      	adds	r3, #1
 8009774:	72fb      	strb	r3, [r7, #11]
      break;
 8009776:	e11e      	b.n	80099b6 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	687a      	ldr	r2, [r7, #4]
 8009782:	7c12      	ldrb	r2, [r2, #16]
 8009784:	f107 0108 	add.w	r1, r7, #8
 8009788:	4610      	mov	r0, r2
 800978a:	4798      	blx	r3
 800978c:	60f8      	str	r0, [r7, #12]
      break;
 800978e:	e112      	b.n	80099b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	7c1b      	ldrb	r3, [r3, #16]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d10d      	bne.n	80097b4 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800979e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097a0:	f107 0208 	add.w	r2, r7, #8
 80097a4:	4610      	mov	r0, r2
 80097a6:	4798      	blx	r3
 80097a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	3301      	adds	r3, #1
 80097ae:	2202      	movs	r2, #2
 80097b0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80097b2:	e100      	b.n	80099b6 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097bc:	f107 0208 	add.w	r2, r7, #8
 80097c0:	4610      	mov	r0, r2
 80097c2:	4798      	blx	r3
 80097c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	3301      	adds	r3, #1
 80097ca:	2202      	movs	r2, #2
 80097cc:	701a      	strb	r2, [r3, #0]
      break;
 80097ce:	e0f2      	b.n	80099b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	885b      	ldrh	r3, [r3, #2]
 80097d4:	b2db      	uxtb	r3, r3
 80097d6:	2b05      	cmp	r3, #5
 80097d8:	f200 80ac 	bhi.w	8009934 <USBD_GetDescriptor+0x258>
 80097dc:	a201      	add	r2, pc, #4	; (adr r2, 80097e4 <USBD_GetDescriptor+0x108>)
 80097de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097e2:	bf00      	nop
 80097e4:	080097fd 	.word	0x080097fd
 80097e8:	08009831 	.word	0x08009831
 80097ec:	08009865 	.word	0x08009865
 80097f0:	08009899 	.word	0x08009899
 80097f4:	080098cd 	.word	0x080098cd
 80097f8:	08009901 	.word	0x08009901
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d00b      	beq.n	8009820 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800980e:	685b      	ldr	r3, [r3, #4]
 8009810:	687a      	ldr	r2, [r7, #4]
 8009812:	7c12      	ldrb	r2, [r2, #16]
 8009814:	f107 0108 	add.w	r1, r7, #8
 8009818:	4610      	mov	r0, r2
 800981a:	4798      	blx	r3
 800981c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800981e:	e091      	b.n	8009944 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009820:	6839      	ldr	r1, [r7, #0]
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f000 fab2 	bl	8009d8c <USBD_CtlError>
            err++;
 8009828:	7afb      	ldrb	r3, [r7, #11]
 800982a:	3301      	adds	r3, #1
 800982c:	72fb      	strb	r3, [r7, #11]
          break;
 800982e:	e089      	b.n	8009944 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009836:	689b      	ldr	r3, [r3, #8]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d00b      	beq.n	8009854 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009842:	689b      	ldr	r3, [r3, #8]
 8009844:	687a      	ldr	r2, [r7, #4]
 8009846:	7c12      	ldrb	r2, [r2, #16]
 8009848:	f107 0108 	add.w	r1, r7, #8
 800984c:	4610      	mov	r0, r2
 800984e:	4798      	blx	r3
 8009850:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009852:	e077      	b.n	8009944 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009854:	6839      	ldr	r1, [r7, #0]
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f000 fa98 	bl	8009d8c <USBD_CtlError>
            err++;
 800985c:	7afb      	ldrb	r3, [r7, #11]
 800985e:	3301      	adds	r3, #1
 8009860:	72fb      	strb	r3, [r7, #11]
          break;
 8009862:	e06f      	b.n	8009944 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800986a:	68db      	ldr	r3, [r3, #12]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d00b      	beq.n	8009888 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009876:	68db      	ldr	r3, [r3, #12]
 8009878:	687a      	ldr	r2, [r7, #4]
 800987a:	7c12      	ldrb	r2, [r2, #16]
 800987c:	f107 0108 	add.w	r1, r7, #8
 8009880:	4610      	mov	r0, r2
 8009882:	4798      	blx	r3
 8009884:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009886:	e05d      	b.n	8009944 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009888:	6839      	ldr	r1, [r7, #0]
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 fa7e 	bl	8009d8c <USBD_CtlError>
            err++;
 8009890:	7afb      	ldrb	r3, [r7, #11]
 8009892:	3301      	adds	r3, #1
 8009894:	72fb      	strb	r3, [r7, #11]
          break;
 8009896:	e055      	b.n	8009944 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800989e:	691b      	ldr	r3, [r3, #16]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d00b      	beq.n	80098bc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098aa:	691b      	ldr	r3, [r3, #16]
 80098ac:	687a      	ldr	r2, [r7, #4]
 80098ae:	7c12      	ldrb	r2, [r2, #16]
 80098b0:	f107 0108 	add.w	r1, r7, #8
 80098b4:	4610      	mov	r0, r2
 80098b6:	4798      	blx	r3
 80098b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098ba:	e043      	b.n	8009944 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80098bc:	6839      	ldr	r1, [r7, #0]
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f000 fa64 	bl	8009d8c <USBD_CtlError>
            err++;
 80098c4:	7afb      	ldrb	r3, [r7, #11]
 80098c6:	3301      	adds	r3, #1
 80098c8:	72fb      	strb	r3, [r7, #11]
          break;
 80098ca:	e03b      	b.n	8009944 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098d2:	695b      	ldr	r3, [r3, #20]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d00b      	beq.n	80098f0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098de:	695b      	ldr	r3, [r3, #20]
 80098e0:	687a      	ldr	r2, [r7, #4]
 80098e2:	7c12      	ldrb	r2, [r2, #16]
 80098e4:	f107 0108 	add.w	r1, r7, #8
 80098e8:	4610      	mov	r0, r2
 80098ea:	4798      	blx	r3
 80098ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098ee:	e029      	b.n	8009944 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80098f0:	6839      	ldr	r1, [r7, #0]
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f000 fa4a 	bl	8009d8c <USBD_CtlError>
            err++;
 80098f8:	7afb      	ldrb	r3, [r7, #11]
 80098fa:	3301      	adds	r3, #1
 80098fc:	72fb      	strb	r3, [r7, #11]
          break;
 80098fe:	e021      	b.n	8009944 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009906:	699b      	ldr	r3, [r3, #24]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d00b      	beq.n	8009924 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009912:	699b      	ldr	r3, [r3, #24]
 8009914:	687a      	ldr	r2, [r7, #4]
 8009916:	7c12      	ldrb	r2, [r2, #16]
 8009918:	f107 0108 	add.w	r1, r7, #8
 800991c:	4610      	mov	r0, r2
 800991e:	4798      	blx	r3
 8009920:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009922:	e00f      	b.n	8009944 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009924:	6839      	ldr	r1, [r7, #0]
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f000 fa30 	bl	8009d8c <USBD_CtlError>
            err++;
 800992c:	7afb      	ldrb	r3, [r7, #11]
 800992e:	3301      	adds	r3, #1
 8009930:	72fb      	strb	r3, [r7, #11]
          break;
 8009932:	e007      	b.n	8009944 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009934:	6839      	ldr	r1, [r7, #0]
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f000 fa28 	bl	8009d8c <USBD_CtlError>
          err++;
 800993c:	7afb      	ldrb	r3, [r7, #11]
 800993e:	3301      	adds	r3, #1
 8009940:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8009942:	bf00      	nop
      }
      break;
 8009944:	e037      	b.n	80099b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	7c1b      	ldrb	r3, [r3, #16]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d109      	bne.n	8009962 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009956:	f107 0208 	add.w	r2, r7, #8
 800995a:	4610      	mov	r0, r2
 800995c:	4798      	blx	r3
 800995e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009960:	e029      	b.n	80099b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009962:	6839      	ldr	r1, [r7, #0]
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f000 fa11 	bl	8009d8c <USBD_CtlError>
        err++;
 800996a:	7afb      	ldrb	r3, [r7, #11]
 800996c:	3301      	adds	r3, #1
 800996e:	72fb      	strb	r3, [r7, #11]
      break;
 8009970:	e021      	b.n	80099b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	7c1b      	ldrb	r3, [r3, #16]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d10d      	bne.n	8009996 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009982:	f107 0208 	add.w	r2, r7, #8
 8009986:	4610      	mov	r0, r2
 8009988:	4798      	blx	r3
 800998a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	3301      	adds	r3, #1
 8009990:	2207      	movs	r2, #7
 8009992:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009994:	e00f      	b.n	80099b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009996:	6839      	ldr	r1, [r7, #0]
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f000 f9f7 	bl	8009d8c <USBD_CtlError>
        err++;
 800999e:	7afb      	ldrb	r3, [r7, #11]
 80099a0:	3301      	adds	r3, #1
 80099a2:	72fb      	strb	r3, [r7, #11]
      break;
 80099a4:	e007      	b.n	80099b6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80099a6:	6839      	ldr	r1, [r7, #0]
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f000 f9ef 	bl	8009d8c <USBD_CtlError>
      err++;
 80099ae:	7afb      	ldrb	r3, [r7, #11]
 80099b0:	3301      	adds	r3, #1
 80099b2:	72fb      	strb	r3, [r7, #11]
      break;
 80099b4:	bf00      	nop
  }

  if (err != 0U)
 80099b6:	7afb      	ldrb	r3, [r7, #11]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d11e      	bne.n	80099fa <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	88db      	ldrh	r3, [r3, #6]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d016      	beq.n	80099f2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80099c4:	893b      	ldrh	r3, [r7, #8]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d00e      	beq.n	80099e8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	88da      	ldrh	r2, [r3, #6]
 80099ce:	893b      	ldrh	r3, [r7, #8]
 80099d0:	4293      	cmp	r3, r2
 80099d2:	bf28      	it	cs
 80099d4:	4613      	movcs	r3, r2
 80099d6:	b29b      	uxth	r3, r3
 80099d8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80099da:	893b      	ldrh	r3, [r7, #8]
 80099dc:	461a      	mov	r2, r3
 80099de:	68f9      	ldr	r1, [r7, #12]
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f000 fa44 	bl	8009e6e <USBD_CtlSendData>
 80099e6:	e009      	b.n	80099fc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80099e8:	6839      	ldr	r1, [r7, #0]
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f000 f9ce 	bl	8009d8c <USBD_CtlError>
 80099f0:	e004      	b.n	80099fc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f000 fa95 	bl	8009f22 <USBD_CtlSendStatus>
 80099f8:	e000      	b.n	80099fc <USBD_GetDescriptor+0x320>
    return;
 80099fa:	bf00      	nop
  }
}
 80099fc:	3710      	adds	r7, #16
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}
 8009a02:	bf00      	nop

08009a04 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b084      	sub	sp, #16
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	889b      	ldrh	r3, [r3, #4]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d131      	bne.n	8009a7a <USBD_SetAddress+0x76>
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	88db      	ldrh	r3, [r3, #6]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d12d      	bne.n	8009a7a <USBD_SetAddress+0x76>
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	885b      	ldrh	r3, [r3, #2]
 8009a22:	2b7f      	cmp	r3, #127	; 0x7f
 8009a24:	d829      	bhi.n	8009a7a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	885b      	ldrh	r3, [r3, #2]
 8009a2a:	b2db      	uxtb	r3, r3
 8009a2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a30:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a38:	b2db      	uxtb	r3, r3
 8009a3a:	2b03      	cmp	r3, #3
 8009a3c:	d104      	bne.n	8009a48 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009a3e:	6839      	ldr	r1, [r7, #0]
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f000 f9a3 	bl	8009d8c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a46:	e01d      	b.n	8009a84 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	7bfa      	ldrb	r2, [r7, #15]
 8009a4c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009a50:	7bfb      	ldrb	r3, [r7, #15]
 8009a52:	4619      	mov	r1, r3
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f000 fea6 	bl	800a7a6 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f000 fa61 	bl	8009f22 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009a60:	7bfb      	ldrb	r3, [r7, #15]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d004      	beq.n	8009a70 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2202      	movs	r2, #2
 8009a6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a6e:	e009      	b.n	8009a84 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2201      	movs	r2, #1
 8009a74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a78:	e004      	b.n	8009a84 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009a7a:	6839      	ldr	r1, [r7, #0]
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f000 f985 	bl	8009d8c <USBD_CtlError>
  }
}
 8009a82:	bf00      	nop
 8009a84:	bf00      	nop
 8009a86:	3710      	adds	r7, #16
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}

08009a8c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b084      	sub	sp, #16
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a96:	2300      	movs	r3, #0
 8009a98:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	885b      	ldrh	r3, [r3, #2]
 8009a9e:	b2da      	uxtb	r2, r3
 8009aa0:	4b4c      	ldr	r3, [pc, #304]	; (8009bd4 <USBD_SetConfig+0x148>)
 8009aa2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009aa4:	4b4b      	ldr	r3, [pc, #300]	; (8009bd4 <USBD_SetConfig+0x148>)
 8009aa6:	781b      	ldrb	r3, [r3, #0]
 8009aa8:	2b01      	cmp	r3, #1
 8009aaa:	d905      	bls.n	8009ab8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009aac:	6839      	ldr	r1, [r7, #0]
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f000 f96c 	bl	8009d8c <USBD_CtlError>
    return USBD_FAIL;
 8009ab4:	2303      	movs	r3, #3
 8009ab6:	e088      	b.n	8009bca <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009abe:	b2db      	uxtb	r3, r3
 8009ac0:	2b02      	cmp	r3, #2
 8009ac2:	d002      	beq.n	8009aca <USBD_SetConfig+0x3e>
 8009ac4:	2b03      	cmp	r3, #3
 8009ac6:	d025      	beq.n	8009b14 <USBD_SetConfig+0x88>
 8009ac8:	e071      	b.n	8009bae <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009aca:	4b42      	ldr	r3, [pc, #264]	; (8009bd4 <USBD_SetConfig+0x148>)
 8009acc:	781b      	ldrb	r3, [r3, #0]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d01c      	beq.n	8009b0c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009ad2:	4b40      	ldr	r3, [pc, #256]	; (8009bd4 <USBD_SetConfig+0x148>)
 8009ad4:	781b      	ldrb	r3, [r3, #0]
 8009ad6:	461a      	mov	r2, r3
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009adc:	4b3d      	ldr	r3, [pc, #244]	; (8009bd4 <USBD_SetConfig+0x148>)
 8009ade:	781b      	ldrb	r3, [r3, #0]
 8009ae0:	4619      	mov	r1, r3
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f7ff f992 	bl	8008e0c <USBD_SetClassConfig>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009aec:	7bfb      	ldrb	r3, [r7, #15]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d004      	beq.n	8009afc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009af2:	6839      	ldr	r1, [r7, #0]
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 f949 	bl	8009d8c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009afa:	e065      	b.n	8009bc8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f000 fa10 	bl	8009f22 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2203      	movs	r2, #3
 8009b06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009b0a:	e05d      	b.n	8009bc8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f000 fa08 	bl	8009f22 <USBD_CtlSendStatus>
      break;
 8009b12:	e059      	b.n	8009bc8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009b14:	4b2f      	ldr	r3, [pc, #188]	; (8009bd4 <USBD_SetConfig+0x148>)
 8009b16:	781b      	ldrb	r3, [r3, #0]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d112      	bne.n	8009b42 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2202      	movs	r2, #2
 8009b20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009b24:	4b2b      	ldr	r3, [pc, #172]	; (8009bd4 <USBD_SetConfig+0x148>)
 8009b26:	781b      	ldrb	r3, [r3, #0]
 8009b28:	461a      	mov	r2, r3
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009b2e:	4b29      	ldr	r3, [pc, #164]	; (8009bd4 <USBD_SetConfig+0x148>)
 8009b30:	781b      	ldrb	r3, [r3, #0]
 8009b32:	4619      	mov	r1, r3
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f7ff f985 	bl	8008e44 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f000 f9f1 	bl	8009f22 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009b40:	e042      	b.n	8009bc8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8009b42:	4b24      	ldr	r3, [pc, #144]	; (8009bd4 <USBD_SetConfig+0x148>)
 8009b44:	781b      	ldrb	r3, [r3, #0]
 8009b46:	461a      	mov	r2, r3
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	685b      	ldr	r3, [r3, #4]
 8009b4c:	429a      	cmp	r2, r3
 8009b4e:	d02a      	beq.n	8009ba6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	685b      	ldr	r3, [r3, #4]
 8009b54:	b2db      	uxtb	r3, r3
 8009b56:	4619      	mov	r1, r3
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f7ff f973 	bl	8008e44 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009b5e:	4b1d      	ldr	r3, [pc, #116]	; (8009bd4 <USBD_SetConfig+0x148>)
 8009b60:	781b      	ldrb	r3, [r3, #0]
 8009b62:	461a      	mov	r2, r3
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009b68:	4b1a      	ldr	r3, [pc, #104]	; (8009bd4 <USBD_SetConfig+0x148>)
 8009b6a:	781b      	ldrb	r3, [r3, #0]
 8009b6c:	4619      	mov	r1, r3
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f7ff f94c 	bl	8008e0c <USBD_SetClassConfig>
 8009b74:	4603      	mov	r3, r0
 8009b76:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009b78:	7bfb      	ldrb	r3, [r7, #15]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d00f      	beq.n	8009b9e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009b7e:	6839      	ldr	r1, [r7, #0]
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f000 f903 	bl	8009d8c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	685b      	ldr	r3, [r3, #4]
 8009b8a:	b2db      	uxtb	r3, r3
 8009b8c:	4619      	mov	r1, r3
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f7ff f958 	bl	8008e44 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2202      	movs	r2, #2
 8009b98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009b9c:	e014      	b.n	8009bc8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f000 f9bf 	bl	8009f22 <USBD_CtlSendStatus>
      break;
 8009ba4:	e010      	b.n	8009bc8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f000 f9bb 	bl	8009f22 <USBD_CtlSendStatus>
      break;
 8009bac:	e00c      	b.n	8009bc8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009bae:	6839      	ldr	r1, [r7, #0]
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f000 f8eb 	bl	8009d8c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009bb6:	4b07      	ldr	r3, [pc, #28]	; (8009bd4 <USBD_SetConfig+0x148>)
 8009bb8:	781b      	ldrb	r3, [r3, #0]
 8009bba:	4619      	mov	r1, r3
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f7ff f941 	bl	8008e44 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009bc2:	2303      	movs	r3, #3
 8009bc4:	73fb      	strb	r3, [r7, #15]
      break;
 8009bc6:	bf00      	nop
  }

  return ret;
 8009bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3710      	adds	r7, #16
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
 8009bd2:	bf00      	nop
 8009bd4:	2000040c 	.word	0x2000040c

08009bd8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b082      	sub	sp, #8
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	88db      	ldrh	r3, [r3, #6]
 8009be6:	2b01      	cmp	r3, #1
 8009be8:	d004      	beq.n	8009bf4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009bea:	6839      	ldr	r1, [r7, #0]
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f000 f8cd 	bl	8009d8c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009bf2:	e023      	b.n	8009c3c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bfa:	b2db      	uxtb	r3, r3
 8009bfc:	2b02      	cmp	r3, #2
 8009bfe:	dc02      	bgt.n	8009c06 <USBD_GetConfig+0x2e>
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	dc03      	bgt.n	8009c0c <USBD_GetConfig+0x34>
 8009c04:	e015      	b.n	8009c32 <USBD_GetConfig+0x5a>
 8009c06:	2b03      	cmp	r3, #3
 8009c08:	d00b      	beq.n	8009c22 <USBD_GetConfig+0x4a>
 8009c0a:	e012      	b.n	8009c32 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	3308      	adds	r3, #8
 8009c16:	2201      	movs	r2, #1
 8009c18:	4619      	mov	r1, r3
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f000 f927 	bl	8009e6e <USBD_CtlSendData>
        break;
 8009c20:	e00c      	b.n	8009c3c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	3304      	adds	r3, #4
 8009c26:	2201      	movs	r2, #1
 8009c28:	4619      	mov	r1, r3
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f000 f91f 	bl	8009e6e <USBD_CtlSendData>
        break;
 8009c30:	e004      	b.n	8009c3c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009c32:	6839      	ldr	r1, [r7, #0]
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f000 f8a9 	bl	8009d8c <USBD_CtlError>
        break;
 8009c3a:	bf00      	nop
}
 8009c3c:	bf00      	nop
 8009c3e:	3708      	adds	r7, #8
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b082      	sub	sp, #8
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c54:	b2db      	uxtb	r3, r3
 8009c56:	3b01      	subs	r3, #1
 8009c58:	2b02      	cmp	r3, #2
 8009c5a:	d81e      	bhi.n	8009c9a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	88db      	ldrh	r3, [r3, #6]
 8009c60:	2b02      	cmp	r3, #2
 8009c62:	d004      	beq.n	8009c6e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009c64:	6839      	ldr	r1, [r7, #0]
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f000 f890 	bl	8009d8c <USBD_CtlError>
        break;
 8009c6c:	e01a      	b.n	8009ca4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2201      	movs	r2, #1
 8009c72:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d005      	beq.n	8009c8a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	68db      	ldr	r3, [r3, #12]
 8009c82:	f043 0202 	orr.w	r2, r3, #2
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	330c      	adds	r3, #12
 8009c8e:	2202      	movs	r2, #2
 8009c90:	4619      	mov	r1, r3
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f000 f8eb 	bl	8009e6e <USBD_CtlSendData>
      break;
 8009c98:	e004      	b.n	8009ca4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009c9a:	6839      	ldr	r1, [r7, #0]
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f000 f875 	bl	8009d8c <USBD_CtlError>
      break;
 8009ca2:	bf00      	nop
  }
}
 8009ca4:	bf00      	nop
 8009ca6:	3708      	adds	r7, #8
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}

08009cac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b082      	sub	sp, #8
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
 8009cb4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	885b      	ldrh	r3, [r3, #2]
 8009cba:	2b01      	cmp	r3, #1
 8009cbc:	d106      	bne.n	8009ccc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f000 f92b 	bl	8009f22 <USBD_CtlSendStatus>
  }
}
 8009ccc:	bf00      	nop
 8009cce:	3708      	adds	r7, #8
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}

08009cd4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b082      	sub	sp, #8
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ce4:	b2db      	uxtb	r3, r3
 8009ce6:	3b01      	subs	r3, #1
 8009ce8:	2b02      	cmp	r3, #2
 8009cea:	d80b      	bhi.n	8009d04 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	885b      	ldrh	r3, [r3, #2]
 8009cf0:	2b01      	cmp	r3, #1
 8009cf2:	d10c      	bne.n	8009d0e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f000 f910 	bl	8009f22 <USBD_CtlSendStatus>
      }
      break;
 8009d02:	e004      	b.n	8009d0e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009d04:	6839      	ldr	r1, [r7, #0]
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f000 f840 	bl	8009d8c <USBD_CtlError>
      break;
 8009d0c:	e000      	b.n	8009d10 <USBD_ClrFeature+0x3c>
      break;
 8009d0e:	bf00      	nop
  }
}
 8009d10:	bf00      	nop
 8009d12:	3708      	adds	r7, #8
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b084      	sub	sp, #16
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	781a      	ldrb	r2, [r3, #0]
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	3301      	adds	r3, #1
 8009d32:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	781a      	ldrb	r2, [r3, #0]
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	3301      	adds	r3, #1
 8009d40:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009d42:	68f8      	ldr	r0, [r7, #12]
 8009d44:	f7ff fa92 	bl	800926c <SWAPBYTE>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	3301      	adds	r3, #1
 8009d54:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	3301      	adds	r3, #1
 8009d5a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009d5c:	68f8      	ldr	r0, [r7, #12]
 8009d5e:	f7ff fa85 	bl	800926c <SWAPBYTE>
 8009d62:	4603      	mov	r3, r0
 8009d64:	461a      	mov	r2, r3
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	3301      	adds	r3, #1
 8009d6e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	3301      	adds	r3, #1
 8009d74:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009d76:	68f8      	ldr	r0, [r7, #12]
 8009d78:	f7ff fa78 	bl	800926c <SWAPBYTE>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	461a      	mov	r2, r3
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	80da      	strh	r2, [r3, #6]
}
 8009d84:	bf00      	nop
 8009d86:	3710      	adds	r7, #16
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}

08009d8c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b082      	sub	sp, #8
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009d96:	2180      	movs	r1, #128	; 0x80
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f000 fc99 	bl	800a6d0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009d9e:	2100      	movs	r1, #0
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f000 fc95 	bl	800a6d0 <USBD_LL_StallEP>
}
 8009da6:	bf00      	nop
 8009da8:	3708      	adds	r7, #8
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}

08009dae <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009dae:	b580      	push	{r7, lr}
 8009db0:	b086      	sub	sp, #24
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	60f8      	str	r0, [r7, #12]
 8009db6:	60b9      	str	r1, [r7, #8]
 8009db8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d036      	beq.n	8009e32 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009dc8:	6938      	ldr	r0, [r7, #16]
 8009dca:	f000 f836 	bl	8009e3a <USBD_GetLen>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	3301      	adds	r3, #1
 8009dd2:	b29b      	uxth	r3, r3
 8009dd4:	005b      	lsls	r3, r3, #1
 8009dd6:	b29a      	uxth	r2, r3
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009ddc:	7dfb      	ldrb	r3, [r7, #23]
 8009dde:	68ba      	ldr	r2, [r7, #8]
 8009de0:	4413      	add	r3, r2
 8009de2:	687a      	ldr	r2, [r7, #4]
 8009de4:	7812      	ldrb	r2, [r2, #0]
 8009de6:	701a      	strb	r2, [r3, #0]
  idx++;
 8009de8:	7dfb      	ldrb	r3, [r7, #23]
 8009dea:	3301      	adds	r3, #1
 8009dec:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009dee:	7dfb      	ldrb	r3, [r7, #23]
 8009df0:	68ba      	ldr	r2, [r7, #8]
 8009df2:	4413      	add	r3, r2
 8009df4:	2203      	movs	r2, #3
 8009df6:	701a      	strb	r2, [r3, #0]
  idx++;
 8009df8:	7dfb      	ldrb	r3, [r7, #23]
 8009dfa:	3301      	adds	r3, #1
 8009dfc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009dfe:	e013      	b.n	8009e28 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009e00:	7dfb      	ldrb	r3, [r7, #23]
 8009e02:	68ba      	ldr	r2, [r7, #8]
 8009e04:	4413      	add	r3, r2
 8009e06:	693a      	ldr	r2, [r7, #16]
 8009e08:	7812      	ldrb	r2, [r2, #0]
 8009e0a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	3301      	adds	r3, #1
 8009e10:	613b      	str	r3, [r7, #16]
    idx++;
 8009e12:	7dfb      	ldrb	r3, [r7, #23]
 8009e14:	3301      	adds	r3, #1
 8009e16:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009e18:	7dfb      	ldrb	r3, [r7, #23]
 8009e1a:	68ba      	ldr	r2, [r7, #8]
 8009e1c:	4413      	add	r3, r2
 8009e1e:	2200      	movs	r2, #0
 8009e20:	701a      	strb	r2, [r3, #0]
    idx++;
 8009e22:	7dfb      	ldrb	r3, [r7, #23]
 8009e24:	3301      	adds	r3, #1
 8009e26:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	781b      	ldrb	r3, [r3, #0]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d1e7      	bne.n	8009e00 <USBD_GetString+0x52>
 8009e30:	e000      	b.n	8009e34 <USBD_GetString+0x86>
    return;
 8009e32:	bf00      	nop
  }
}
 8009e34:	3718      	adds	r7, #24
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}

08009e3a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009e3a:	b480      	push	{r7}
 8009e3c:	b085      	sub	sp, #20
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009e42:	2300      	movs	r3, #0
 8009e44:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009e4a:	e005      	b.n	8009e58 <USBD_GetLen+0x1e>
  {
    len++;
 8009e4c:	7bfb      	ldrb	r3, [r7, #15]
 8009e4e:	3301      	adds	r3, #1
 8009e50:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	3301      	adds	r3, #1
 8009e56:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	781b      	ldrb	r3, [r3, #0]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d1f5      	bne.n	8009e4c <USBD_GetLen+0x12>
  }

  return len;
 8009e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	3714      	adds	r7, #20
 8009e66:	46bd      	mov	sp, r7
 8009e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6c:	4770      	bx	lr

08009e6e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009e6e:	b580      	push	{r7, lr}
 8009e70:	b084      	sub	sp, #16
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	60f8      	str	r0, [r7, #12]
 8009e76:	60b9      	str	r1, [r7, #8]
 8009e78:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	2202      	movs	r2, #2
 8009e7e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	687a      	ldr	r2, [r7, #4]
 8009e86:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	687a      	ldr	r2, [r7, #4]
 8009e8c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	68ba      	ldr	r2, [r7, #8]
 8009e92:	2100      	movs	r1, #0
 8009e94:	68f8      	ldr	r0, [r7, #12]
 8009e96:	f000 fca5 	bl	800a7e4 <USBD_LL_Transmit>

  return USBD_OK;
 8009e9a:	2300      	movs	r3, #0
}
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	3710      	adds	r7, #16
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}

08009ea4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b084      	sub	sp, #16
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	60f8      	str	r0, [r7, #12]
 8009eac:	60b9      	str	r1, [r7, #8]
 8009eae:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	68ba      	ldr	r2, [r7, #8]
 8009eb4:	2100      	movs	r1, #0
 8009eb6:	68f8      	ldr	r0, [r7, #12]
 8009eb8:	f000 fc94 	bl	800a7e4 <USBD_LL_Transmit>

  return USBD_OK;
 8009ebc:	2300      	movs	r3, #0
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3710      	adds	r7, #16
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}

08009ec6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009ec6:	b580      	push	{r7, lr}
 8009ec8:	b084      	sub	sp, #16
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	60f8      	str	r0, [r7, #12]
 8009ece:	60b9      	str	r1, [r7, #8]
 8009ed0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	2203      	movs	r2, #3
 8009ed6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	687a      	ldr	r2, [r7, #4]
 8009ede:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	687a      	ldr	r2, [r7, #4]
 8009ee6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	68ba      	ldr	r2, [r7, #8]
 8009eee:	2100      	movs	r1, #0
 8009ef0:	68f8      	ldr	r0, [r7, #12]
 8009ef2:	f000 fc98 	bl	800a826 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ef6:	2300      	movs	r3, #0
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	3710      	adds	r7, #16
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}

08009f00 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b084      	sub	sp, #16
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	60f8      	str	r0, [r7, #12]
 8009f08:	60b9      	str	r1, [r7, #8]
 8009f0a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	68ba      	ldr	r2, [r7, #8]
 8009f10:	2100      	movs	r1, #0
 8009f12:	68f8      	ldr	r0, [r7, #12]
 8009f14:	f000 fc87 	bl	800a826 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f18:	2300      	movs	r3, #0
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3710      	adds	r7, #16
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}

08009f22 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009f22:	b580      	push	{r7, lr}
 8009f24:	b082      	sub	sp, #8
 8009f26:	af00      	add	r7, sp, #0
 8009f28:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2204      	movs	r2, #4
 8009f2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009f32:	2300      	movs	r3, #0
 8009f34:	2200      	movs	r2, #0
 8009f36:	2100      	movs	r1, #0
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f000 fc53 	bl	800a7e4 <USBD_LL_Transmit>

  return USBD_OK;
 8009f3e:	2300      	movs	r3, #0
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	3708      	adds	r7, #8
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}

08009f48 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b082      	sub	sp, #8
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2205      	movs	r2, #5
 8009f54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f58:	2300      	movs	r3, #0
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	2100      	movs	r1, #0
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f000 fc61 	bl	800a826 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f64:	2300      	movs	r3, #0
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3708      	adds	r7, #8
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}
	...

08009f70 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8009f74:	2200      	movs	r2, #0
 8009f76:	4912      	ldr	r1, [pc, #72]	; (8009fc0 <MX_USB_Device_Init+0x50>)
 8009f78:	4812      	ldr	r0, [pc, #72]	; (8009fc4 <MX_USB_Device_Init+0x54>)
 8009f7a:	f7fe fed9 	bl	8008d30 <USBD_Init>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d001      	beq.n	8009f88 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8009f84:	f7f7 fa68 	bl	8001458 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8009f88:	490f      	ldr	r1, [pc, #60]	; (8009fc8 <MX_USB_Device_Init+0x58>)
 8009f8a:	480e      	ldr	r0, [pc, #56]	; (8009fc4 <MX_USB_Device_Init+0x54>)
 8009f8c:	f7fe ff00 	bl	8008d90 <USBD_RegisterClass>
 8009f90:	4603      	mov	r3, r0
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d001      	beq.n	8009f9a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8009f96:	f7f7 fa5f 	bl	8001458 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8009f9a:	490c      	ldr	r1, [pc, #48]	; (8009fcc <MX_USB_Device_Init+0x5c>)
 8009f9c:	4809      	ldr	r0, [pc, #36]	; (8009fc4 <MX_USB_Device_Init+0x54>)
 8009f9e:	f7fe fe21 	bl	8008be4 <USBD_CDC_RegisterInterface>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d001      	beq.n	8009fac <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8009fa8:	f7f7 fa56 	bl	8001458 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009fac:	4805      	ldr	r0, [pc, #20]	; (8009fc4 <MX_USB_Device_Init+0x54>)
 8009fae:	f7fe ff16 	bl	8008dde <USBD_Start>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d001      	beq.n	8009fbc <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8009fb8:	f7f7 fa4e 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8009fbc:	bf00      	nop
 8009fbe:	bd80      	pop	{r7, pc}
 8009fc0:	20000130 	.word	0x20000130
 8009fc4:	20000410 	.word	0x20000410
 8009fc8:	20000018 	.word	0x20000018
 8009fcc:	2000011c 	.word	0x2000011c

08009fd0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	4905      	ldr	r1, [pc, #20]	; (8009fec <CDC_Init_FS+0x1c>)
 8009fd8:	4805      	ldr	r0, [pc, #20]	; (8009ff0 <CDC_Init_FS+0x20>)
 8009fda:	f7fe fe18 	bl	8008c0e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009fde:	4905      	ldr	r1, [pc, #20]	; (8009ff4 <CDC_Init_FS+0x24>)
 8009fe0:	4803      	ldr	r0, [pc, #12]	; (8009ff0 <CDC_Init_FS+0x20>)
 8009fe2:	f7fe fe32 	bl	8008c4a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009fe6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	bd80      	pop	{r7, pc}
 8009fec:	20000ac8 	.word	0x20000ac8
 8009ff0:	20000410 	.word	0x20000410
 8009ff4:	200006e0 	.word	0x200006e0

08009ff8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009ffc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	46bd      	mov	sp, r7
 800a002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a006:	4770      	bx	lr

0800a008 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a008:	b480      	push	{r7}
 800a00a:	b083      	sub	sp, #12
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	4603      	mov	r3, r0
 800a010:	6039      	str	r1, [r7, #0]
 800a012:	71fb      	strb	r3, [r7, #7]
 800a014:	4613      	mov	r3, r2
 800a016:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a018:	79fb      	ldrb	r3, [r7, #7]
 800a01a:	2b23      	cmp	r3, #35	; 0x23
 800a01c:	d84a      	bhi.n	800a0b4 <CDC_Control_FS+0xac>
 800a01e:	a201      	add	r2, pc, #4	; (adr r2, 800a024 <CDC_Control_FS+0x1c>)
 800a020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a024:	0800a0b5 	.word	0x0800a0b5
 800a028:	0800a0b5 	.word	0x0800a0b5
 800a02c:	0800a0b5 	.word	0x0800a0b5
 800a030:	0800a0b5 	.word	0x0800a0b5
 800a034:	0800a0b5 	.word	0x0800a0b5
 800a038:	0800a0b5 	.word	0x0800a0b5
 800a03c:	0800a0b5 	.word	0x0800a0b5
 800a040:	0800a0b5 	.word	0x0800a0b5
 800a044:	0800a0b5 	.word	0x0800a0b5
 800a048:	0800a0b5 	.word	0x0800a0b5
 800a04c:	0800a0b5 	.word	0x0800a0b5
 800a050:	0800a0b5 	.word	0x0800a0b5
 800a054:	0800a0b5 	.word	0x0800a0b5
 800a058:	0800a0b5 	.word	0x0800a0b5
 800a05c:	0800a0b5 	.word	0x0800a0b5
 800a060:	0800a0b5 	.word	0x0800a0b5
 800a064:	0800a0b5 	.word	0x0800a0b5
 800a068:	0800a0b5 	.word	0x0800a0b5
 800a06c:	0800a0b5 	.word	0x0800a0b5
 800a070:	0800a0b5 	.word	0x0800a0b5
 800a074:	0800a0b5 	.word	0x0800a0b5
 800a078:	0800a0b5 	.word	0x0800a0b5
 800a07c:	0800a0b5 	.word	0x0800a0b5
 800a080:	0800a0b5 	.word	0x0800a0b5
 800a084:	0800a0b5 	.word	0x0800a0b5
 800a088:	0800a0b5 	.word	0x0800a0b5
 800a08c:	0800a0b5 	.word	0x0800a0b5
 800a090:	0800a0b5 	.word	0x0800a0b5
 800a094:	0800a0b5 	.word	0x0800a0b5
 800a098:	0800a0b5 	.word	0x0800a0b5
 800a09c:	0800a0b5 	.word	0x0800a0b5
 800a0a0:	0800a0b5 	.word	0x0800a0b5
 800a0a4:	0800a0b5 	.word	0x0800a0b5
 800a0a8:	0800a0b5 	.word	0x0800a0b5
 800a0ac:	0800a0b5 	.word	0x0800a0b5
 800a0b0:	0800a0b5 	.word	0x0800a0b5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a0b4:	bf00      	nop
  }

  return (USBD_OK);
 800a0b6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	370c      	adds	r7, #12
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c2:	4770      	bx	lr

0800a0c4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b082      	sub	sp, #8
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	CDC_On_Receive(Buf, Len); // (1)
 800a0ce:	6839      	ldr	r1, [r7, #0]
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f7f6 fba7 	bl	8000824 <CDC_On_Receive>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a0d6:	6879      	ldr	r1, [r7, #4]
 800a0d8:	4805      	ldr	r0, [pc, #20]	; (800a0f0 <CDC_Receive_FS+0x2c>)
 800a0da:	f7fe fdb6 	bl	8008c4a <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a0de:	4804      	ldr	r0, [pc, #16]	; (800a0f0 <CDC_Receive_FS+0x2c>)
 800a0e0:	f7fe fdfc 	bl	8008cdc <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 800a0e4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3708      	adds	r7, #8
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}
 800a0ee:	bf00      	nop
 800a0f0:	20000410 	.word	0x20000410

0800a0f4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b084      	sub	sp, #16
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	460b      	mov	r3, r1
 800a0fe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a100:	2300      	movs	r3, #0
 800a102:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a104:	4b0d      	ldr	r3, [pc, #52]	; (800a13c <CDC_Transmit_FS+0x48>)
 800a106:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a10a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a112:	2b00      	cmp	r3, #0
 800a114:	d001      	beq.n	800a11a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a116:	2301      	movs	r3, #1
 800a118:	e00b      	b.n	800a132 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a11a:	887b      	ldrh	r3, [r7, #2]
 800a11c:	461a      	mov	r2, r3
 800a11e:	6879      	ldr	r1, [r7, #4]
 800a120:	4806      	ldr	r0, [pc, #24]	; (800a13c <CDC_Transmit_FS+0x48>)
 800a122:	f7fe fd74 	bl	8008c0e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a126:	4805      	ldr	r0, [pc, #20]	; (800a13c <CDC_Transmit_FS+0x48>)
 800a128:	f7fe fda8 	bl	8008c7c <USBD_CDC_TransmitPacket>
 800a12c:	4603      	mov	r3, r0
 800a12e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a130:	7bfb      	ldrb	r3, [r7, #15]
}
 800a132:	4618      	mov	r0, r3
 800a134:	3710      	adds	r7, #16
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}
 800a13a:	bf00      	nop
 800a13c:	20000410 	.word	0x20000410

0800a140 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a140:	b480      	push	{r7}
 800a142:	b087      	sub	sp, #28
 800a144:	af00      	add	r7, sp, #0
 800a146:	60f8      	str	r0, [r7, #12]
 800a148:	60b9      	str	r1, [r7, #8]
 800a14a:	4613      	mov	r3, r2
 800a14c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a14e:	2300      	movs	r3, #0
 800a150:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a152:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a156:	4618      	mov	r0, r3
 800a158:	371c      	adds	r7, #28
 800a15a:	46bd      	mov	sp, r7
 800a15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a160:	4770      	bx	lr
	...

0800a164 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a164:	b480      	push	{r7}
 800a166:	b083      	sub	sp, #12
 800a168:	af00      	add	r7, sp, #0
 800a16a:	4603      	mov	r3, r0
 800a16c:	6039      	str	r1, [r7, #0]
 800a16e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	2212      	movs	r2, #18
 800a174:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800a176:	4b03      	ldr	r3, [pc, #12]	; (800a184 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800a178:	4618      	mov	r0, r3
 800a17a:	370c      	adds	r7, #12
 800a17c:	46bd      	mov	sp, r7
 800a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a182:	4770      	bx	lr
 800a184:	20000150 	.word	0x20000150

0800a188 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a188:	b480      	push	{r7}
 800a18a:	b083      	sub	sp, #12
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	4603      	mov	r3, r0
 800a190:	6039      	str	r1, [r7, #0]
 800a192:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	2204      	movs	r2, #4
 800a198:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a19a:	4b03      	ldr	r3, [pc, #12]	; (800a1a8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	370c      	adds	r7, #12
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a6:	4770      	bx	lr
 800a1a8:	20000164 	.word	0x20000164

0800a1ac <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b082      	sub	sp, #8
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	6039      	str	r1, [r7, #0]
 800a1b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a1b8:	79fb      	ldrb	r3, [r7, #7]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d105      	bne.n	800a1ca <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800a1be:	683a      	ldr	r2, [r7, #0]
 800a1c0:	4907      	ldr	r1, [pc, #28]	; (800a1e0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800a1c2:	4808      	ldr	r0, [pc, #32]	; (800a1e4 <USBD_CDC_ProductStrDescriptor+0x38>)
 800a1c4:	f7ff fdf3 	bl	8009dae <USBD_GetString>
 800a1c8:	e004      	b.n	800a1d4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800a1ca:	683a      	ldr	r2, [r7, #0]
 800a1cc:	4904      	ldr	r1, [pc, #16]	; (800a1e0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800a1ce:	4805      	ldr	r0, [pc, #20]	; (800a1e4 <USBD_CDC_ProductStrDescriptor+0x38>)
 800a1d0:	f7ff fded 	bl	8009dae <USBD_GetString>
  }
  return USBD_StrDesc;
 800a1d4:	4b02      	ldr	r3, [pc, #8]	; (800a1e0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3708      	adds	r7, #8
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}
 800a1de:	bf00      	nop
 800a1e0:	20000eb0 	.word	0x20000eb0
 800a1e4:	0800aa1c 	.word	0x0800aa1c

0800a1e8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b082      	sub	sp, #8
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	6039      	str	r1, [r7, #0]
 800a1f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a1f4:	683a      	ldr	r2, [r7, #0]
 800a1f6:	4904      	ldr	r1, [pc, #16]	; (800a208 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800a1f8:	4804      	ldr	r0, [pc, #16]	; (800a20c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800a1fa:	f7ff fdd8 	bl	8009dae <USBD_GetString>
  return USBD_StrDesc;
 800a1fe:	4b02      	ldr	r3, [pc, #8]	; (800a208 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800a200:	4618      	mov	r0, r3
 800a202:	3708      	adds	r7, #8
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}
 800a208:	20000eb0 	.word	0x20000eb0
 800a20c:	0800aa34 	.word	0x0800aa34

0800a210 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b082      	sub	sp, #8
 800a214:	af00      	add	r7, sp, #0
 800a216:	4603      	mov	r3, r0
 800a218:	6039      	str	r1, [r7, #0]
 800a21a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	221a      	movs	r2, #26
 800a220:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a222:	f000 f843 	bl	800a2ac <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800a226:	4b02      	ldr	r3, [pc, #8]	; (800a230 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800a228:	4618      	mov	r0, r3
 800a22a:	3708      	adds	r7, #8
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}
 800a230:	20000168 	.word	0x20000168

0800a234 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b082      	sub	sp, #8
 800a238:	af00      	add	r7, sp, #0
 800a23a:	4603      	mov	r3, r0
 800a23c:	6039      	str	r1, [r7, #0]
 800a23e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a240:	79fb      	ldrb	r3, [r7, #7]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d105      	bne.n	800a252 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a246:	683a      	ldr	r2, [r7, #0]
 800a248:	4907      	ldr	r1, [pc, #28]	; (800a268 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800a24a:	4808      	ldr	r0, [pc, #32]	; (800a26c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800a24c:	f7ff fdaf 	bl	8009dae <USBD_GetString>
 800a250:	e004      	b.n	800a25c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a252:	683a      	ldr	r2, [r7, #0]
 800a254:	4904      	ldr	r1, [pc, #16]	; (800a268 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800a256:	4805      	ldr	r0, [pc, #20]	; (800a26c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800a258:	f7ff fda9 	bl	8009dae <USBD_GetString>
  }
  return USBD_StrDesc;
 800a25c:	4b02      	ldr	r3, [pc, #8]	; (800a268 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800a25e:	4618      	mov	r0, r3
 800a260:	3708      	adds	r7, #8
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}
 800a266:	bf00      	nop
 800a268:	20000eb0 	.word	0x20000eb0
 800a26c:	0800aa48 	.word	0x0800aa48

0800a270 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b082      	sub	sp, #8
 800a274:	af00      	add	r7, sp, #0
 800a276:	4603      	mov	r3, r0
 800a278:	6039      	str	r1, [r7, #0]
 800a27a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a27c:	79fb      	ldrb	r3, [r7, #7]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d105      	bne.n	800a28e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a282:	683a      	ldr	r2, [r7, #0]
 800a284:	4907      	ldr	r1, [pc, #28]	; (800a2a4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800a286:	4808      	ldr	r0, [pc, #32]	; (800a2a8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800a288:	f7ff fd91 	bl	8009dae <USBD_GetString>
 800a28c:	e004      	b.n	800a298 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a28e:	683a      	ldr	r2, [r7, #0]
 800a290:	4904      	ldr	r1, [pc, #16]	; (800a2a4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800a292:	4805      	ldr	r0, [pc, #20]	; (800a2a8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800a294:	f7ff fd8b 	bl	8009dae <USBD_GetString>
  }
  return USBD_StrDesc;
 800a298:	4b02      	ldr	r3, [pc, #8]	; (800a2a4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3708      	adds	r7, #8
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}
 800a2a2:	bf00      	nop
 800a2a4:	20000eb0 	.word	0x20000eb0
 800a2a8:	0800aa54 	.word	0x0800aa54

0800a2ac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b084      	sub	sp, #16
 800a2b0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a2b2:	4b0f      	ldr	r3, [pc, #60]	; (800a2f0 <Get_SerialNum+0x44>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a2b8:	4b0e      	ldr	r3, [pc, #56]	; (800a2f4 <Get_SerialNum+0x48>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a2be:	4b0e      	ldr	r3, [pc, #56]	; (800a2f8 <Get_SerialNum+0x4c>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a2c4:	68fa      	ldr	r2, [r7, #12]
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	4413      	add	r3, r2
 800a2ca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d009      	beq.n	800a2e6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a2d2:	2208      	movs	r2, #8
 800a2d4:	4909      	ldr	r1, [pc, #36]	; (800a2fc <Get_SerialNum+0x50>)
 800a2d6:	68f8      	ldr	r0, [r7, #12]
 800a2d8:	f000 f814 	bl	800a304 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a2dc:	2204      	movs	r2, #4
 800a2de:	4908      	ldr	r1, [pc, #32]	; (800a300 <Get_SerialNum+0x54>)
 800a2e0:	68b8      	ldr	r0, [r7, #8]
 800a2e2:	f000 f80f 	bl	800a304 <IntToUnicode>
  }
}
 800a2e6:	bf00      	nop
 800a2e8:	3710      	adds	r7, #16
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}
 800a2ee:	bf00      	nop
 800a2f0:	1fff7590 	.word	0x1fff7590
 800a2f4:	1fff7594 	.word	0x1fff7594
 800a2f8:	1fff7598 	.word	0x1fff7598
 800a2fc:	2000016a 	.word	0x2000016a
 800a300:	2000017a 	.word	0x2000017a

0800a304 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a304:	b480      	push	{r7}
 800a306:	b087      	sub	sp, #28
 800a308:	af00      	add	r7, sp, #0
 800a30a:	60f8      	str	r0, [r7, #12]
 800a30c:	60b9      	str	r1, [r7, #8]
 800a30e:	4613      	mov	r3, r2
 800a310:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a312:	2300      	movs	r3, #0
 800a314:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a316:	2300      	movs	r3, #0
 800a318:	75fb      	strb	r3, [r7, #23]
 800a31a:	e027      	b.n	800a36c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	0f1b      	lsrs	r3, r3, #28
 800a320:	2b09      	cmp	r3, #9
 800a322:	d80b      	bhi.n	800a33c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	0f1b      	lsrs	r3, r3, #28
 800a328:	b2da      	uxtb	r2, r3
 800a32a:	7dfb      	ldrb	r3, [r7, #23]
 800a32c:	005b      	lsls	r3, r3, #1
 800a32e:	4619      	mov	r1, r3
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	440b      	add	r3, r1
 800a334:	3230      	adds	r2, #48	; 0x30
 800a336:	b2d2      	uxtb	r2, r2
 800a338:	701a      	strb	r2, [r3, #0]
 800a33a:	e00a      	b.n	800a352 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	0f1b      	lsrs	r3, r3, #28
 800a340:	b2da      	uxtb	r2, r3
 800a342:	7dfb      	ldrb	r3, [r7, #23]
 800a344:	005b      	lsls	r3, r3, #1
 800a346:	4619      	mov	r1, r3
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	440b      	add	r3, r1
 800a34c:	3237      	adds	r2, #55	; 0x37
 800a34e:	b2d2      	uxtb	r2, r2
 800a350:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	011b      	lsls	r3, r3, #4
 800a356:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a358:	7dfb      	ldrb	r3, [r7, #23]
 800a35a:	005b      	lsls	r3, r3, #1
 800a35c:	3301      	adds	r3, #1
 800a35e:	68ba      	ldr	r2, [r7, #8]
 800a360:	4413      	add	r3, r2
 800a362:	2200      	movs	r2, #0
 800a364:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a366:	7dfb      	ldrb	r3, [r7, #23]
 800a368:	3301      	adds	r3, #1
 800a36a:	75fb      	strb	r3, [r7, #23]
 800a36c:	7dfa      	ldrb	r2, [r7, #23]
 800a36e:	79fb      	ldrb	r3, [r7, #7]
 800a370:	429a      	cmp	r2, r3
 800a372:	d3d3      	bcc.n	800a31c <IntToUnicode+0x18>
  }
}
 800a374:	bf00      	nop
 800a376:	bf00      	nop
 800a378:	371c      	adds	r7, #28
 800a37a:	46bd      	mov	sp, r7
 800a37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a380:	4770      	bx	lr
	...

0800a384 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b094      	sub	sp, #80	; 0x50
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a38c:	f107 030c 	add.w	r3, r7, #12
 800a390:	2244      	movs	r2, #68	; 0x44
 800a392:	2100      	movs	r1, #0
 800a394:	4618      	mov	r0, r3
 800a396:	f000 fb2d 	bl	800a9f4 <memset>
  if(pcdHandle->Instance==USB)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	4a15      	ldr	r2, [pc, #84]	; (800a3f4 <HAL_PCD_MspInit+0x70>)
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d122      	bne.n	800a3ea <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a3a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a3a8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a3ae:	f107 030c 	add.w	r3, r7, #12
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f7fa f8de 	bl	8004574 <HAL_RCCEx_PeriphCLKConfig>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d001      	beq.n	800a3c2 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800a3be:	f7f7 f84b 	bl	8001458 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a3c2:	4b0d      	ldr	r3, [pc, #52]	; (800a3f8 <HAL_PCD_MspInit+0x74>)
 800a3c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3c6:	4a0c      	ldr	r2, [pc, #48]	; (800a3f8 <HAL_PCD_MspInit+0x74>)
 800a3c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a3cc:	6593      	str	r3, [r2, #88]	; 0x58
 800a3ce:	4b0a      	ldr	r3, [pc, #40]	; (800a3f8 <HAL_PCD_MspInit+0x74>)
 800a3d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a3d6:	60bb      	str	r3, [r7, #8]
 800a3d8:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800a3da:	2200      	movs	r2, #0
 800a3dc:	2100      	movs	r1, #0
 800a3de:	2014      	movs	r0, #20
 800a3e0:	f7f7 fc0b 	bl	8001bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800a3e4:	2014      	movs	r0, #20
 800a3e6:	f7f7 fc22 	bl	8001c2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a3ea:	bf00      	nop
 800a3ec:	3750      	adds	r7, #80	; 0x50
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}
 800a3f2:	bf00      	nop
 800a3f4:	40005c00 	.word	0x40005c00
 800a3f8:	40021000 	.word	0x40021000

0800a3fc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b082      	sub	sp, #8
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a410:	4619      	mov	r1, r3
 800a412:	4610      	mov	r0, r2
 800a414:	f7fe fd2e 	bl	8008e74 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800a418:	bf00      	nop
 800a41a:	3708      	adds	r7, #8
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}

0800a420 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b082      	sub	sp, #8
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
 800a428:	460b      	mov	r3, r1
 800a42a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800a432:	78fa      	ldrb	r2, [r7, #3]
 800a434:	6879      	ldr	r1, [r7, #4]
 800a436:	4613      	mov	r3, r2
 800a438:	009b      	lsls	r3, r3, #2
 800a43a:	4413      	add	r3, r2
 800a43c:	00db      	lsls	r3, r3, #3
 800a43e:	440b      	add	r3, r1
 800a440:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a444:	681a      	ldr	r2, [r3, #0]
 800a446:	78fb      	ldrb	r3, [r7, #3]
 800a448:	4619      	mov	r1, r3
 800a44a:	f7fe fd68 	bl	8008f1e <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800a44e:	bf00      	nop
 800a450:	3708      	adds	r7, #8
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}

0800a456 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a456:	b580      	push	{r7, lr}
 800a458:	b082      	sub	sp, #8
 800a45a:	af00      	add	r7, sp, #0
 800a45c:	6078      	str	r0, [r7, #4]
 800a45e:	460b      	mov	r3, r1
 800a460:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800a468:	78fa      	ldrb	r2, [r7, #3]
 800a46a:	6879      	ldr	r1, [r7, #4]
 800a46c:	4613      	mov	r3, r2
 800a46e:	009b      	lsls	r3, r3, #2
 800a470:	4413      	add	r3, r2
 800a472:	00db      	lsls	r3, r3, #3
 800a474:	440b      	add	r3, r1
 800a476:	333c      	adds	r3, #60	; 0x3c
 800a478:	681a      	ldr	r2, [r3, #0]
 800a47a:	78fb      	ldrb	r3, [r7, #3]
 800a47c:	4619      	mov	r1, r3
 800a47e:	f7fe fdb1 	bl	8008fe4 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800a482:	bf00      	nop
 800a484:	3708      	adds	r7, #8
 800a486:	46bd      	mov	sp, r7
 800a488:	bd80      	pop	{r7, pc}

0800a48a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a48a:	b580      	push	{r7, lr}
 800a48c:	b082      	sub	sp, #8
 800a48e:	af00      	add	r7, sp, #0
 800a490:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a498:	4618      	mov	r0, r3
 800a49a:	f7fe fec5 	bl	8009228 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800a49e:	bf00      	nop
 800a4a0:	3708      	adds	r7, #8
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}

0800a4a6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4a6:	b580      	push	{r7, lr}
 800a4a8:	b084      	sub	sp, #16
 800a4aa:	af00      	add	r7, sp, #0
 800a4ac:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	689b      	ldr	r3, [r3, #8]
 800a4b6:	2b02      	cmp	r3, #2
 800a4b8:	d001      	beq.n	800a4be <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a4ba:	f7f6 ffcd 	bl	8001458 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a4c4:	7bfa      	ldrb	r2, [r7, #15]
 800a4c6:	4611      	mov	r1, r2
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f7fe fe6f 	bl	80091ac <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f7fe fe1b 	bl	8009110 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800a4da:	bf00      	nop
 800a4dc:	3710      	adds	r7, #16
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}
	...

0800a4e4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b082      	sub	sp, #8
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f7fe fe6a 	bl	80091cc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	699b      	ldr	r3, [r3, #24]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d005      	beq.n	800a50c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a500:	4b04      	ldr	r3, [pc, #16]	; (800a514 <HAL_PCD_SuspendCallback+0x30>)
 800a502:	691b      	ldr	r3, [r3, #16]
 800a504:	4a03      	ldr	r2, [pc, #12]	; (800a514 <HAL_PCD_SuspendCallback+0x30>)
 800a506:	f043 0306 	orr.w	r3, r3, #6
 800a50a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800a50c:	bf00      	nop
 800a50e:	3708      	adds	r7, #8
 800a510:	46bd      	mov	sp, r7
 800a512:	bd80      	pop	{r7, pc}
 800a514:	e000ed00 	.word	0xe000ed00

0800a518 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b082      	sub	sp, #8
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	699b      	ldr	r3, [r3, #24]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d007      	beq.n	800a538 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a528:	4b08      	ldr	r3, [pc, #32]	; (800a54c <HAL_PCD_ResumeCallback+0x34>)
 800a52a:	691b      	ldr	r3, [r3, #16]
 800a52c:	4a07      	ldr	r2, [pc, #28]	; (800a54c <HAL_PCD_ResumeCallback+0x34>)
 800a52e:	f023 0306 	bic.w	r3, r3, #6
 800a532:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800a534:	f000 f9fa 	bl	800a92c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a53e:	4618      	mov	r0, r3
 800a540:	f7fe fe5a 	bl	80091f8 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800a544:	bf00      	nop
 800a546:	3708      	adds	r7, #8
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}
 800a54c:	e000ed00 	.word	0xe000ed00

0800a550 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b082      	sub	sp, #8
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800a558:	4a2b      	ldr	r2, [pc, #172]	; (800a608 <USBD_LL_Init+0xb8>)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	4a29      	ldr	r2, [pc, #164]	; (800a608 <USBD_LL_Init+0xb8>)
 800a564:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800a568:	4b27      	ldr	r3, [pc, #156]	; (800a608 <USBD_LL_Init+0xb8>)
 800a56a:	4a28      	ldr	r2, [pc, #160]	; (800a60c <USBD_LL_Init+0xbc>)
 800a56c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a56e:	4b26      	ldr	r3, [pc, #152]	; (800a608 <USBD_LL_Init+0xb8>)
 800a570:	2208      	movs	r2, #8
 800a572:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a574:	4b24      	ldr	r3, [pc, #144]	; (800a608 <USBD_LL_Init+0xb8>)
 800a576:	2202      	movs	r2, #2
 800a578:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a57a:	4b23      	ldr	r3, [pc, #140]	; (800a608 <USBD_LL_Init+0xb8>)
 800a57c:	2202      	movs	r2, #2
 800a57e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800a580:	4b21      	ldr	r3, [pc, #132]	; (800a608 <USBD_LL_Init+0xb8>)
 800a582:	2200      	movs	r2, #0
 800a584:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a586:	4b20      	ldr	r3, [pc, #128]	; (800a608 <USBD_LL_Init+0xb8>)
 800a588:	2200      	movs	r2, #0
 800a58a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a58c:	4b1e      	ldr	r3, [pc, #120]	; (800a608 <USBD_LL_Init+0xb8>)
 800a58e:	2200      	movs	r2, #0
 800a590:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a592:	4b1d      	ldr	r3, [pc, #116]	; (800a608 <USBD_LL_Init+0xb8>)
 800a594:	2200      	movs	r2, #0
 800a596:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a598:	481b      	ldr	r0, [pc, #108]	; (800a608 <USBD_LL_Init+0xb8>)
 800a59a:	f7f7 fd17 	bl	8001fcc <HAL_PCD_Init>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d001      	beq.n	800a5a8 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800a5a4:	f7f6 ff58 	bl	8001458 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a5ae:	2318      	movs	r3, #24
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	2100      	movs	r1, #0
 800a5b4:	f7f9 f9d0 	bl	8003958 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a5be:	2358      	movs	r3, #88	; 0x58
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	2180      	movs	r1, #128	; 0x80
 800a5c4:	f7f9 f9c8 	bl	8003958 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a5ce:	23c0      	movs	r3, #192	; 0xc0
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	2181      	movs	r1, #129	; 0x81
 800a5d4:	f7f9 f9c0 	bl	8003958 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a5de:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	2101      	movs	r1, #1
 800a5e6:	f7f9 f9b7 	bl	8003958 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a5f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	2182      	movs	r1, #130	; 0x82
 800a5f8:	f7f9 f9ae 	bl	8003958 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a5fc:	2300      	movs	r3, #0
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3708      	adds	r7, #8
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}
 800a606:	bf00      	nop
 800a608:	200010b0 	.word	0x200010b0
 800a60c:	40005c00 	.word	0x40005c00

0800a610 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b084      	sub	sp, #16
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a618:	2300      	movs	r3, #0
 800a61a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a61c:	2300      	movs	r3, #0
 800a61e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a626:	4618      	mov	r0, r3
 800a628:	f7f7 fdb5 	bl	8002196 <HAL_PCD_Start>
 800a62c:	4603      	mov	r3, r0
 800a62e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a630:	7bfb      	ldrb	r3, [r7, #15]
 800a632:	4618      	mov	r0, r3
 800a634:	f000 f980 	bl	800a938 <USBD_Get_USB_Status>
 800a638:	4603      	mov	r3, r0
 800a63a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a63c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a63e:	4618      	mov	r0, r3
 800a640:	3710      	adds	r7, #16
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}

0800a646 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a646:	b580      	push	{r7, lr}
 800a648:	b084      	sub	sp, #16
 800a64a:	af00      	add	r7, sp, #0
 800a64c:	6078      	str	r0, [r7, #4]
 800a64e:	4608      	mov	r0, r1
 800a650:	4611      	mov	r1, r2
 800a652:	461a      	mov	r2, r3
 800a654:	4603      	mov	r3, r0
 800a656:	70fb      	strb	r3, [r7, #3]
 800a658:	460b      	mov	r3, r1
 800a65a:	70bb      	strb	r3, [r7, #2]
 800a65c:	4613      	mov	r3, r2
 800a65e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a660:	2300      	movs	r3, #0
 800a662:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a664:	2300      	movs	r3, #0
 800a666:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a66e:	78bb      	ldrb	r3, [r7, #2]
 800a670:	883a      	ldrh	r2, [r7, #0]
 800a672:	78f9      	ldrb	r1, [r7, #3]
 800a674:	f7f7 fefd 	bl	8002472 <HAL_PCD_EP_Open>
 800a678:	4603      	mov	r3, r0
 800a67a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a67c:	7bfb      	ldrb	r3, [r7, #15]
 800a67e:	4618      	mov	r0, r3
 800a680:	f000 f95a 	bl	800a938 <USBD_Get_USB_Status>
 800a684:	4603      	mov	r3, r0
 800a686:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a688:	7bbb      	ldrb	r3, [r7, #14]
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3710      	adds	r7, #16
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}

0800a692 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a692:	b580      	push	{r7, lr}
 800a694:	b084      	sub	sp, #16
 800a696:	af00      	add	r7, sp, #0
 800a698:	6078      	str	r0, [r7, #4]
 800a69a:	460b      	mov	r3, r1
 800a69c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a6ac:	78fa      	ldrb	r2, [r7, #3]
 800a6ae:	4611      	mov	r1, r2
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	f7f7 ff44 	bl	800253e <HAL_PCD_EP_Close>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6ba:	7bfb      	ldrb	r3, [r7, #15]
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f000 f93b 	bl	800a938 <USBD_Get_USB_Status>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	3710      	adds	r7, #16
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}

0800a6d0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b084      	sub	sp, #16
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
 800a6d8:	460b      	mov	r3, r1
 800a6da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a6ea:	78fa      	ldrb	r2, [r7, #3]
 800a6ec:	4611      	mov	r1, r2
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f7f8 f805 	bl	80026fe <HAL_PCD_EP_SetStall>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6f8:	7bfb      	ldrb	r3, [r7, #15]
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f000 f91c 	bl	800a938 <USBD_Get_USB_Status>
 800a700:	4603      	mov	r3, r0
 800a702:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a704:	7bbb      	ldrb	r3, [r7, #14]
}
 800a706:	4618      	mov	r0, r3
 800a708:	3710      	adds	r7, #16
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}

0800a70e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a70e:	b580      	push	{r7, lr}
 800a710:	b084      	sub	sp, #16
 800a712:	af00      	add	r7, sp, #0
 800a714:	6078      	str	r0, [r7, #4]
 800a716:	460b      	mov	r3, r1
 800a718:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a71a:	2300      	movs	r3, #0
 800a71c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a71e:	2300      	movs	r3, #0
 800a720:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a728:	78fa      	ldrb	r2, [r7, #3]
 800a72a:	4611      	mov	r1, r2
 800a72c:	4618      	mov	r0, r3
 800a72e:	f7f8 f838 	bl	80027a2 <HAL_PCD_EP_ClrStall>
 800a732:	4603      	mov	r3, r0
 800a734:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a736:	7bfb      	ldrb	r3, [r7, #15]
 800a738:	4618      	mov	r0, r3
 800a73a:	f000 f8fd 	bl	800a938 <USBD_Get_USB_Status>
 800a73e:	4603      	mov	r3, r0
 800a740:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a742:	7bbb      	ldrb	r3, [r7, #14]
}
 800a744:	4618      	mov	r0, r3
 800a746:	3710      	adds	r7, #16
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}

0800a74c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a74c:	b480      	push	{r7}
 800a74e:	b085      	sub	sp, #20
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
 800a754:	460b      	mov	r3, r1
 800a756:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a75e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a760:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a764:	2b00      	cmp	r3, #0
 800a766:	da0c      	bge.n	800a782 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a768:	78fb      	ldrb	r3, [r7, #3]
 800a76a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a76e:	68f9      	ldr	r1, [r7, #12]
 800a770:	1c5a      	adds	r2, r3, #1
 800a772:	4613      	mov	r3, r2
 800a774:	009b      	lsls	r3, r3, #2
 800a776:	4413      	add	r3, r2
 800a778:	00db      	lsls	r3, r3, #3
 800a77a:	440b      	add	r3, r1
 800a77c:	3302      	adds	r3, #2
 800a77e:	781b      	ldrb	r3, [r3, #0]
 800a780:	e00b      	b.n	800a79a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a782:	78fb      	ldrb	r3, [r7, #3]
 800a784:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a788:	68f9      	ldr	r1, [r7, #12]
 800a78a:	4613      	mov	r3, r2
 800a78c:	009b      	lsls	r3, r3, #2
 800a78e:	4413      	add	r3, r2
 800a790:	00db      	lsls	r3, r3, #3
 800a792:	440b      	add	r3, r1
 800a794:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a798:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	3714      	adds	r7, #20
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a4:	4770      	bx	lr

0800a7a6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a7a6:	b580      	push	{r7, lr}
 800a7a8:	b084      	sub	sp, #16
 800a7aa:	af00      	add	r7, sp, #0
 800a7ac:	6078      	str	r0, [r7, #4]
 800a7ae:	460b      	mov	r3, r1
 800a7b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a7c0:	78fa      	ldrb	r2, [r7, #3]
 800a7c2:	4611      	mov	r1, r2
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f7f7 fe2f 	bl	8002428 <HAL_PCD_SetAddress>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7ce:	7bfb      	ldrb	r3, [r7, #15]
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f000 f8b1 	bl	800a938 <USBD_Get_USB_Status>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7da:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	3710      	adds	r7, #16
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}

0800a7e4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b086      	sub	sp, #24
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	60f8      	str	r0, [r7, #12]
 800a7ec:	607a      	str	r2, [r7, #4]
 800a7ee:	603b      	str	r3, [r7, #0]
 800a7f0:	460b      	mov	r3, r1
 800a7f2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a802:	7af9      	ldrb	r1, [r7, #11]
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	687a      	ldr	r2, [r7, #4]
 800a808:	f7f7 ff36 	bl	8002678 <HAL_PCD_EP_Transmit>
 800a80c:	4603      	mov	r3, r0
 800a80e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a810:	7dfb      	ldrb	r3, [r7, #23]
 800a812:	4618      	mov	r0, r3
 800a814:	f000 f890 	bl	800a938 <USBD_Get_USB_Status>
 800a818:	4603      	mov	r3, r0
 800a81a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a81c:	7dbb      	ldrb	r3, [r7, #22]
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3718      	adds	r7, #24
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}

0800a826 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a826:	b580      	push	{r7, lr}
 800a828:	b086      	sub	sp, #24
 800a82a:	af00      	add	r7, sp, #0
 800a82c:	60f8      	str	r0, [r7, #12]
 800a82e:	607a      	str	r2, [r7, #4]
 800a830:	603b      	str	r3, [r7, #0]
 800a832:	460b      	mov	r3, r1
 800a834:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a836:	2300      	movs	r3, #0
 800a838:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a83a:	2300      	movs	r3, #0
 800a83c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a844:	7af9      	ldrb	r1, [r7, #11]
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	687a      	ldr	r2, [r7, #4]
 800a84a:	f7f7 fec0 	bl	80025ce <HAL_PCD_EP_Receive>
 800a84e:	4603      	mov	r3, r0
 800a850:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a852:	7dfb      	ldrb	r3, [r7, #23]
 800a854:	4618      	mov	r0, r3
 800a856:	f000 f86f 	bl	800a938 <USBD_Get_USB_Status>
 800a85a:	4603      	mov	r3, r0
 800a85c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a85e:	7dbb      	ldrb	r3, [r7, #22]
}
 800a860:	4618      	mov	r0, r3
 800a862:	3718      	adds	r7, #24
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}

0800a868 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b082      	sub	sp, #8
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
 800a870:	460b      	mov	r3, r1
 800a872:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a87a:	78fa      	ldrb	r2, [r7, #3]
 800a87c:	4611      	mov	r1, r2
 800a87e:	4618      	mov	r0, r3
 800a880:	f7f7 fee2 	bl	8002648 <HAL_PCD_EP_GetRxCount>
 800a884:	4603      	mov	r3, r0
}
 800a886:	4618      	mov	r0, r3
 800a888:	3708      	adds	r7, #8
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}
	...

0800a890 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b082      	sub	sp, #8
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
 800a898:	460b      	mov	r3, r1
 800a89a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800a89c:	78fb      	ldrb	r3, [r7, #3]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d002      	beq.n	800a8a8 <HAL_PCDEx_LPM_Callback+0x18>
 800a8a2:	2b01      	cmp	r3, #1
 800a8a4:	d013      	beq.n	800a8ce <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800a8a6:	e023      	b.n	800a8f0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	699b      	ldr	r3, [r3, #24]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d007      	beq.n	800a8c0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a8b0:	f000 f83c 	bl	800a92c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a8b4:	4b10      	ldr	r3, [pc, #64]	; (800a8f8 <HAL_PCDEx_LPM_Callback+0x68>)
 800a8b6:	691b      	ldr	r3, [r3, #16]
 800a8b8:	4a0f      	ldr	r2, [pc, #60]	; (800a8f8 <HAL_PCDEx_LPM_Callback+0x68>)
 800a8ba:	f023 0306 	bic.w	r3, r3, #6
 800a8be:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f7fe fc96 	bl	80091f8 <USBD_LL_Resume>
    break;
 800a8cc:	e010      	b.n	800a8f0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f7fe fc79 	bl	80091cc <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	699b      	ldr	r3, [r3, #24]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d005      	beq.n	800a8ee <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a8e2:	4b05      	ldr	r3, [pc, #20]	; (800a8f8 <HAL_PCDEx_LPM_Callback+0x68>)
 800a8e4:	691b      	ldr	r3, [r3, #16]
 800a8e6:	4a04      	ldr	r2, [pc, #16]	; (800a8f8 <HAL_PCDEx_LPM_Callback+0x68>)
 800a8e8:	f043 0306 	orr.w	r3, r3, #6
 800a8ec:	6113      	str	r3, [r2, #16]
    break;
 800a8ee:	bf00      	nop
}
 800a8f0:	bf00      	nop
 800a8f2:	3708      	adds	r7, #8
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}
 800a8f8:	e000ed00 	.word	0xe000ed00

0800a8fc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b083      	sub	sp, #12
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a904:	4b03      	ldr	r3, [pc, #12]	; (800a914 <USBD_static_malloc+0x18>)
}
 800a906:	4618      	mov	r0, r3
 800a908:	370c      	adds	r7, #12
 800a90a:	46bd      	mov	sp, r7
 800a90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a910:	4770      	bx	lr
 800a912:	bf00      	nop
 800a914:	200013a4 	.word	0x200013a4

0800a918 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a918:	b480      	push	{r7}
 800a91a:	b083      	sub	sp, #12
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]

}
 800a920:	bf00      	nop
 800a922:	370c      	adds	r7, #12
 800a924:	46bd      	mov	sp, r7
 800a926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92a:	4770      	bx	lr

0800a92c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a930:	f7f6 f9f0 	bl	8000d14 <SystemClock_Config>
}
 800a934:	bf00      	nop
 800a936:	bd80      	pop	{r7, pc}

0800a938 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a938:	b480      	push	{r7}
 800a93a:	b085      	sub	sp, #20
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	4603      	mov	r3, r0
 800a940:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a942:	2300      	movs	r3, #0
 800a944:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a946:	79fb      	ldrb	r3, [r7, #7]
 800a948:	2b03      	cmp	r3, #3
 800a94a:	d817      	bhi.n	800a97c <USBD_Get_USB_Status+0x44>
 800a94c:	a201      	add	r2, pc, #4	; (adr r2, 800a954 <USBD_Get_USB_Status+0x1c>)
 800a94e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a952:	bf00      	nop
 800a954:	0800a965 	.word	0x0800a965
 800a958:	0800a96b 	.word	0x0800a96b
 800a95c:	0800a971 	.word	0x0800a971
 800a960:	0800a977 	.word	0x0800a977
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a964:	2300      	movs	r3, #0
 800a966:	73fb      	strb	r3, [r7, #15]
    break;
 800a968:	e00b      	b.n	800a982 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a96a:	2303      	movs	r3, #3
 800a96c:	73fb      	strb	r3, [r7, #15]
    break;
 800a96e:	e008      	b.n	800a982 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a970:	2301      	movs	r3, #1
 800a972:	73fb      	strb	r3, [r7, #15]
    break;
 800a974:	e005      	b.n	800a982 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a976:	2303      	movs	r3, #3
 800a978:	73fb      	strb	r3, [r7, #15]
    break;
 800a97a:	e002      	b.n	800a982 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a97c:	2303      	movs	r3, #3
 800a97e:	73fb      	strb	r3, [r7, #15]
    break;
 800a980:	bf00      	nop
  }
  return usb_status;
 800a982:	7bfb      	ldrb	r3, [r7, #15]
}
 800a984:	4618      	mov	r0, r3
 800a986:	3714      	adds	r7, #20
 800a988:	46bd      	mov	sp, r7
 800a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98e:	4770      	bx	lr

0800a990 <__libc_init_array>:
 800a990:	b570      	push	{r4, r5, r6, lr}
 800a992:	4d0d      	ldr	r5, [pc, #52]	; (800a9c8 <__libc_init_array+0x38>)
 800a994:	4c0d      	ldr	r4, [pc, #52]	; (800a9cc <__libc_init_array+0x3c>)
 800a996:	1b64      	subs	r4, r4, r5
 800a998:	10a4      	asrs	r4, r4, #2
 800a99a:	2600      	movs	r6, #0
 800a99c:	42a6      	cmp	r6, r4
 800a99e:	d109      	bne.n	800a9b4 <__libc_init_array+0x24>
 800a9a0:	4d0b      	ldr	r5, [pc, #44]	; (800a9d0 <__libc_init_array+0x40>)
 800a9a2:	4c0c      	ldr	r4, [pc, #48]	; (800a9d4 <__libc_init_array+0x44>)
 800a9a4:	f000 f82e 	bl	800aa04 <_init>
 800a9a8:	1b64      	subs	r4, r4, r5
 800a9aa:	10a4      	asrs	r4, r4, #2
 800a9ac:	2600      	movs	r6, #0
 800a9ae:	42a6      	cmp	r6, r4
 800a9b0:	d105      	bne.n	800a9be <__libc_init_array+0x2e>
 800a9b2:	bd70      	pop	{r4, r5, r6, pc}
 800a9b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9b8:	4798      	blx	r3
 800a9ba:	3601      	adds	r6, #1
 800a9bc:	e7ee      	b.n	800a99c <__libc_init_array+0xc>
 800a9be:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9c2:	4798      	blx	r3
 800a9c4:	3601      	adds	r6, #1
 800a9c6:	e7f2      	b.n	800a9ae <__libc_init_array+0x1e>
 800a9c8:	0800aa74 	.word	0x0800aa74
 800a9cc:	0800aa74 	.word	0x0800aa74
 800a9d0:	0800aa74 	.word	0x0800aa74
 800a9d4:	0800aa78 	.word	0x0800aa78

0800a9d8 <memcpy>:
 800a9d8:	440a      	add	r2, r1
 800a9da:	4291      	cmp	r1, r2
 800a9dc:	f100 33ff 	add.w	r3, r0, #4294967295
 800a9e0:	d100      	bne.n	800a9e4 <memcpy+0xc>
 800a9e2:	4770      	bx	lr
 800a9e4:	b510      	push	{r4, lr}
 800a9e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a9ee:	4291      	cmp	r1, r2
 800a9f0:	d1f9      	bne.n	800a9e6 <memcpy+0xe>
 800a9f2:	bd10      	pop	{r4, pc}

0800a9f4 <memset>:
 800a9f4:	4402      	add	r2, r0
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	d100      	bne.n	800a9fe <memset+0xa>
 800a9fc:	4770      	bx	lr
 800a9fe:	f803 1b01 	strb.w	r1, [r3], #1
 800aa02:	e7f9      	b.n	800a9f8 <memset+0x4>

0800aa04 <_init>:
 800aa04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa06:	bf00      	nop
 800aa08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa0a:	bc08      	pop	{r3}
 800aa0c:	469e      	mov	lr, r3
 800aa0e:	4770      	bx	lr

0800aa10 <_fini>:
 800aa10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa12:	bf00      	nop
 800aa14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa16:	bc08      	pop	{r3}
 800aa18:	469e      	mov	lr, r3
 800aa1a:	4770      	bx	lr
